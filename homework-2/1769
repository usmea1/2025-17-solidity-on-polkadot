// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract ERC20{
        string private _name;
        string private _symbol;
        uint8 private _decimals;
        uint256 private _totalSupply;

        mapping(address => uint256) private _balances;
        mapping(address => mapping(address => uint256)) private _allowances;

        event Transfer(address indexed from, address indexed to, uint256 value);
        event Approval(address indexed owner, address indexed spender, uint256 value);
constructor(
        string memory name_, 
        string memory symbol_, 
        uint8 decimals_, 
        uint256 initialSupply_
    ) {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
        _totalSupply = initialSupply_;
        
        _balances[msg.sender] = initialSupply_;
        emit Transfer(address(0), msg.sender, initialSupply_);
       }
       
        function name() public view returns (string memory) {
        return _name;
        }
      
        function symbol() public view returns (string memory) {
        return _symbol;
        }
      
        function decimals() public view returns (uint8) {
        return _decimals;
        }
       
        function totalSupply() public view returns (uint256) {
        return _totalSupply;
        }
       
        function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
        } 
       
        function transfer(address to, uint256 amount) public returns (bool) {
        require(_balances[msg.sender] >= amount, "Insufficient balance");
        _balances[msg.sender] -= amount;
        _balances[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        require(_balances[from] >= amount, "Insufficient balance");
        require(_allowances[from][msg.sender] >= amount, "Insufficient allowance");
        _allowances[from][msg.sender] -= amount;
        _balances[from] -= amount;
        _balances[to] += amount;
        emit Transfer(from, to, amount);
        return true;
    }
  
        function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }
        
        function mint(address account, uint256 amount) public {
        require(account != address(0), "ERC20: mint to the zero address");
        
        _totalSupply += amount;
        unchecked {
            _balances[account] += amount;
        }
        
        emit Transfer(address(0), account, amount);
    }

}
