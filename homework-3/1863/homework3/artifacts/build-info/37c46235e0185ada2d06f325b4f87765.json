{
	"id": "37c46235e0185ada2d06f325b4f87765",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"homework3/TestContract.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./LogicContract.sol\";\r\nimport \"./ProxyContract.sol\";\r\n\r\n// 测试合约 - 用于验证功能\r\ncontract TestContract {\r\n    // 测试delegatecall功能\r\n    function testDelegateCall() public {\r\n        // 1. 部署逻辑合约\r\n        LogicContract logic = new LogicContract();\r\n        \r\n        // 2. 部署代理合约，传入逻辑合约地址\r\n        ProxyContract proxy = new ProxyContract(address(logic));\r\n        \r\n        // 3. 验证初始状态\r\n        require(logic.value() == 0, \"Logic initial value should be 0\");\r\n        require(proxy.value() == 0, \"Proxy initial value should be 0\");\r\n        \r\n        // 4. 直接调用逻辑合约的increment\r\n        logic.increment();\r\n        require(logic.value() == 1, \"Logic value should be 1 after increment\");\r\n        require(proxy.value() == 0, \"Proxy value should remain 0\");\r\n        \r\n        // 5. 通过代理调用increment\r\n        proxy.increment();\r\n        require(proxy.value() == 1, \"Proxy value should be 1 after increment\");\r\n        require(logic.value() == 1, \"Logic value should remain 1\");\r\n        \r\n        // 6. 测试setValue函数\r\n        proxy.setValue(10);\r\n        require(proxy.value() == 10, \"Proxy value should be 10\");\r\n        require(logic.value() == 1, \"Logic value should remain 1\");\r\n        \r\n        // 7. 测试fallback功能（如果实现了）\r\n        // 可以通过proxy直接调用logic的任何函数\r\n    }\r\n}"
			},
			"homework3/ProxyContract.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract ProxyContract {\r\n    uint public value;\r\n    address public logicContract;\r\n    \r\n    constructor(address _logicContract) {\r\n        logicContract = _logicContract;\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function setLogicContract(address _logicContract) public {\r\n        logicContract = _logicContract;\r\n    }\r\n    \r\n    function increment() public returns (bool) {\r\n        (bool success, ) = logicContract.delegatecall(\r\n            abi.encodeWithSignature(\"increment()\")\r\n        );\r\n        return success;\r\n    }\r\n    \r\n    function setValue(uint _newValue) public returns (bool) {\r\n        (bool success, ) = logicContract.delegatecall(\r\n            abi.encodeWithSignature(\"setValue(uint256)\", _newValue)\r\n        );\r\n        return success;\r\n    }\r\n    \r\n\r\n    fallback() external payable {\r\n        address _impl = logicContract;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n            \r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}"
			},
			"homework3/LogicContract.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract LogicContract {\r\n\r\n    uint public value;\r\n    \r\n    function increment() public {\r\n        value += 1;\r\n    }\r\n    \r\n    function setValue(uint _newValue) public {\r\n        value = _newValue;\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"homework3/LogicContract.sol": {
				"LogicContract": {
					"abi": [
						{
							"inputs": [],
							"name": "increment",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_newValue",
									"type": "uint256"
								}
							],
							"name": "setValue",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "value",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"homework3/LogicContract.sol\":\"LogicContract\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"homework3/LogicContract.sol\":{\"keccak256\":\"0x1542228b5052b66b30fcfb7477ddc1db6427e24fd5e62dddc8b58249914fc962\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac6be642d4cf23c89a86d8bebbe3d5e23836f077529282348a3fed1757b90b\",\"dweb:/ipfs/Qmdv3eMJS1RxMc2vCKUqTtNdRoy27QqaNcZhC24SohTmU4\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 3,
								"contract": "homework3/LogicContract.sol:LogicContract",
								"label": "value",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 1189\n// Code size = 3568 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 2 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 7 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 4 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 0 // 'call_data_copy'\n   848: fallthrough\n      : @24 (gas: 2)\n   849: a1 = i32 [0x20008]\n   854: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   857: a0 = 0x30010\n   862: i32 a0 = a0 + 0\n   864: ecalli 5 // 'set_immutable_data'\n   866: fallthrough\n      : @26 (gas: 3)\n   867: a0 = s1\n   869: a1 = 0\n   871: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   876: i32 a1 = a0 + 0\n   878: a0 = 0\n   880: a2 = 0\n   882: ra = 0x12\n   885: ecalli 4 // 'seal_return'\n   887: fallthrough\n      : @28 [@dyn 9] (gas: 8)\n   888: sp = sp + 0xffffffffffffffc0\n   891: u64 [sp + 0x38] = ra\n   894: u64 [sp + 0x30] = s0\n   897: s0 = sp + 0x40\n   900: sp = sp & 0xffffffffffffffe0\n   903: a0 = 0x40\n   906: a1 = 0x20\n   909: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 34)\n   914: u8 [a0 + 31] = 0x80\n   919: u8 [a0 + 30] = 0\n   922: u8 [a0 + 29] = 0\n   925: u8 [a0 + 28] = 0\n   928: u8 [a0 + 27] = 0\n   931: u8 [a0 + 26] = 0\n   934: u8 [a0 + 25] = 0\n   937: u8 [a0 + 24] = 0\n   940: u8 [a0 + 23] = 0\n   943: u8 [a0 + 22] = 0\n   946: u8 [a0 + 21] = 0\n   949: u8 [a0 + 20] = 0\n   952: u8 [a0 + 19] = 0\n   955: u8 [a0 + 18] = 0\n   958: u8 [a0 + 17] = 0\n   961: u8 [a0 + 16] = 0\n   964: u8 [a0 + 15] = 0\n   967: u8 [a0 + 14] = 0\n   970: u8 [a0 + 13] = 0\n   973: u8 [a0 + 12] = 0\n   976: u8 [a0 + 11] = 0\n   979: u8 [a0 + 10] = 0\n   982: u8 [a0 + 9] = 0\n   985: u8 [a0 + 8] = 0\n   988: u8 [a0 + 7] = 0\n   991: u8 [a0 + 3] = 0\n   994: u8 [a0 + 2] = 0\n   997: u8 [a0 + 1] = 0\n  1000: u8 [a0 + 0] = 0\n  1002: a1 = i32 [0x20004]\n  1007: u8 [a0 + 6] = 0\n  1010: u8 [a0 + 5] = 0\n  1013: u8 [a0 + 4] = 0\n  1016: jump @35 if a1 <u 4\n      : @30 (gas: 4)\n  1020: i32 a0 = sp + 0\n  1022: a1 = 0\n  1024: ecalli 1 // 'call_data_load'\n  1026: fallthrough\n      : @31 (gas: 2)\n  1027: a0 = i32 [sp + 0x1c]\n  1030: jump @37 if a0 == 3500007562\n      : @32 (gas: 1)\n  1037: jump @36 if a0 == 1067774533\n      : @33 (gas: 1)\n  1044: jump @35 if a0 != 1428426871\n      : @34 (gas: 14)\n  1051: ra = 0x16\n  1054: sp = sp + 0xffffffffffffff40\n  1058: u64 [sp + 0xb8] = ra\n  1062: u64 [sp + 0xb0] = s0\n  1066: u64 [sp + 0xa8] = s1\n  1070: s0 = sp + 0xc0\n  1074: sp = sp & 0xffffffffffffffe0\n  1077: u64 [sp + 56] = 0\n  1080: u64 [sp + 48] = 0\n  1083: u64 [sp + 40] = 0\n  1086: u64 [sp + 32] = 0\n  1089: i32 a0 = sp + 0x20\n  1092: ecalli 7 // 'value_transferred'\n  1094: jump @51\n      : @35 [@dyn 11] (gas: 1)\n  1097: ra = 24, jump @71\n      : @36 [@dyn 12] (gas: 14)\n  1102: ra = 0x1a\n  1105: sp = sp + 0xffffffffffffff60\n  1109: u64 [sp + 0x98] = ra\n  1113: u64 [sp + 0x90] = s0\n  1117: u64 [sp + 0x88] = s1\n  1121: s0 = sp + 0xa0\n  1125: sp = sp & 0xffffffffffffffe0\n  1128: u64 [sp + 56] = 0\n  1131: u64 [sp + 48] = 0\n  1134: u64 [sp + 40] = 0\n  1137: u64 [sp + 32] = 0\n  1140: i32 a0 = sp + 0x20\n  1143: ecalli 7 // 'value_transferred'\n  1145: jump @40\n      : @37 [@dyn 13] (gas: 1)\n  1148: ra = 28, jump @60\n      : @38 [@dyn 14] (gas: 7)\n  1153: sp = sp + 0xfffffffffffffff0\n  1156: u64 [sp + 0x8] = ra\n  1159: u64 [sp] = s0\n  1161: s0 = a0\n  1163: a0 = 0x40\n  1166: a1 = 0x20\n  1169: ra = 30, jump @0\n      : @39 [@dyn 15] (gas: 100)\n  1174: a1 = u8 [a0 + 0x1]\n  1177: a2 = u8 [a0]\n  1179: a3 = u8 [a0 + 0x2]\n  1182: a4 = u8 [a0 + 0x3]\n  1185: a1 = a1 << 0x8\n  1188: a1 = a1 | a2\n  1191: a3 = a3 << 0x10\n  1194: a4 = a4 << 0x18\n  1197: a3 = a3 | a4\n  1200: a1 = a1 | a3\n  1203: a2 = u8 [a0 + 0x5]\n  1206: a3 = u8 [a0 + 0x4]\n  1209: a4 = u8 [a0 + 0x6]\n  1212: a5 = u8 [a0 + 0x7]\n  1215: a2 = a2 << 0x8\n  1218: a2 = a2 | a3\n  1221: a4 = a4 << 0x10\n  1224: a5 = a5 << 0x18\n  1227: a4 = a4 | a5\n  1230: a2 = a2 | a4\n  1233: a2 = a2 << 0x20\n  1236: t0 = a2 | a1\n  1239: a2 = u8 [a0 + 0x9]\n  1242: a3 = u8 [a0 + 0x8]\n  1245: a4 = u8 [a0 + 0xa]\n  1248: a5 = u8 [a0 + 0xb]\n  1251: a2 = a2 << 0x8\n  1254: a2 = a2 | a3\n  1257: a4 = a4 << 0x10\n  1260: a5 = a5 << 0x18\n  1263: a4 = a4 | a5\n  1266: a2 = a2 | a4\n  1269: a3 = u8 [a0 + 0xd]\n  1272: a4 = u8 [a0 + 0xc]\n  1275: a5 = u8 [a0 + 0xe]\n  1278: a1 = u8 [a0 + 0xf]\n  1281: a3 = a3 << 0x8\n  1284: a3 = a3 | a4\n  1287: a5 = a5 << 0x10\n  1290: a1 = a1 << 0x18\n  1293: a1 = a1 | a5\n  1296: a1 = a1 | a3\n  1299: a1 = a1 << 0x20\n  1302: t1 = a1 | a2\n  1305: a1 = u8 [a0 + 0x11]\n  1308: a3 = u8 [a0 + 0x10]\n  1311: a4 = u8 [a0 + 0x12]\n  1314: a5 = u8 [a0 + 0x13]\n  1317: a1 = a1 << 0x8\n  1320: a1 = a1 | a3\n  1323: a4 = a4 << 0x10\n  1326: a5 = a5 << 0x18\n  1329: a4 = a4 | a5\n  1332: a1 = a1 | a4\n  1335: a3 = u8 [a0 + 0x15]\n  1338: a4 = u8 [a0 + 0x14]\n  1341: a5 = u8 [a0 + 0x16]\n  1344: a2 = u8 [a0 + 0x17]\n  1347: a3 = a3 << 0x8\n  1350: a3 = a3 | a4\n  1353: a5 = a5 << 0x10\n  1356: a2 = a2 << 0x18\n  1359: a2 = a2 | a5\n  1362: a2 = a2 | a3\n  1365: a2 = a2 << 0x20\n  1368: a3 = a2 | a1\n  1371: a1 = u8 [a0 + 0x19]\n  1374: a2 = u8 [a0 + 0x18]\n  1377: a4 = u8 [a0 + 0x1a]\n  1380: a5 = u8 [a0 + 0x1b]\n  1383: a1 = a1 << 0x8\n  1386: a1 = a1 | a2\n  1389: a4 = a4 << 0x10\n  1392: a5 = a5 << 0x18\n  1395: a4 = a4 | a5\n  1398: a1 = a1 | a4\n  1401: a2 = u8 [a0 + 0x1d]\n  1404: a4 = u8 [a0 + 0x1c]\n  1407: a5 = u8 [a0 + 0x1e]\n  1410: a0 = u8 [a0 + 0x1f]\n  1413: a2 = a2 << 0x8\n  1416: a2 = a2 | a4\n  1419: a5 = a5 << 0x10\n  1422: a0 = a0 << 0x18\n  1425: a0 = a0 | a5\n  1428: a0 = a0 | a2\n  1431: a0 = a0 << 0x20\n  1434: a0 = a0 | a1\n  1437: a0 = reverse a0\n  1439: a1 = reverse a3\n  1441: a2 = reverse t1\n  1443: a3 = reverse t0\n  1445: u64 [s0 + 0x18] = a3\n  1448: u64 [s0 + 0x10] = a2\n  1451: u64 [s0 + 0x8] = a1\n  1454: u64 [s0] = a0\n  1456: ra = u64 [sp + 0x8]\n  1459: s0 = u64 [sp]\n  1461: sp = sp + 0x10\n  1464: ret\n      : @40 (gas: 8)\n  1466: a0 = u64 [sp + 0x30]\n  1469: a1 = u64 [sp + 0x38]\n  1472: a2 = u64 [sp + 0x28]\n  1475: a3 = u64 [sp + 0x20]\n  1478: a1 = a1 | a2\n  1481: a0 = a0 | a3\n  1484: a0 = a0 | a1\n  1487: jump @45 if a0 != 0\n      : @41 (gas: 2)\n  1491: a0 = i32 [0x20004]\n  1496: jump @45 if a0 <=u 3\n      : @42 (gas: 26)\n  1501: u64 [sp + 88] = 0\n  1504: u64 [sp + 80] = 0\n  1507: u64 [sp + 72] = 0\n  1510: u64 [sp + 64] = 0\n  1513: u64 [sp + 120] = 0\n  1516: u64 [sp + 112] = 0\n  1519: u64 [sp + 104] = 0\n  1522: u64 [sp + 96] = 0\n  1525: u32 [sp + 128] = 0x20\n  1530: i32 a1 = sp + 0x40\n  1533: i32 a3 = sp + 0x60\n  1536: i32 a4 = sp + 0x80\n  1540: a2 = 0xffffffffffffffff\n  1543: a0 = 0\n  1545: ecalli 3 // 'get_storage'\n  1547: a0 = u64 [sp + 0x78]\n  1550: u64 [sp] = a0\n  1552: a0 = u64 [sp + 0x70]\n  1555: u64 [sp + 0x8] = a0\n  1558: a0 = u64 [sp + 0x68]\n  1561: u64 [sp + 0x10] = a0\n  1564: a0 = u64 [sp + 0x60]\n  1567: u64 [sp + 0x18] = a0\n  1570: a0 = 0x40\n  1573: a1 = 0x20\n  1576: ra = 32, jump @0\n      : @43 [@dyn 16] (gas: 100)\n  1581: a1 = u8 [a0 + 0x11]\n  1584: a2 = u8 [a0 + 0x10]\n  1587: a3 = u8 [a0 + 0x12]\n  1590: a4 = u8 [a0 + 0x13]\n  1593: a1 = a1 << 0x8\n  1596: a1 = a1 | a2\n  1599: a3 = a3 << 0x10\n  1602: a4 = a4 << 0x18\n  1605: a3 = a3 | a4\n  1608: a1 = a1 | a3\n  1611: a2 = u8 [a0 + 0x15]\n  1614: a3 = u8 [a0 + 0x14]\n  1617: a4 = u8 [a0 + 0x16]\n  1620: a5 = u8 [a0 + 0x17]\n  1623: a2 = a2 << 0x8\n  1626: a2 = a2 | a3\n  1629: a4 = a4 << 0x10\n  1632: a5 = a5 << 0x18\n  1635: a4 = a4 | a5\n  1638: a2 = a2 | a4\n  1641: a2 = a2 << 0x20\n  1644: t0 = a2 | a1\n  1647: a2 = u8 [a0 + 0x1]\n  1650: a3 = u8 [a0]\n  1652: a4 = u8 [a0 + 0x2]\n  1655: a5 = u8 [a0 + 0x3]\n  1658: a2 = a2 << 0x8\n  1661: a2 = a2 | a3\n  1664: a4 = a4 << 0x10\n  1667: a5 = a5 << 0x18\n  1670: a4 = a4 | a5\n  1673: a2 = a2 | a4\n  1676: a3 = u8 [a0 + 0x5]\n  1679: a4 = u8 [a0 + 0x4]\n  1682: a5 = u8 [a0 + 0x6]\n  1685: s1 = u8 [a0 + 0x7]\n  1688: a3 = a3 << 0x8\n  1691: a3 = a3 | a4\n  1694: a5 = a5 << 0x10\n  1697: s1 = s1 << 0x18\n  1700: a5 = a5 | s1\n  1703: a3 = a3 | a5\n  1706: a3 = a3 << 0x20\n  1709: a2 = a2 | a3\n  1712: a3 = u8 [a0 + 0x19]\n  1715: a4 = u8 [a0 + 0x18]\n  1718: a5 = u8 [a0 + 0x1a]\n  1721: s1 = u8 [a0 + 0x1b]\n  1724: a3 = a3 << 0x8\n  1727: a3 = a3 | a4\n  1730: a5 = a5 << 0x10\n  1733: s1 = s1 << 0x18\n  1736: a5 = a5 | s1\n  1739: a3 = a3 | a5\n  1742: a4 = u8 [a0 + 0x1d]\n  1745: a5 = u8 [a0 + 0x1c]\n  1748: s1 = u8 [a0 + 0x1e]\n  1751: a1 = u8 [a0 + 0x1f]\n  1754: a4 = a4 << 0x8\n  1757: a4 = a4 | a5\n  1760: s1 = s1 << 0x10\n  1763: a1 = a1 << 0x18\n  1766: a1 = a1 | s1\n  1769: a1 = a1 | a4\n  1772: a1 = a1 << 0x20\n  1775: a3 = a3 | a1\n  1778: a1 = u8 [a0 + 0x9]\n  1781: a4 = u8 [a0 + 0x8]\n  1784: a5 = u8 [a0 + 0xa]\n  1787: s1 = u8 [a0 + 0xb]\n  1790: a1 = a1 << 0x8\n  1793: a1 = a1 | a4\n  1796: a5 = a5 << 0x10\n  1799: s1 = s1 << 0x18\n  1802: a5 = a5 | s1\n  1805: a1 = a1 | a5\n  1808: a4 = u8 [a0 + 0xd]\n  1811: a5 = u8 [a0 + 0xc]\n  1814: s1 = u8 [a0 + 0xe]\n  1817: a0 = u8 [a0 + 0xf]\n  1820: a4 = a4 << 0x8\n  1823: a4 = a4 | a5\n  1826: s1 = s1 << 0x10\n  1829: a0 = a0 << 0x18\n  1832: a0 = a0 | s1\n  1835: a0 = a0 | a4\n  1838: a0 = a0 << 0x20\n  1841: a0 = a0 | a1\n  1844: a1 = reverse a0\n  1846: a0 = reverse a3\n  1848: a2 = reverse a2\n  1850: a3 = reverse t0\n  1852: a2 = a2 | a3\n  1855: a3 = a0 | a1\n  1858: a3 = a3 | a2\n  1861: a3 = a3 >> 0x20\n  1864: a1 = a1 | a2\n  1867: a1 = a1 << 0x20\n  1870: a1 = a1 | a3\n  1873: jump @47 if a1 == 0\n      : @44 (gas: 1)\n  1876: trap\n      : @45 (gas: 3)\n  1877: a0 = 0\n  1879: a1 = 0\n  1881: ra = 34, jump @0\n      : @46 [@dyn 17] (gas: 5)\n  1886: i32 a1 = a0 + 0\n  1888: a0 = 0x1\n  1891: a2 = 0\n  1893: ecalli 4 // 'seal_return'\n  1895: fallthrough\n      : @47 (gas: 4)\n  1896: i32 s1 = a0 + 0\n  1898: a1 = 0x20\n  1901: a0 = s1\n  1903: ra = 36, jump @0\n      : @48 [@dyn 18] (gas: 71)\n  1908: a1 = u64 [sp]\n  1910: a1 = reverse a1\n  1912: a2 = u64 [sp + 0x8]\n  1915: a2 = reverse a2\n  1917: a3 = u64 [sp + 0x10]\n  1920: a3 = reverse a3\n  1922: a4 = u64 [sp + 0x18]\n  1925: a4 = reverse a4\n  1927: a5 = a4 >> 0x38\n  1930: u8 [a0 + 0x1f] = a5\n  1933: a5 = a4 >> 0x30\n  1936: u8 [a0 + 0x1e] = a5\n  1939: a5 = a4 >> 0x28\n  1942: u8 [a0 + 0x1d] = a5\n  1945: a5 = a4 >> 0x20\n  1948: u8 [a0 + 0x1c] = a5\n  1951: a5 = a4 >> 0x18\n  1954: u8 [a0 + 0x1b] = a5\n  1957: a5 = a4 >> 0x10\n  1960: u8 [a0 + 0x1a] = a5\n  1963: a5 = a4 >> 0x8\n  1966: u8 [a0 + 0x19] = a5\n  1969: u8 [a0 + 0x18] = a4\n  1972: u8 [a0 + 0x10] = a3\n  1975: a4 = a3 >> 0x38\n  1978: u8 [a0 + 0x17] = a4\n  1981: a4 = a3 >> 0x30\n  1984: u8 [a0 + 0x16] = a4\n  1987: a4 = a3 >> 0x28\n  1990: u8 [a0 + 0x15] = a4\n  1993: a4 = a3 >> 0x20\n  1996: u8 [a0 + 0x14] = a4\n  1999: a4 = a3 >> 0x18\n  2002: u8 [a0 + 0x13] = a4\n  2005: a4 = a3 >> 0x10\n  2008: u8 [a0 + 0x12] = a4\n  2011: a3 = a3 >> 0x8\n  2014: u8 [a0 + 0x11] = a3\n  2017: u8 [a0 + 0x8] = a2\n  2020: a3 = a2 >> 0x38\n  2023: u8 [a0 + 0xf] = a3\n  2026: a3 = a2 >> 0x30\n  2029: u8 [a0 + 0xe] = a3\n  2032: a3 = a2 >> 0x28\n  2035: u8 [a0 + 0xd] = a3\n  2038: a3 = a2 >> 0x20\n  2041: u8 [a0 + 0xc] = a3\n  2044: a3 = a2 >> 0x18\n  2047: u8 [a0 + 0xb] = a3\n  2050: a3 = a2 >> 0x10\n  2053: u8 [a0 + 0xa] = a3\n  2056: a2 = a2 >> 0x8\n  2059: u8 [a0 + 0x9] = a2\n  2062: u8 [a0] = a1\n  2064: a2 = a1 >> 0x38\n  2067: u8 [a0 + 0x7] = a2\n  2070: a2 = a1 >> 0x30\n  2073: u8 [a0 + 0x6] = a2\n  2076: a2 = a1 >> 0x28\n  2079: u8 [a0 + 0x5] = a2\n  2082: a2 = a1 >> 0x20\n  2085: u8 [a0 + 0x4] = a2\n  2088: a2 = a1 >> 0x18\n  2091: u8 [a0 + 0x3] = a2\n  2094: a2 = a1 >> 0x10\n  2097: u8 [a0 + 0x2] = a2\n  2100: a1 = a1 >> 0x8\n  2103: u8 [a0 + 0x1] = a1\n  2106: a1 = 0x20\n  2109: a0 = s1\n  2111: ra = 38, jump @0\n      : @49 [@dyn 19] (gas: 6)\n  2116: i32 a1 = a0 + 0\n  2118: a2 = 0x20\n  2121: a0 = 0\n  2123: ra = 0x28\n  2126: ecalli 4 // 'seal_return'\n  2128: fallthrough\n      : @50 [@dyn 20] (gas: 1)\n  2129: ret\n      : @51 (gas: 8)\n  2131: a0 = u64 [sp + 0x30]\n  2134: a1 = u64 [sp + 0x38]\n  2137: a2 = u64 [sp + 0x28]\n  2140: a3 = u64 [sp + 0x20]\n  2143: a1 = a1 | a2\n  2146: a0 = a0 | a3\n  2149: a0 = a0 | a1\n  2152: jump @56 if a0 != 0\n      : @52 (gas: 2)\n  2156: a0 = i32 [0x20004]\n  2161: jump @56 if a0 <=u 35\n      : @53 (gas: 45)\n  2166: i32 a0 = sp + 0x80\n  2170: a1 = 0x4\n  2173: ecalli 1 // 'call_data_load'\n  2175: a0 = u64 [sp + 0x80]\n  2179: u64 [sp + 0x18] = a0\n  2182: a0 = u64 [sp + 0x88]\n  2186: u64 [sp + 0x10] = a0\n  2189: a0 = u64 [sp + 0x90]\n  2193: u64 [sp + 0x8] = a0\n  2196: s1 = u64 [sp + 0x98]\n  2200: u64 [sp + 120] = 0\n  2203: u64 [sp + 112] = 0\n  2206: u64 [sp + 104] = 0\n  2209: u64 [sp + 96] = 0\n  2212: u64 [sp + 152] = 0\n  2216: u64 [sp + 144] = 0\n  2220: u64 [sp + 136] = 0\n  2224: u64 [sp + 128] = 0\n  2228: u32 [sp + 64] = 0x20\n  2232: i32 a1 = sp + 0x60\n  2235: i32 a3 = sp + 0x80\n  2239: i32 a4 = sp + 0x40\n  2242: a2 = 0xffffffffffffffff\n  2245: a0 = 0\n  2247: ecalli 3 // 'get_storage'\n  2249: u64 [sp + 120] = 0\n  2252: u64 [sp + 112] = 0\n  2255: u64 [sp + 104] = 0\n  2258: u64 [sp + 96] = 0\n  2261: u64 [sp + 0x98] = s1\n  2265: a0 = u64 [sp + 0x8]\n  2268: u64 [sp + 0x90] = a0\n  2272: a0 = u64 [sp + 0x10]\n  2275: u64 [sp + 0x88] = a0\n  2279: a0 = u64 [sp + 0x18]\n  2282: u64 [sp + 0x80] = a0\n  2286: i32 a1 = sp + 0x60\n  2289: i32 a3 = sp + 0x80\n  2293: a2 = 0xffffffffffffffff\n  2296: a4 = 0x20\n  2299: a0 = 0\n  2301: ecalli 6 // 'set_storage'\n  2303: a0 = 0x40\n  2306: a1 = 0x20\n  2309: ra = 42, jump @0\n      : @54 [@dyn 21] (gas: 100)\n  2314: a1 = u8 [a0 + 0x11]\n  2317: a2 = u8 [a0 + 0x10]\n  2320: a3 = u8 [a0 + 0x12]\n  2323: a4 = u8 [a0 + 0x13]\n  2326: a1 = a1 << 0x8\n  2329: a1 = a1 | a2\n  2332: a3 = a3 << 0x10\n  2335: a4 = a4 << 0x18\n  2338: a3 = a3 | a4\n  2341: a1 = a1 | a3\n  2344: a2 = u8 [a0 + 0x15]\n  2347: a3 = u8 [a0 + 0x14]\n  2350: a4 = u8 [a0 + 0x16]\n  2353: a5 = u8 [a0 + 0x17]\n  2356: a2 = a2 << 0x8\n  2359: a2 = a2 | a3\n  2362: a4 = a4 << 0x10\n  2365: a5 = a5 << 0x18\n  2368: a4 = a4 | a5\n  2371: a2 = a2 | a4\n  2374: a2 = a2 << 0x20\n  2377: t0 = a2 | a1\n  2380: a2 = u8 [a0 + 0x1]\n  2383: a3 = u8 [a0]\n  2385: a4 = u8 [a0 + 0x2]\n  2388: a5 = u8 [a0 + 0x3]\n  2391: a2 = a2 << 0x8\n  2394: a2 = a2 | a3\n  2397: a4 = a4 << 0x10\n  2400: a5 = a5 << 0x18\n  2403: a4 = a4 | a5\n  2406: a2 = a2 | a4\n  2409: a3 = u8 [a0 + 0x5]\n  2412: a4 = u8 [a0 + 0x4]\n  2415: a5 = u8 [a0 + 0x6]\n  2418: s1 = u8 [a0 + 0x7]\n  2421: a3 = a3 << 0x8\n  2424: a3 = a3 | a4\n  2427: a5 = a5 << 0x10\n  2430: s1 = s1 << 0x18\n  2433: a5 = a5 | s1\n  2436: a3 = a3 | a5\n  2439: a3 = a3 << 0x20\n  2442: a2 = a2 | a3\n  2445: a3 = u8 [a0 + 0x19]\n  2448: a4 = u8 [a0 + 0x18]\n  2451: a5 = u8 [a0 + 0x1a]\n  2454: s1 = u8 [a0 + 0x1b]\n  2457: a3 = a3 << 0x8\n  2460: a3 = a3 | a4\n  2463: a5 = a5 << 0x10\n  2466: s1 = s1 << 0x18\n  2469: a5 = a5 | s1\n  2472: a3 = a3 | a5\n  2475: a4 = u8 [a0 + 0x1d]\n  2478: a5 = u8 [a0 + 0x1c]\n  2481: s1 = u8 [a0 + 0x1e]\n  2484: a1 = u8 [a0 + 0x1f]\n  2487: a4 = a4 << 0x8\n  2490: a4 = a4 | a5\n  2493: s1 = s1 << 0x10\n  2496: a1 = a1 << 0x18\n  2499: a1 = a1 | s1\n  2502: a1 = a1 | a4\n  2505: a1 = a1 << 0x20\n  2508: a3 = a3 | a1\n  2511: a1 = u8 [a0 + 0x9]\n  2514: a4 = u8 [a0 + 0x8]\n  2517: a5 = u8 [a0 + 0xa]\n  2520: s1 = u8 [a0 + 0xb]\n  2523: a1 = a1 << 0x8\n  2526: a1 = a1 | a4\n  2529: a5 = a5 << 0x10\n  2532: s1 = s1 << 0x18\n  2535: a5 = a5 | s1\n  2538: a1 = a1 | a5\n  2541: a4 = u8 [a0 + 0xd]\n  2544: a5 = u8 [a0 + 0xc]\n  2547: s1 = u8 [a0 + 0xe]\n  2550: a0 = u8 [a0 + 0xf]\n  2553: a4 = a4 << 0x8\n  2556: a4 = a4 | a5\n  2559: s1 = s1 << 0x10\n  2562: a0 = a0 << 0x18\n  2565: a0 = a0 | s1\n  2568: a0 = a0 | a4\n  2571: a0 = a0 << 0x20\n  2574: a0 = a0 | a1\n  2577: a1 = reverse a0\n  2579: a0 = reverse a3\n  2581: a2 = reverse a2\n  2583: a3 = reverse t0\n  2585: a2 = a2 | a3\n  2588: a3 = a0 | a1\n  2591: a3 = a3 | a2\n  2594: a3 = a3 >> 0x20\n  2597: a1 = a1 | a2\n  2600: a1 = a1 << 0x20\n  2603: a1 = a1 | a3\n  2606: jump @58 if a1 == 0\n      : @55 (gas: 1)\n  2609: trap\n      : @56 (gas: 3)\n  2610: a0 = 0\n  2612: a1 = 0\n  2614: ra = 44, jump @0\n      : @57 [@dyn 22] (gas: 7)\n  2619: i32 a1 = a0 + 0\n  2621: a0 = 0x1\n  2624: a2 = 0\n  2626: ecalli 4 // 'seal_return'\n  2628: i32 a0 = a0 + 0\n  2630: ra = 0x2e\n  2633: jump @0\n      : @58 (gas: 2)\n  2636: i32 a0 = a0 + 0\n  2638: ra = 46, jump @0\n      : @59 [@dyn 23] (gas: 6)\n  2643: i32 a1 = a0 + 0\n  2645: a0 = 0\n  2647: a2 = 0\n  2649: ra = 0x30\n  2652: ecalli 4 // 'seal_return'\n  2654: fallthrough\n      : @60 [@dyn 24] (gas: 12)\n  2655: sp = sp + 0xffffffffffffffc0\n  2658: u64 [sp + 0x38] = ra\n  2661: u64 [sp + 0x30] = s0\n  2664: s0 = sp + 0x40\n  2667: sp = sp & 0xffffffffffffffe0\n  2670: u64 [sp + 24] = 0\n  2673: u64 [sp + 16] = 0\n  2676: u64 [sp + 8] = 0\n  2679: u64 [sp + 0] = 0\n  2681: i32 a0 = sp + 0\n  2683: ecalli 7 // 'value_transferred'\n  2685: fallthrough\n      : @61 (gas: 8)\n  2686: a0 = u64 [sp + 0x10]\n  2689: a1 = u64 [sp + 0x18]\n  2692: a2 = u64 [sp + 0x8]\n  2695: a3 = u64 [sp]\n  2697: a1 = a1 | a2\n  2700: a0 = a0 | a3\n  2703: a0 = a0 | a1\n  2706: jump @67 if a0 != 0\n      : @62 (gas: 2)\n  2710: a0 = i32 [0x20004]\n  2715: jump @67 if a0 <=u 3\n      : @63 (gas: 23)\n  2720: ra = 0x32\n  2723: sp = sp + 0xffffffffffffff20\n  2727: u64 [sp + 0xd8] = ra\n  2731: u64 [sp + 0xd0] = s0\n  2735: u64 [sp + 0xc8] = s1\n  2739: s0 = sp + 0xe0\n  2743: sp = sp & 0xffffffffffffffe0\n  2746: u64 [sp + 152] = 0\n  2750: u64 [sp + 144] = 0\n  2754: u64 [sp + 136] = 0\n  2758: u64 [sp + 128] = 0\n  2762: u64 [sp + 184] = 0\n  2766: u64 [sp + 176] = 0\n  2770: u64 [sp + 168] = 0\n  2774: u64 [sp + 160] = 0\n  2778: u32 [sp + 96] = 0x20\n  2782: i32 a1 = sp + 0x80\n  2786: i32 a3 = sp + 0xa0\n  2790: i32 a4 = sp + 0x60\n  2793: a2 = 0xffffffffffffffff\n  2796: a0 = 0\n  2798: ecalli 3 // 'get_storage'\n  2800: jump @74\n      : @64 [@dyn 25] (gas: 3)\n  2803: a0 = 0x40\n  2806: a1 = 0x20\n  2809: ra = 52, jump @0\n      : @65 [@dyn 26] (gas: 100)\n  2814: a1 = u8 [a0 + 0x11]\n  2817: a2 = u8 [a0 + 0x10]\n  2820: a3 = u8 [a0 + 0x12]\n  2823: a4 = u8 [a0 + 0x13]\n  2826: a1 = a1 << 0x8\n  2829: a1 = a1 | a2\n  2832: a3 = a3 << 0x10\n  2835: a4 = a4 << 0x18\n  2838: a3 = a3 | a4\n  2841: a1 = a1 | a3\n  2844: a2 = u8 [a0 + 0x15]\n  2847: a3 = u8 [a0 + 0x14]\n  2850: a4 = u8 [a0 + 0x16]\n  2853: a5 = u8 [a0 + 0x17]\n  2856: a2 = a2 << 0x8\n  2859: a2 = a2 | a3\n  2862: a4 = a4 << 0x10\n  2865: a5 = a5 << 0x18\n  2868: a4 = a4 | a5\n  2871: a2 = a2 | a4\n  2874: a2 = a2 << 0x20\n  2877: t0 = a2 | a1\n  2880: a2 = u8 [a0 + 0x1]\n  2883: a3 = u8 [a0]\n  2885: a4 = u8 [a0 + 0x2]\n  2888: a5 = u8 [a0 + 0x3]\n  2891: a2 = a2 << 0x8\n  2894: a2 = a2 | a3\n  2897: a4 = a4 << 0x10\n  2900: a5 = a5 << 0x18\n  2903: a4 = a4 | a5\n  2906: a2 = a2 | a4\n  2909: a3 = u8 [a0 + 0x5]\n  2912: a4 = u8 [a0 + 0x4]\n  2915: a5 = u8 [a0 + 0x6]\n  2918: a1 = u8 [a0 + 0x7]\n  2921: a3 = a3 << 0x8\n  2924: a3 = a3 | a4\n  2927: a5 = a5 << 0x10\n  2930: a1 = a1 << 0x18\n  2933: a1 = a1 | a5\n  2936: a1 = a1 | a3\n  2939: a1 = a1 << 0x20\n  2942: t1 = a1 | a2\n  2945: a1 = u8 [a0 + 0x19]\n  2948: a3 = u8 [a0 + 0x18]\n  2951: a4 = u8 [a0 + 0x1a]\n  2954: a5 = u8 [a0 + 0x1b]\n  2957: a1 = a1 << 0x8\n  2960: a1 = a1 | a3\n  2963: a4 = a4 << 0x10\n  2966: a5 = a5 << 0x18\n  2969: a4 = a4 | a5\n  2972: a1 = a1 | a4\n  2975: a3 = u8 [a0 + 0x1d]\n  2978: a4 = u8 [a0 + 0x1c]\n  2981: a5 = u8 [a0 + 0x1e]\n  2984: a2 = u8 [a0 + 0x1f]\n  2987: a3 = a3 << 0x8\n  2990: a3 = a3 | a4\n  2993: a5 = a5 << 0x10\n  2996: a2 = a2 << 0x18\n  2999: a2 = a2 | a5\n  3002: a2 = a2 | a3\n  3005: a2 = a2 << 0x20\n  3008: a3 = a2 | a1\n  3011: a1 = u8 [a0 + 0x9]\n  3014: a2 = u8 [a0 + 0x8]\n  3017: a4 = u8 [a0 + 0xa]\n  3020: a5 = u8 [a0 + 0xb]\n  3023: a1 = a1 << 0x8\n  3026: a1 = a1 | a2\n  3029: a4 = a4 << 0x10\n  3032: a5 = a5 << 0x18\n  3035: a4 = a4 | a5\n  3038: a1 = a1 | a4\n  3041: a2 = u8 [a0 + 0xd]\n  3044: a4 = u8 [a0 + 0xc]\n  3047: a5 = u8 [a0 + 0xe]\n  3050: a0 = u8 [a0 + 0xf]\n  3053: a2 = a2 << 0x8\n  3056: a2 = a2 | a4\n  3059: a5 = a5 << 0x10\n  3062: a0 = a0 << 0x18\n  3065: a0 = a0 | a5\n  3068: a0 = a0 | a2\n  3071: a0 = a0 << 0x20\n  3074: a0 = a0 | a1\n  3077: a1 = reverse a0\n  3079: a0 = reverse a3\n  3081: a2 = reverse t1\n  3083: a3 = reverse t0\n  3085: a2 = a2 | a3\n  3088: a3 = a0 | a1\n  3091: a3 = a3 | a2\n  3094: a3 = a3 >> 0x20\n  3097: a1 = a1 | a2\n  3100: a1 = a1 << 0x20\n  3103: a1 = a1 | a3\n  3106: jump @69 if a1 == 0\n      : @66 (gas: 1)\n  3109: trap\n      : @67 (gas: 3)\n  3110: a0 = 0\n  3112: a1 = 0\n  3114: ra = 54, jump @0\n      : @68 [@dyn 27] (gas: 7)\n  3119: i32 a1 = a0 + 0\n  3121: a0 = 0x1\n  3124: a2 = 0\n  3126: ecalli 4 // 'seal_return'\n  3128: i32 a0 = a0 + 0\n  3130: ra = 0x38\n  3133: jump @0\n      : @69 (gas: 2)\n  3136: i32 a0 = a0 + 0\n  3138: ra = 56, jump @0\n      : @70 [@dyn 28] (gas: 6)\n  3143: i32 a1 = a0 + 0\n  3145: a0 = 0\n  3147: a2 = 0\n  3149: ra = 0x3a\n  3152: ecalli 4 // 'seal_return'\n  3154: fallthrough\n      : @71 [@dyn 29] (gas: 5)\n  3155: sp = sp + 0xfffffffffffffff8\n  3158: u64 [sp] = ra\n  3160: a0 = 0\n  3162: a1 = 0\n  3164: ra = 60, jump @0\n      : @72 [@dyn 30] (gas: 6)\n  3169: i32 a1 = a0 + 0\n  3171: a0 = 0x1\n  3174: a2 = 0\n  3176: ra = 0x3e\n  3179: ecalli 4 // 'seal_return'\n  3181: fallthrough\n      : @73 [@dyn 31] (gas: 9)\n  3182: a2 = u64 [a1 + 0x18]\n  3185: a3 = u64 [a1 + 0x10]\n  3188: a4 = u64 [a1 + 0x8]\n  3191: a1 = u64 [a1]\n  3193: u64 [a0 + 0x18] = a2\n  3196: u64 [a0 + 0x10] = a3\n  3199: u64 [a0 + 0x8] = a4\n  3202: u64 [a0] = a1\n  3204: ret\n      : @74 (gas: 19)\n  3206: s1 = u64 [sp + 0xa0]\n  3210: a0 = u64 [sp + 0xb8]\n  3214: a1 = u64 [sp + 0xa8]\n  3218: a2 = u64 [sp + 0xb0]\n  3222: s1 = s1 + 0x1\n  3225: a3 = s1 <u 0x1\n  3228: a3 = a3 + a1\n  3231: a1 = s1 | a3\n  3234: a1 = a1 <u 0x1\n  3237: a4 = a2 + a1\n  3240: a1 = a4 <u a2\n  3243: a0 = a0 + a1\n  3246: u64 [sp + 0x18] = a3\n  3249: u64 [sp + 0x8] = a0\n  3252: a0 = a0 | a3\n  3255: u64 [sp + 0x10] = a4\n  3258: a1 = s1 | a4\n  3261: a0 = a0 | a1\n  3264: jump @76 if a0 == 0\n      : @75 (gas: 38)\n  3268: u64 [sp + 152] = 0\n  3272: u64 [sp + 144] = 0\n  3276: u64 [sp + 136] = 0\n  3280: u64 [sp + 128] = 0\n  3284: u64 [sp + 184] = 0\n  3288: u64 [sp + 176] = 0\n  3292: u64 [sp + 168] = 0\n  3296: u64 [sp + 160] = 0\n  3300: u32 [sp + 96] = 0x20\n  3304: i32 a1 = sp + 0x80\n  3308: i32 a3 = sp + 0xa0\n  3312: i32 a4 = sp + 0x60\n  3315: a2 = 0xffffffffffffffff\n  3318: a0 = 0\n  3320: ecalli 3 // 'get_storage'\n  3322: u64 [sp + 152] = 0\n  3326: u64 [sp + 144] = 0\n  3330: u64 [sp + 136] = 0\n  3334: u64 [sp + 128] = 0\n  3338: a0 = u64 [sp + 0x8]\n  3341: u64 [sp + 0xb8] = a0\n  3345: a0 = u64 [sp + 0x10]\n  3348: u64 [sp + 0xb0] = a0\n  3352: a0 = u64 [sp + 0x18]\n  3355: u64 [sp + 0xa8] = a0\n  3359: u64 [sp + 0xa0] = s1\n  3363: i32 a1 = sp + 0x80\n  3367: i32 a3 = sp + 0xa0\n  3371: a2 = 0xffffffffffffffff\n  3374: a4 = 0x20\n  3377: a0 = 0\n  3379: ecalli 6 // 'set_storage'\n  3381: sp = s0 + 0xffffffffffffff20\n  3385: ra = u64 [sp + 0xd8]\n  3389: s0 = u64 [sp + 0xd0]\n  3393: s1 = u64 [sp + 0xc8]\n  3397: sp = sp + 0xe0\n  3401: ret\n      : @76 (gas: 8)\n  3403: u64 [sp + 80] = 0\n  3406: u64 [sp + 72] = 0\n  3409: u64 [sp + 64] = 0\n  3412: a0 = 0x4e487b7100000000\n  3422: a1 = sp + 0x40\n  3425: u64 [sp + 0x58] = a0\n  3428: a0 = 0\n  3430: ra = 64, jump @8\n      : @77 [@dyn 32] (gas: 7)\n  3435: u64 [sp + 56] = 0\n  3438: u64 [sp + 48] = 0\n  3441: u64 [sp + 32] = 0x11\n  3445: a0 = 0x4\n  3448: a1 = sp + 0x20\n  3451: u64 [sp + 40] = 0\n  3454: ra = 66, jump @8\n      : @78 [@dyn 33] (gas: 3)\n  3459: a1 = 0x24\n  3462: a0 = 0\n  3464: ra = 68, jump @0\n      : @79 [@dyn 34] (gas: 7)\n  3469: i32 a1 = a0 + 0\n  3471: a0 = 0x1\n  3474: a2 = 0x24\n  3477: ecalli 4 // 'seal_return'\n  3479: a0 = 0\n  3481: ra = 0x46\n  3484: jump @10\n      : @80 [export #0: 'call'] (gas: 2)\n  3487: a0 = 0\n  3489: ra = 70, jump @10\n      : @81 [@dyn 35] [export #1: 'deploy'] (gas: 2)\n  3494: a0 = 0x1\n  3497: ra = 72, jump @10\n      : @82 [@dyn 36] (gas: 9)\n  3502: sp = sp + 0xffffffffffffffc0\n  3505: u64 [sp + 0x38] = ra\n  3508: u64 [sp + 0x30] = s0\n  3511: u64 [sp + 0x28] = s1\n  3514: s0 = sp + 0x40\n  3517: sp = sp & 0xfffffffffffffff0\n  3520: s1 = a0\n  3522: a0 = sp\n  3524: ra = 74, jump @38\n      : @83 [@dyn 37] (gas: 14)\n  3529: a0 = u64 [sp + 0x10]\n  3532: a1 = u64 [sp + 0x18]\n  3535: a2 = u64 [sp]\n  3537: a3 = u64 [sp + 0x8]\n  3540: u64 [s1 + 0x10] = a0\n  3543: u64 [s1 + 0x18] = a1\n  3546: u64 [s1] = a2\n  3548: u64 [s1 + 0x8] = a3\n  3551: sp = s0 + 0xffffffffffffffc0\n  3554: ra = u64 [sp + 0x38]\n  3557: s0 = u64 [sp + 0x30]\n  3560: s1 = u64 [sp + 0x28]\n  3563: sp = sp + 0x40\n  3566: ret\n",
						"bytecode": {
							"object": "50564d0000bb10000000000000010700c11000c0004004808f08000000000e0000001c0000002a0000003500000040000000520000005d00000063616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a656765745f73746f726167657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e736665727265640511028d9f0463616c6c8da6066465706c6f79068ffc25028df065004d0152016f010302340349036c037803920349044e047c04810496042d065e077407440851080a093b0a530a5f0af30afe0a2f0c470c530c610c6e0c6b0d830d8d0da60dae0dc90d8b791052093b3309010001ae9833c8780883881f8488e0553801000128390a000002ae8a123d080000023308100002c8870732003308100002c88707320000009511d87b10207b15187b161082897b19088289087b1982851082861883773308205010029f6f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a02013d07040002510507501004095010062b029511c07b10387b15307b16289515408411e033074033082050100896fe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a0701821710821818821908821ad49808d4a707d487075207370133074033082050100a02fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100cd1fc837833070133090a040183666467330850100ebcfc8377330833090a01390808000251080d330710000383770a05016467330850101099fc8378330733093300120a04019511c07b10387b15309515408411e033074033082050101473fc46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617034617024617014607390804000246170646170546170453180451831733080a010181171c51478ae09dd076514745f2a43f4152477710245535330016951140ff7b10b8007b15b0007b16a8009515c0008411e04911384911304911284911208317200a07280d045010180a0833001a951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a0728410150101ce3059511f07b10087b15647533074033082050101e6ffb7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b5782100882159511103200821730821838821928821a20d49808d4a707d487075207860139070400025417037d014911584911504911484911404911784911704911684911604821800020831840831a60831b80003309ff33070a038217787b178217707b17088217687b17108217607b1718330740330820501020d8f97c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a8085108170033073308501022a7f8837833070133090a04018376330820646750102491f882186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878013308206467501026c1f7837833092033073300280a04013200821730821838821928821a20d49808d4a707d487075207ca013907040002541723c101831780003308040a01821780007b1718821788007b1710821790007b1708821698004911784911704911684911604921980049219000492188004921800048114020831860831a8000831b403309ff33070a034911784911704911684911607b1698008217087b1790008217107b1788008217187b178000831860831a80003309ff330b2033070a0633074033082050102afbf67c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081e003307330850102ccaf5837833070133090a04837733002e28b7f5837750102eb2f58378330733093300300a04019511c07b10387b15309515408411e0491118491110491108490183170a0701821710821818821908821ad49808d4a707d487075207940139070400025417038b01330032951120ff7b10d8007b15d0007b16c8009515e0008411e0492198004921900049218800492180004921b8004921b0004921a8004921a0004811602083188000831aa000831b603309ff33070a0328960133074033082050103407f57c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081e0033073308501036d6f3837833070133090a04837733003828c3f38377501038bef383783307330933003a0a04019511f87b103307330850103ca4f38378330701330933003e0a0401828918828a10828b0882887b79187b7a107b7b087b7832008216a0008217b8008218a8008219b000956601886a01c88a0ad4a608888801c8890bd89b08c887077b1a187b1708d4a7077b1b10d4b608d4870751078b00492198004921900049218800492180004921b8004921b0004921a8004921a0004811602083188000831aa000831b603309ff33070a03492198004921900049218800492180008217087b17b8008217107b17b0008217187b17a8007b16a00083188000831aa0003309ff330b2033070a06955120ff8210d8008215d0008216c8009511e0003200491150491148491140140700000000717b484e9518407b17583307501040daf249113849113049112011330704951820491128501042c2f2330824330750104478f283783307013309240a0433073300462897f3330750104692f33307015010488af39511c07b10387b15307b16289515408411f06476641750104abdf68217108218188219821a087b67107b68187b697b6a089551c0821038821530821628951140320049489220248414d249525252a22a2529499224499224499224499224499224499224499224494a4a43222449928490244992244992244992244929a9494a124948922449922449922425499224499224499224499224499224499224499224499254254992ac506a15aa4342ad50a549922484244992244992244992248524514d201048444424495242222222499212924a424a92244992244992244992244992244992244992244992244992244992244992a42a4929254992082149922424914a49922421499224499224499294244992244992244992244992244992244992244992244952952449b242a9a55029a524499224499224499224499224499224494992244992a4504a4b92241142a44824124912111189a4922412894422a924244992244992244992922449922449922449922449922449922449922449922449aa92244956285552a8d22449926a929244088988884444444444445249429224499224499224294992244992244992244992244992244992244992244992a42a499264855225852a4d154a699292544444922449922411111111111149454424128988482a22224a12405248224948a1a4924242922415929294244900"
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"increment()": "d09de08a",
							"setValue(uint256)": "55241077",
							"value()": "3fa4f245"
						}
					},
					"irOptimized": "/// @use-src 0:\"homework3/LogicContract.sol\"\nobject \"LogicContract_22\" {\n    code {\n        {\n            /// @src 0:60:271  \"contract LogicContract {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"LogicContract_22_deployed\"), datasize(\"LogicContract_22_deployed\"))\n            return(_1, datasize(\"LogicContract_22_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"homework3/LogicContract.sol\"\n    object \"LogicContract_22_deployed\" {\n        code {\n            {\n                /// @src 0:60:271  \"contract LogicContract {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x3fa4f245 { external_fun_value() }\n                    case 0x55241077 { external_fun_setValue() }\n                    case 0xd09de08a { external_fun_increment() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 3 @src 0:92:109  \"uint public value\"\n            function getter_fun_value() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:60:271  \"contract LogicContract {...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_value()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_value()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_setValue()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_setValue(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_increment()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                fun_increment()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            /// @ast-id 21 @src 0:191:268  \"function setValue(uint _newValue) public {...\"\n            function fun_setValue(var_newValue)\n            {\n                /// @src 0:251:260  \"_newValue\"\n                let _1 := var_newValue\n                let expr := _1\n                /// @src 0:243:260  \"value = _newValue\"\n                update_storage_value_offset_uint256_to_uint256(0x00, expr)\n            }\n            /// @src 0:60:271  \"contract LogicContract {...\"\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 11 @src 0:122:179  \"function increment() public {...\"\n            function fun_increment()\n            {\n                /// @src 0:170:171  \"1\"\n                let expr := 0x01\n                /// @src 0:161:171  \"value += 1\"\n                let _1 := convert_rational_by_to_uint256(expr)\n                let _2 := read_from_storage_split_offset_uint256(0x00)\n                let expr_1 := checked_add_uint256(_2, _1)\n                update_storage_value_offset_uint256_to_uint256(0x00, expr_1)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212202928bc57a1c61708c273186f514044a4d8d91ef32cc80fdb401b0993a76bd83164736f6c634300081c0033\"\n    }\n}\n",
					"hash": "a1091a9d0b3721a79ccfdba43a6d0e496ce447d68077c70816a572605004225a",
					"factoryDependencies": {}
				}
			},
			"homework3/ProxyContract.sol": {
				"ProxyContract": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_logicContract",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"stateMutability": "payable",
							"type": "fallback"
						},
						{
							"inputs": [],
							"name": "increment",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "logicContract",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_logicContract",
									"type": "address"
								}
							],
							"name": "setLogicContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_newValue",
									"type": "uint256"
								}
							],
							"name": "setValue",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "value",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logicContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logicContract\",\"type\":\"address\"}],\"name\":\"setLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"homework3/ProxyContract.sol\":\"ProxyContract\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"homework3/ProxyContract.sol\":{\"keccak256\":\"0x61cdf475e31f667907ce3535dab2639d39ba538eed70c0592ad2295b838c9e60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63237ff84a58612c96245fde478844e2053bec4c3630fc2ddf112c69ef2bb5dc\",\"dweb:/ipfs/QmemoUiSBJuViSQhRRydmLDnwBv1BsiAYHfPuqrhVK7Av4\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 26,
								"contract": "homework3/ProxyContract.sol:ProxyContract",
								"label": "value",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 28,
								"contract": "homework3/ProxyContract.sol:ProxyContract",
								"label": "logicContract",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 4025\n// Code size = 12109 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 2 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @29\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffff20\n   342: u64 [sp + 0xd8] = ra\n   346: u64 [sp + 0xd0] = s0\n   350: u64 [sp + 0xc8] = s1\n   354: s0 = sp + 0xe0\n   358: sp = sp & 0xffffffffffffffe0\n   361: a0 = 0x40\n   364: a1 = 0x20\n   367: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   372: u8 [a0 + 31] = 0x80\n   377: u8 [a0 + 30] = 0\n   380: u8 [a0 + 29] = 0\n   383: u8 [a0 + 28] = 0\n   386: u8 [a0 + 27] = 0\n   389: u8 [a0 + 26] = 0\n   392: u8 [a0 + 25] = 0\n   395: u8 [a0 + 24] = 0\n   398: u8 [a0 + 23] = 0\n   401: u8 [a0 + 22] = 0\n   404: u8 [a0 + 21] = 0\n   407: u8 [a0 + 20] = 0\n   410: u8 [a0 + 19] = 0\n   413: u8 [a0 + 18] = 0\n   416: u8 [a0 + 17] = 0\n   419: u8 [a0 + 16] = 0\n   422: u8 [a0 + 15] = 0\n   425: u8 [a0 + 14] = 0\n   428: u8 [a0 + 13] = 0\n   431: u8 [a0 + 12] = 0\n   434: u8 [a0 + 11] = 0\n   437: u8 [a0 + 10] = 0\n   440: u8 [a0 + 9] = 0\n   443: u8 [a0 + 8] = 0\n   446: u8 [a0 + 7] = 0\n   449: u8 [a0 + 6] = 0\n   452: u8 [a0 + 5] = 0\n   455: u8 [a0 + 4] = 0\n   458: u8 [a0 + 3] = 0\n   461: u8 [a0 + 2] = 0\n   464: u8 [a0 + 1] = 0\n   467: u8 [a0 + 0] = 0\n   469: u64 [sp + 88] = 0\n   472: u64 [sp + 64] = 0\n   475: u64 [sp + 72] = 0\n   478: u64 [sp + 80] = 0\n   481: i32 a0 = sp + 0x40\n   484: ecalli 11 // 'value_transferred'\n   486: fallthrough\n      : @16 (gas: 8)\n   487: a0 = u64 [sp + 0x50]\n   490: a1 = u64 [sp + 0x58]\n   493: a2 = u64 [sp + 0x48]\n   496: a3 = u64 [sp + 0x40]\n   499: a1 = a1 | a2\n   502: a0 = a0 | a3\n   505: a0 = a0 | a1\n   508: jump @21 if a0 != 0\n      : @17 (gas: 20)\n   512: a0 = sp + 0x20\n   515: ra = 0xa\n   518: sp = sp + 0xffffffffffffff90\n   521: u64 [sp + 0x68] = ra\n   524: u64 [sp + 0x60] = s0\n   527: u64 [sp + 0x58] = s1\n   530: s0 = sp + 0x70\n   533: sp = sp & 0xfffffffffffffff0\n   536: s1 = i32 [0x20004]\n   541: u64 [sp + 0x8] = a0\n   544: a0 = s1 << 0x20\n   547: a0 = a0 >> 0x20\n   550: u64 [sp + 40] = 0\n   553: u64 [sp + 32] = 0\n   556: u64 [sp + 0x10] = a0\n   559: a0 = sp + 0x30\n   562: a1 = sp + 0x10\n   565: u64 [sp + 24] = 0\n   568: ra = 0x36\n   571: jump @50\n      : @18 [@dyn 5] (gas: 43)\n   574: a0 = u64 [sp + 0x20]\n   577: u64 [sp + 0x18] = a0\n   580: a0 = u64 [sp + 0x28]\n   583: u64 [sp + 0x10] = a0\n   586: s1 = u32 [sp + 0x30]\n   589: u64 [sp + 152] = 0\n   593: u64 [sp + 144] = 0\n   597: u64 [sp + 136] = 0\n   601: u64 [sp + 128] = 0x1\n   606: u64 [sp + 184] = 0\n   610: u64 [sp + 176] = 0\n   614: u64 [sp + 168] = 0\n   618: u64 [sp + 160] = 0\n   622: u32 [sp + 96] = 0x20\n   626: i32 a1 = sp + 0x80\n   630: i32 a3 = sp + 0xa0\n   634: i32 a4 = sp + 0x60\n   637: a2 = 0xffffffffffffffff\n   640: a0 = 0\n   642: ecalli 4 // 'get_storage'\n   644: a0 = u32 [sp + 0xb4]\n   648: a0 = a0 << 0x20\n   651: a1 = u64 [sp + 0xb8]\n   655: a0 = a0 | s1\n   658: u64 [sp + 152] = 0\n   662: u64 [sp + 144] = 0\n   666: u64 [sp + 136] = 0\n   670: u64 [sp + 128] = 0x1\n   675: u64 [sp + 0xb8] = a1\n   679: u64 [sp + 0xb0] = a0\n   683: a0 = u64 [sp + 0x10]\n   686: u64 [sp + 0xa8] = a0\n   690: a0 = u64 [sp + 0x18]\n   693: u64 [sp + 0xa0] = a0\n   697: i32 a1 = sp + 0x80\n   701: i32 a3 = sp + 0xa0\n   705: a2 = 0xffffffffffffffff\n   708: a4 = 0x20\n   711: a0 = 0\n   713: ecalli 10 // 'set_storage'\n   715: a0 = 0x40\n   718: a1 = 0x20\n   721: ra = 12, jump @0\n      : @19 [@dyn 6] (gas: 100)\n   726: a1 = u8 [a0 + 0x11]\n   729: a2 = u8 [a0 + 0x10]\n   732: a3 = u8 [a0 + 0x12]\n   735: a4 = u8 [a0 + 0x13]\n   738: a1 = a1 << 0x8\n   741: a1 = a1 | a2\n   744: a3 = a3 << 0x10\n   747: a4 = a4 << 0x18\n   750: a3 = a3 | a4\n   753: a1 = a1 | a3\n   756: a2 = u8 [a0 + 0x15]\n   759: a3 = u8 [a0 + 0x14]\n   762: a4 = u8 [a0 + 0x16]\n   765: a5 = u8 [a0 + 0x17]\n   768: a2 = a2 << 0x8\n   771: a2 = a2 | a3\n   774: a4 = a4 << 0x10\n   777: a5 = a5 << 0x18\n   780: a4 = a4 | a5\n   783: a2 = a2 | a4\n   786: a2 = a2 << 0x20\n   789: t0 = a2 | a1\n   792: a2 = u8 [a0 + 0x1]\n   795: a3 = u8 [a0]\n   797: a4 = u8 [a0 + 0x2]\n   800: a5 = u8 [a0 + 0x3]\n   803: a2 = a2 << 0x8\n   806: a2 = a2 | a3\n   809: a4 = a4 << 0x10\n   812: a5 = a5 << 0x18\n   815: a4 = a4 | a5\n   818: a2 = a2 | a4\n   821: a3 = u8 [a0 + 0x5]\n   824: a4 = u8 [a0 + 0x4]\n   827: a5 = u8 [a0 + 0x6]\n   830: s1 = u8 [a0 + 0x7]\n   833: a3 = a3 << 0x8\n   836: a3 = a3 | a4\n   839: a5 = a5 << 0x10\n   842: s1 = s1 << 0x18\n   845: a5 = a5 | s1\n   848: a3 = a3 | a5\n   851: a3 = a3 << 0x20\n   854: a2 = a2 | a3\n   857: a3 = u8 [a0 + 0x19]\n   860: a4 = u8 [a0 + 0x18]\n   863: a5 = u8 [a0 + 0x1a]\n   866: s1 = u8 [a0 + 0x1b]\n   869: a3 = a3 << 0x8\n   872: a3 = a3 | a4\n   875: a5 = a5 << 0x10\n   878: s1 = s1 << 0x18\n   881: a5 = a5 | s1\n   884: a3 = a3 | a5\n   887: a4 = u8 [a0 + 0x1d]\n   890: a5 = u8 [a0 + 0x1c]\n   893: s1 = u8 [a0 + 0x1e]\n   896: a1 = u8 [a0 + 0x1f]\n   899: a4 = a4 << 0x8\n   902: a4 = a4 | a5\n   905: s1 = s1 << 0x10\n   908: a1 = a1 << 0x18\n   911: a1 = a1 | s1\n   914: a1 = a1 | a4\n   917: a1 = a1 << 0x20\n   920: a3 = a3 | a1\n   923: a1 = u8 [a0 + 0x9]\n   926: a4 = u8 [a0 + 0x8]\n   929: a5 = u8 [a0 + 0xa]\n   932: s1 = u8 [a0 + 0xb]\n   935: a1 = a1 << 0x8\n   938: a1 = a1 | a4\n   941: a5 = a5 << 0x10\n   944: s1 = s1 << 0x18\n   947: a5 = a5 | s1\n   950: a1 = a1 | a5\n   953: a4 = u8 [a0 + 0xd]\n   956: a5 = u8 [a0 + 0xc]\n   959: s1 = u8 [a0 + 0xe]\n   962: a0 = u8 [a0 + 0xf]\n   965: a4 = a4 << 0x8\n   968: a4 = a4 | a5\n   971: s1 = s1 << 0x10\n   974: a0 = a0 << 0x18\n   977: a0 = a0 | s1\n   980: a0 = a0 | a4\n   983: a0 = a0 << 0x20\n   986: a0 = a0 | a1\n   989: a0 = reverse a0\n   991: s1 = reverse a3\n   993: a1 = reverse a2\n   995: a2 = reverse t0\n   997: a1 = a1 | a2\n  1000: a2 = s1 | a0\n  1003: a2 = a2 | a1\n  1006: a2 = a2 >> 0x20\n  1009: a0 = a0 | a1\n  1012: a0 = a0 << 0x20\n  1015: a0 = a0 | a2\n  1018: jump @23 if a0 == 0\n      : @20 (gas: 1)\n  1021: trap\n      : @21 (gas: 3)\n  1022: a0 = 0\n  1024: a1 = 0\n  1026: ra = 14, jump @0\n      : @22 [@dyn 7] (gas: 5)\n  1031: i32 a1 = a0 + 0\n  1033: a0 = 0x1\n  1036: a2 = 0\n  1038: ecalli 8 // 'seal_return'\n  1040: fallthrough\n      : @23 (gas: 4)\n  1041: i32 s1 = s1 + 0\n  1043: a0 = s1\n  1045: a1 = 0\n  1047: ra = 16, jump @0\n      : @24 [@dyn 8] (gas: 5)\n  1052: i32 a0 = a0 + 0\n  1054: a1 = 0\n  1056: a2 = 0\n  1058: ecalli 0 // 'call_data_copy'\n  1059: fallthrough\n      : @25 (gas: 2)\n  1060: a1 = i32 [0x20008]\n  1065: jump @27 if a1 == 0\n      : @26 (gas: 4)\n  1068: a0 = 0x30010\n  1073: i32 a0 = a0 + 0\n  1075: ecalli 9 // 'set_immutable_data'\n  1077: fallthrough\n      : @27 (gas: 3)\n  1078: a0 = s1\n  1080: a1 = 0\n  1082: ra = 18, jump @0\n      : @28 [@dyn 9] (gas: 6)\n  1087: i32 a1 = a0 + 0\n  1089: a0 = 0\n  1091: a2 = 0\n  1093: ra = 0x14\n  1096: ecalli 8 // 'seal_return'\n  1098: fallthrough\n      : @29 [@dyn 10] (gas: 9)\n  1099: sp = sp + 0xffffffffffffffc0\n  1102: u64 [sp + 0x38] = ra\n  1105: u64 [sp + 0x30] = s0\n  1108: u64 [sp + 0x28] = s1\n  1111: s0 = sp + 0x40\n  1114: sp = sp & 0xffffffffffffffe0\n  1117: a0 = 0x40\n  1120: a1 = 0x20\n  1123: ra = 22, jump @0\n      : @30 [@dyn 11] (gas: 35)\n  1128: u8 [a0 + 31] = 0x80\n  1133: u8 [a0 + 30] = 0\n  1136: u8 [a0 + 29] = 0\n  1139: u8 [a0 + 28] = 0\n  1142: u8 [a0 + 27] = 0\n  1145: u8 [a0 + 26] = 0\n  1148: u8 [a0 + 25] = 0\n  1151: u8 [a0 + 24] = 0\n  1154: u8 [a0 + 23] = 0\n  1157: u8 [a0 + 22] = 0\n  1160: u8 [a0 + 21] = 0\n  1163: u8 [a0 + 20] = 0\n  1166: u8 [a0 + 19] = 0\n  1169: u8 [a0 + 18] = 0\n  1172: u8 [a0 + 17] = 0\n  1175: u8 [a0 + 16] = 0\n  1178: u8 [a0 + 15] = 0\n  1181: u8 [a0 + 14] = 0\n  1184: u8 [a0 + 13] = 0\n  1187: u8 [a0 + 12] = 0\n  1190: u8 [a0 + 11] = 0\n  1193: u8 [a0 + 10] = 0\n  1196: u8 [a0 + 9] = 0\n  1199: u8 [a0 + 8] = 0\n  1202: u8 [a0 + 7] = 0\n  1205: u8 [a0 + 3] = 0\n  1208: s1 = 0x20004\n  1213: u8 [a0 + 2] = 0\n  1216: u8 [a0 + 1] = 0\n  1219: u8 [a0 + 0] = 0\n  1221: a1 = i32 [0x20004]\n  1226: u8 [a0 + 6] = 0\n  1229: u8 [a0 + 5] = 0\n  1232: u8 [a0 + 4] = 0\n  1235: jump @44 if a1 <u 4\n      : @31 (gas: 4)\n  1240: i32 a0 = sp + 0\n  1242: a1 = 0\n  1244: ecalli 1 // 'call_data_load'\n  1246: fallthrough\n      : @32 (gas: 2)\n  1247: a0 = i32 [sp + 0x1c]\n  1250: jump @37 if a0 <=s 1067774532\n      : @33 (gas: 1)\n  1257: jump @40 if a0 == 1067774533\n      : @34 (gas: 1)\n  1264: jump @41 if a0 == 1428426871\n      : @35 (gas: 1)\n  1271: jump @43 if a0 != 1520715535\n      : @36 (gas: 14)\n  1279: ra = 0x18\n  1282: sp = sp + 0xffffffffffffff40\n  1286: u64 [sp + 0xb8] = ra\n  1290: u64 [sp + 0xb0] = s0\n  1294: u64 [sp + 0xa8] = s1\n  1298: s0 = sp + 0xc0\n  1302: sp = sp & 0xffffffffffffffe0\n  1305: u64 [sp + 56] = 0\n  1308: u64 [sp + 48] = 0\n  1311: u64 [sp + 40] = 0\n  1314: u64 [sp + 32] = 0\n  1317: i32 a0 = sp + 0x20\n  1320: ecalli 11 // 'value_transferred'\n  1322: jump @109\n      : @37 [@dyn 12] (gas: 1)\n  1325: jump @42 if a0 == 3423508425\n      : @38 (gas: 1)\n  1332: jump @43 if a0 != 3500007562\n      : @39 (gas: 1)\n  1340: ra = 26, jump @132\n      : @40 [@dyn 13] (gas: 14)\n  1345: ra = 0x1c\n  1348: sp = sp + 0xffffffffffffff60\n  1352: u64 [sp + 0x98] = ra\n  1356: u64 [sp + 0x90] = s0\n  1360: u64 [sp + 0x88] = s1\n  1364: s0 = sp + 0xa0\n  1368: sp = sp & 0xffffffffffffffe0\n  1371: u64 [sp + 56] = 0\n  1374: u64 [sp + 48] = 0\n  1377: u64 [sp + 40] = 0\n  1380: u64 [sp + 32] = 0\n  1383: i32 a0 = sp + 0x20\n  1386: ecalli 11 // 'value_transferred'\n  1388: jump @71\n      : @41 [@dyn 14] (gas: 14)\n  1391: ra = 0x1e\n  1394: sp = sp + 0xffffffffffffff40\n  1398: u64 [sp + 0xb8] = ra\n  1402: u64 [sp + 0xb0] = s0\n  1406: u64 [sp + 0xa8] = s1\n  1410: s0 = sp + 0xc0\n  1414: sp = sp & 0xffffffffffffffe0\n  1417: u64 [sp + 120] = 0\n  1420: u64 [sp + 112] = 0\n  1423: u64 [sp + 104] = 0\n  1426: u64 [sp + 96] = 0\n  1429: i32 a0 = sp + 0x60\n  1432: ecalli 11 // 'value_transferred'\n  1434: jump @82\n      : @42 [@dyn 15] (gas: 14)\n  1437: ra = 0x20\n  1440: sp = sp + 0xffffffffffffff60\n  1444: u64 [sp + 0x98] = ra\n  1448: u64 [sp + 0x90] = s0\n  1452: u64 [sp + 0x88] = s1\n  1456: s0 = sp + 0xa0\n  1460: sp = sp & 0xffffffffffffffe0\n  1463: u64 [sp + 56] = 0\n  1466: u64 [sp + 48] = 0\n  1469: u64 [sp + 40] = 0\n  1472: u64 [sp + 32] = 0\n  1475: i32 a0 = sp + 0x20\n  1478: ecalli 11 // 'value_transferred'\n  1480: jump @122\n      : @43 [@dyn 16] (gas: 2)\n  1483: a1 = i32 [s1]\n  1485: fallthrough\n      : @44 (gas: 1)\n  1486: jump @46 if a1 == 0\n      : @45 (gas: 32)\n  1489: ra = 0x22\n  1492: sp = sp + 0xfffffffffffffee0\n  1496: u64 [sp + 0x118] = ra\n  1500: u64 [sp + 0x110] = s0\n  1504: u64 [sp + 0x108] = s1\n  1508: s0 = sp + 0x120\n  1512: sp = sp & 0xffffffffffffffe0\n  1515: u64 [sp + 216] = 0\n  1519: u64 [sp + 208] = 0\n  1523: u64 [sp + 200] = 0\n  1527: u64 [sp + 192] = 0x1\n  1532: u64 [sp + 248] = 0\n  1536: u64 [sp + 240] = 0\n  1540: u64 [sp + 232] = 0\n  1544: u64 [sp + 224] = 0\n  1548: u32 [sp + 256] = 0x20\n  1553: i32 a1 = sp + 0xc0\n  1557: i32 a3 = sp + 0xe0\n  1561: i32 a4 = sp + 0x100\n  1565: a2 = 0xffffffffffffffff\n  1568: a0 = 0\n  1570: ecalli 4 // 'get_storage'\n  1572: a0 = u64 [sp + 0xf0]\n  1576: u64 [sp + 0x30] = a0\n  1579: a0 = u64 [sp + 0xe8]\n  1583: u64 [sp + 0x28] = a0\n  1586: a0 = u64 [sp + 0xe0]\n  1590: u64 [sp + 0x38] = a0\n  1593: a0 = 0x40\n  1596: a1 = 0x20\n  1599: ra = 0xae\n  1603: jump @0\n      : @46 [@dyn 17] (gas: 2)\n  1606: a0 = 0\n  1608: ra = 36, jump @0\n      : @47 [@dyn 18] (gas: 6)\n  1613: i32 a1 = a0 + 0\n  1615: a0 = 0\n  1617: a2 = 0\n  1619: ra = 0x26\n  1622: ecalli 8 // 'seal_return'\n  1624: fallthrough\n      : @48 [@dyn 19] (gas: 7)\n  1625: sp = sp + 0xfffffffffffffff0\n  1628: u64 [sp + 0x8] = ra\n  1631: u64 [sp] = s0\n  1633: s0 = a0\n  1635: a0 = 0x40\n  1638: a1 = 0x20\n  1641: ra = 40, jump @0\n      : @49 [@dyn 20] (gas: 100)\n  1646: a1 = u8 [a0 + 0x1]\n  1649: a2 = u8 [a0]\n  1651: a3 = u8 [a0 + 0x2]\n  1654: a4 = u8 [a0 + 0x3]\n  1657: a1 = a1 << 0x8\n  1660: a1 = a1 | a2\n  1663: a3 = a3 << 0x10\n  1666: a4 = a4 << 0x18\n  1669: a3 = a3 | a4\n  1672: a1 = a1 | a3\n  1675: a2 = u8 [a0 + 0x5]\n  1678: a3 = u8 [a0 + 0x4]\n  1681: a4 = u8 [a0 + 0x6]\n  1684: a5 = u8 [a0 + 0x7]\n  1687: a2 = a2 << 0x8\n  1690: a2 = a2 | a3\n  1693: a4 = a4 << 0x10\n  1696: a5 = a5 << 0x18\n  1699: a4 = a4 | a5\n  1702: a2 = a2 | a4\n  1705: a2 = a2 << 0x20\n  1708: t0 = a2 | a1\n  1711: a2 = u8 [a0 + 0x9]\n  1714: a3 = u8 [a0 + 0x8]\n  1717: a4 = u8 [a0 + 0xa]\n  1720: a5 = u8 [a0 + 0xb]\n  1723: a2 = a2 << 0x8\n  1726: a2 = a2 | a3\n  1729: a4 = a4 << 0x10\n  1732: a5 = a5 << 0x18\n  1735: a4 = a4 | a5\n  1738: a2 = a2 | a4\n  1741: a3 = u8 [a0 + 0xd]\n  1744: a4 = u8 [a0 + 0xc]\n  1747: a5 = u8 [a0 + 0xe]\n  1750: a1 = u8 [a0 + 0xf]\n  1753: a3 = a3 << 0x8\n  1756: a3 = a3 | a4\n  1759: a5 = a5 << 0x10\n  1762: a1 = a1 << 0x18\n  1765: a1 = a1 | a5\n  1768: a1 = a1 | a3\n  1771: a1 = a1 << 0x20\n  1774: t1 = a1 | a2\n  1777: a1 = u8 [a0 + 0x11]\n  1780: a3 = u8 [a0 + 0x10]\n  1783: a4 = u8 [a0 + 0x12]\n  1786: a5 = u8 [a0 + 0x13]\n  1789: a1 = a1 << 0x8\n  1792: a1 = a1 | a3\n  1795: a4 = a4 << 0x10\n  1798: a5 = a5 << 0x18\n  1801: a4 = a4 | a5\n  1804: a1 = a1 | a4\n  1807: a3 = u8 [a0 + 0x15]\n  1810: a4 = u8 [a0 + 0x14]\n  1813: a5 = u8 [a0 + 0x16]\n  1816: a2 = u8 [a0 + 0x17]\n  1819: a3 = a3 << 0x8\n  1822: a3 = a3 | a4\n  1825: a5 = a5 << 0x10\n  1828: a2 = a2 << 0x18\n  1831: a2 = a2 | a5\n  1834: a2 = a2 | a3\n  1837: a2 = a2 << 0x20\n  1840: a3 = a2 | a1\n  1843: a1 = u8 [a0 + 0x19]\n  1846: a2 = u8 [a0 + 0x18]\n  1849: a4 = u8 [a0 + 0x1a]\n  1852: a5 = u8 [a0 + 0x1b]\n  1855: a1 = a1 << 0x8\n  1858: a1 = a1 | a2\n  1861: a4 = a4 << 0x10\n  1864: a5 = a5 << 0x18\n  1867: a4 = a4 | a5\n  1870: a1 = a1 | a4\n  1873: a2 = u8 [a0 + 0x1d]\n  1876: a4 = u8 [a0 + 0x1c]\n  1879: a5 = u8 [a0 + 0x1e]\n  1882: a0 = u8 [a0 + 0x1f]\n  1885: a2 = a2 << 0x8\n  1888: a2 = a2 | a4\n  1891: a5 = a5 << 0x10\n  1894: a0 = a0 << 0x18\n  1897: a0 = a0 | a5\n  1900: a0 = a0 | a2\n  1903: a0 = a0 << 0x20\n  1906: a0 = a0 | a1\n  1909: a0 = reverse a0\n  1911: a1 = reverse a3\n  1913: a2 = reverse t1\n  1915: a3 = reverse t0\n  1917: u64 [s0 + 0x18] = a3\n  1920: u64 [s0 + 0x10] = a2\n  1923: u64 [s0 + 0x8] = a1\n  1926: u64 [s0] = a0\n  1928: ra = u64 [sp + 0x8]\n  1931: s0 = u64 [sp]\n  1933: sp = sp + 0x10\n  1936: ret\n      : @50 (gas: 18)\n  1938: sp = sp + 0xffffffffffffff60\n  1942: u64 [sp + 0x98] = ra\n  1946: u64 [sp + 0x90] = s0\n  1950: u64 [sp + 0x88] = s1\n  1954: s0 = sp + 0xa0\n  1958: sp = sp & 0xfffffffffffffff0\n  1961: a2 = u64 [a1 + 0x18]\n  1964: u64 [sp + 0x30] = a2\n  1967: a2 = u64 [a1 + 0x10]\n  1970: u64 [sp + 0x28] = a2\n  1973: a2 = u64 [a1 + 0x8]\n  1976: u64 [sp + 0x20] = a2\n  1979: a1 = u64 [a1]\n  1981: u64 [sp + 0x18] = a1\n  1984: u64 [sp + 0x38] = a0\n  1987: a0 = 0x40\n  1990: a1 = 0x20\n  1993: ra = 42, jump @0\n      : @51 [@dyn 21] (gas: 130)\n  1998: a1 = u8 [a0 + 0x19]\n  2001: a2 = u8 [a0 + 0x18]\n  2004: a3 = u8 [a0 + 0x1a]\n  2007: a4 = u8 [a0 + 0x1b]\n  2010: a1 = a1 << 0x8\n  2013: a1 = a1 | a2\n  2016: a3 = a3 << 0x10\n  2019: a4 = a4 << 0x18\n  2022: a3 = a3 | a4\n  2025: a1 = a1 | a3\n  2028: a2 = u8 [a0 + 0x1d]\n  2031: a3 = u8 [a0 + 0x1c]\n  2034: a4 = u8 [a0 + 0x1e]\n  2037: a5 = u8 [a0 + 0x1f]\n  2040: a2 = a2 << 0x8\n  2043: a2 = a2 | a3\n  2046: a4 = a4 << 0x10\n  2049: a5 = a5 << 0x18\n  2052: a4 = a4 | a5\n  2055: a2 = a2 | a4\n  2058: a2 = a2 << 0x20\n  2061: t0 = a2 | a1\n  2064: a2 = u8 [a0 + 0x11]\n  2067: a3 = u8 [a0 + 0x10]\n  2070: a4 = u8 [a0 + 0x12]\n  2073: a5 = u8 [a0 + 0x13]\n  2076: a2 = a2 << 0x8\n  2079: a2 = a2 | a3\n  2082: a4 = a4 << 0x10\n  2085: a5 = a5 << 0x18\n  2088: a4 = a4 | a5\n  2091: a2 = a2 | a4\n  2094: a3 = u8 [a0 + 0x15]\n  2097: a4 = u8 [a0 + 0x14]\n  2100: a5 = u8 [a0 + 0x16]\n  2103: s1 = u8 [a0 + 0x17]\n  2106: a3 = a3 << 0x8\n  2109: a3 = a3 | a4\n  2112: a5 = a5 << 0x10\n  2115: s1 = s1 << 0x18\n  2118: a5 = a5 | s1\n  2121: a3 = a3 | a5\n  2124: a3 = a3 << 0x20\n  2127: a2 = a2 | a3\n  2130: a3 = u8 [a0 + 0x9]\n  2133: a4 = u8 [a0 + 0x8]\n  2136: a5 = u8 [a0 + 0xa]\n  2139: s1 = u8 [a0 + 0xb]\n  2142: a3 = a3 << 0x8\n  2145: a3 = a3 | a4\n  2148: a5 = a5 << 0x10\n  2151: s1 = s1 << 0x18\n  2154: a5 = a5 | s1\n  2157: a3 = a3 | a5\n  2160: a4 = u8 [a0 + 0xd]\n  2163: a5 = u8 [a0 + 0xc]\n  2166: s1 = u8 [a0 + 0xe]\n  2169: a1 = u8 [a0 + 0xf]\n  2172: a4 = a4 << 0x8\n  2175: a4 = a4 | a5\n  2178: s1 = s1 << 0x10\n  2181: a1 = a1 << 0x18\n  2184: a1 = a1 | s1\n  2187: a1 = a1 | a4\n  2190: a1 = a1 << 0x20\n  2193: a3 = a3 | a1\n  2196: a1 = u8 [a0 + 0x1]\n  2199: a4 = u8 [a0]\n  2201: a5 = u8 [a0 + 0x2]\n  2204: s1 = u8 [a0 + 0x3]\n  2207: a1 = a1 << 0x8\n  2210: a1 = a1 | a4\n  2213: a5 = a5 << 0x10\n  2216: s1 = s1 << 0x18\n  2219: a5 = a5 | s1\n  2222: a1 = a1 | a5\n  2225: a4 = u8 [a0 + 0x5]\n  2228: a5 = u8 [a0 + 0x4]\n  2231: s1 = u8 [a0 + 0x6]\n  2234: a0 = u8 [a0 + 0x7]\n  2237: a4 = a4 << 0x8\n  2240: a4 = a4 | a5\n  2243: s1 = s1 << 0x10\n  2246: a0 = a0 << 0x18\n  2249: a0 = a0 | s1\n  2252: a0 = a0 | a4\n  2255: a0 = a0 << 0x20\n  2258: a0 = a0 | a1\n  2261: t1 = reverse a0\n  2263: t2 = reverse a3\n  2265: s1 = reverse a2\n  2267: a5 = reverse t0\n  2269: a1 = u64 [sp + 0x18]\n  2272: a0 = a1 + 0x1f\n  2275: a1 = a0 <u a1\n  2278: a3 = u64 [sp + 0x20]\n  2281: a2 = a3 + a1\n  2284: a3 = a2 <u a3\n  2287: a3 = a1 if a1 == 0\n  2290: a1 = u64 [sp + 0x28]\n  2293: a3 = a3 + a1\n  2296: a1 = a3 <u a1\n  2299: a4 = u64 [sp + 0x30]\n  2302: a1 = a1 + a4\n  2305: a0 = a0 & 0xffffffffffffffe0\n  2308: a0 = a0 + a5\n  2311: u64 [sp + 0x28] = a5\n  2314: u64 [sp + 0x10] = a0\n  2317: a4 = a0 <u a5\n  2320: a2 = a2 + s1\n  2323: a5 = a2 + a4\n  2326: a2 = a5 ^ s1\n  2329: u64 [sp + 0x30] = s1\n  2332: a0 = a5 <u s1\n  2335: a0 = a4 if a2 == 0\n  2338: a3 = a3 + t2\n  2341: a4 = a3 + a0\n  2344: s1 = a4 <u a3\n  2347: a2 = a3 <u t2\n  2350: a1 = a1 + t1\n  2353: a1 = a1 + a2\n  2356: s1 = s1 + a1\n  2359: a1 = a4 >u 0\n  2361: a2 = s1 >u 0\n  2363: a2 = a1 if s1 == 0\n  2366: a1 = a4 | s1\n  2369: u64 [sp + 0x8] = a5\n  2372: a3 = a5 >u 0\n  2374: a3 = a2 if a1 != 0\n  2377: jump @55 if a3 != 0\n      : @52 (gas: 8)\n  2381: a1 = a4 <u t2\n  2384: a2 = s1 ^ t1\n  2387: a3 = s1 <u t1\n  2390: a3 = a1 if a2 == 0\n  2393: a1 = a4 ^ t2\n  2396: a1 = a1 | a2\n  2399: a0 = a3 if a1 != 0\n  2402: jump @55 if a0 != 0\n      : @53 (gas: 6)\n  2406: a0 = 0x40\n  2409: a1 = 0x20\n  2412: u64 [sp + 0x20] = t2\n  2415: u64 [sp + 0x18] = t1\n  2418: u64 [sp] = a4\n  2420: ra = 44, jump @0\n      : @54 [@dyn 22] (gas: 82)\n  2425: a1 = reverse s1\n  2427: a2 = u64 [sp]\n  2429: a2 = reverse a2\n  2431: a3 = u64 [sp + 0x8]\n  2434: a3 = reverse a3\n  2436: a4 = u64 [sp + 0x10]\n  2439: a4 = reverse a4\n  2441: u8 [a0 + 0x18] = a4\n  2444: a5 = a4 >> 0x38\n  2447: u8 [a0 + 0x1f] = a5\n  2450: a5 = a4 >> 0x30\n  2453: u8 [a0 + 0x1e] = a5\n  2456: a5 = a4 >> 0x28\n  2459: u8 [a0 + 0x1d] = a5\n  2462: a5 = a4 >> 0x20\n  2465: u8 [a0 + 0x1c] = a5\n  2468: a5 = a4 >> 0x18\n  2471: u8 [a0 + 0x1b] = a5\n  2474: a5 = a4 >> 0x10\n  2477: u8 [a0 + 0x1a] = a5\n  2480: a4 = a4 >> 0x8\n  2483: u8 [a0 + 0x19] = a4\n  2486: u8 [a0 + 0x10] = a3\n  2489: a4 = a3 >> 0x38\n  2492: u8 [a0 + 0x17] = a4\n  2495: a4 = a3 >> 0x30\n  2498: u8 [a0 + 0x16] = a4\n  2501: a4 = a3 >> 0x28\n  2504: u8 [a0 + 0x15] = a4\n  2507: a4 = a3 >> 0x20\n  2510: u8 [a0 + 0x14] = a4\n  2513: a4 = a3 >> 0x18\n  2516: u8 [a0 + 0x13] = a4\n  2519: a4 = a3 >> 0x10\n  2522: u8 [a0 + 0x12] = a4\n  2525: a3 = a3 >> 0x8\n  2528: u8 [a0 + 0x11] = a3\n  2531: u8 [a0 + 0x8] = a2\n  2534: a3 = a2 >> 0x38\n  2537: u8 [a0 + 0xf] = a3\n  2540: a3 = a2 >> 0x30\n  2543: u8 [a0 + 0xe] = a3\n  2546: a3 = a2 >> 0x28\n  2549: u8 [a0 + 0xd] = a3\n  2552: a3 = a2 >> 0x20\n  2555: u8 [a0 + 0xc] = a3\n  2558: a3 = a2 >> 0x18\n  2561: u8 [a0 + 0xb] = a3\n  2564: a3 = a2 >> 0x10\n  2567: u8 [a0 + 0xa] = a3\n  2570: a2 = a2 >> 0x8\n  2573: u8 [a0 + 0x9] = a2\n  2576: u8 [a0] = a1\n  2578: a2 = a1 >> 0x38\n  2581: u8 [a0 + 0x7] = a2\n  2584: a2 = a1 >> 0x30\n  2587: u8 [a0 + 0x6] = a2\n  2590: a2 = a1 >> 0x28\n  2593: u8 [a0 + 0x5] = a2\n  2596: a2 = a1 >> 0x20\n  2599: u8 [a0 + 0x4] = a2\n  2602: a2 = a1 >> 0x18\n  2605: u8 [a0 + 0x3] = a2\n  2608: a2 = a1 >> 0x10\n  2611: u8 [a0 + 0x2] = a2\n  2614: a1 = a1 >> 0x8\n  2617: u8 [a0 + 0x1] = a1\n  2620: a0 = u64 [sp + 0x38]\n  2623: a1 = u64 [sp + 0x28]\n  2626: u64 [a0] = a1\n  2628: a1 = u64 [sp + 0x18]\n  2631: u64 [a0 + 0x18] = a1\n  2634: a1 = u64 [sp + 0x30]\n  2637: u64 [a0 + 0x8] = a1\n  2640: a1 = u64 [sp + 0x20]\n  2643: u64 [a0 + 0x10] = a1\n  2646: sp = s0 + 0xffffffffffffff60\n  2650: ra = u64 [sp + 0x98]\n  2654: s0 = u64 [sp + 0x90]\n  2658: s1 = u64 [sp + 0x88]\n  2662: sp = sp + 0xa0\n  2666: ret\n      : @55 (gas: 8)\n  2668: u64 [sp + 112] = 0\n  2671: u64 [sp + 104] = 0\n  2674: u64 [sp + 96] = 0\n  2677: a0 = 0x4e487b7100000000\n  2687: a1 = sp + 0x60\n  2690: u64 [sp + 0x78] = a0\n  2693: a0 = 0\n  2695: ra = 46, jump @8\n      : @56 [@dyn 23] (gas: 7)\n  2700: u64 [sp + 88] = 0\n  2703: u64 [sp + 80] = 0\n  2706: u64 [sp + 64] = 0x41\n  2710: a0 = 0x4\n  2713: a1 = sp + 0x40\n  2716: u64 [sp + 72] = 0\n  2719: ra = 48, jump @8\n      : @57 [@dyn 24] (gas: 3)\n  2724: a1 = 0x24\n  2727: a0 = 0\n  2729: ra = 50, jump @0\n      : @58 [@dyn 25] (gas: 6)\n  2734: i32 a1 = a0 + 0\n  2736: a0 = 0x1\n  2739: a2 = 0x24\n  2742: ra = 0x34\n  2745: ecalli 8 // 'seal_return'\n  2747: fallthrough\n      : @59 [@dyn 26] (gas: 8)\n  2748: a2 = u32 [a1 + 0x10]\n  2751: a3 = u64 [a1 + 0x8]\n  2754: a1 = u64 [a1]\n  2756: u64 [a0 + 24] = 0\n  2759: u64 [a0 + 0x10] = a2\n  2762: u64 [a0 + 0x8] = a3\n  2765: u64 [a0] = a1\n  2767: ret\n      : @60 [@dyn 27] (gas: 12)\n  2769: a1 = u64 [sp + 0x48]\n  2772: a2 = u64 [sp + 0x40]\n  2775: a3 = u64 [sp + 0x38]\n  2778: a0 = u64 [sp + 0x30]\n  2781: a1 = a1 | a3\n  2784: a3 = a0 | a2\n  2787: a3 = a3 | a1\n  2790: a3 = a3 >> 0x20\n  2793: a1 = a1 | a2\n  2796: a1 = a1 << 0x20\n  2799: a1 = a1 | a3\n  2802: jump @67 if a1 != 0\n      : @61 (gas: 4)\n  2806: i32 a0 = a0 + 0\n  2808: u64 [sp] = a0\n  2810: a1 = s1\n  2812: ra = 56, jump @0\n      : @62 [@dyn 28] (gas: 5)\n  2817: i32 a0 = a0 + 0\n  2819: a1 = s1\n  2821: a2 = 0\n  2823: ecalli 0 // 'call_data_copy'\n  2824: fallthrough\n      : @63 (gas: 1)\n  2825: jump @68 if s1 <=u 31\n      : @64 (gas: 3)\n  2830: a1 = 0x20\n  2833: a0 = u64 [sp]\n  2835: ra = 58, jump @0\n      : @65 [@dyn 29] (gas: 54)\n  2840: a1 = u8 [a0 + 0x9]\n  2843: a2 = u8 [a0 + 0x8]\n  2846: a3 = u8 [a0 + 0xa]\n  2849: a4 = u8 [a0 + 0xb]\n  2852: a1 = a1 << 0x8\n  2855: a1 = a1 | a2\n  2858: a3 = a3 << 0x10\n  2861: a4 = a4 << 0x18\n  2864: a3 = a3 | a4\n  2867: a1 = a1 | a3\n  2870: a2 = u8 [a0 + 0xd]\n  2873: a3 = u8 [a0 + 0xc]\n  2876: a4 = u8 [a0 + 0xe]\n  2879: a5 = u8 [a0 + 0xf]\n  2882: a2 = a2 << 0x8\n  2885: a2 = a2 | a3\n  2888: a4 = a4 << 0x10\n  2891: a5 = a5 << 0x18\n  2894: a4 = a4 | a5\n  2897: a2 = a2 | a4\n  2900: a2 = a2 << 0x20\n  2903: a2 = a2 | a1\n  2906: a1 = u8 [a0 + 0x1]\n  2909: a3 = u8 [a0]\n  2911: a4 = u8 [a0 + 0x2]\n  2914: a5 = u8 [a0 + 0x3]\n  2917: a1 = a1 << 0x8\n  2920: a1 = a1 | a3\n  2923: a4 = a4 << 0x10\n  2926: a5 = a5 << 0x18\n  2929: a4 = a4 | a5\n  2932: a1 = a1 | a4\n  2935: a3 = u8 [a0 + 0x5]\n  2938: a4 = u8 [a0 + 0x4]\n  2941: a5 = u8 [a0 + 0x6]\n  2944: s1 = u8 [a0 + 0x7]\n  2947: a3 = a3 << 0x8\n  2950: a3 = a3 | a4\n  2953: a5 = a5 << 0x10\n  2956: s1 = s1 << 0x18\n  2959: a5 = a5 | s1\n  2962: a3 = a3 | a5\n  2965: a3 = a3 << 0x20\n  2968: a1 = a1 | a3\n  2971: t0 = reverse a1\n  2973: a2 = reverse a2\n  2975: a3 = 0x100000000\n  2985: a3 = a3 ^ a2\n  2988: a3 = a3 | t0\n  2991: a4 = a2 >> 0x20\n  2994: a4 = a4 <u 0x1\n  2997: a4 = 0 if t0 != 0\n  2999: a4 = 0 if a3 == 0\n  3001: jump @68 if a4 == 0\n      : @66 (gas: 57)\n  3005: a3 = u8 [a0 + 0x19]\n  3008: a4 = u8 [a0 + 0x18]\n  3011: a5 = u8 [a0 + 0x1a]\n  3014: s1 = u8 [a0 + 0x1b]\n  3017: a3 = a3 << 0x8\n  3020: a3 = a3 | a4\n  3023: a5 = a5 << 0x10\n  3026: s1 = s1 << 0x18\n  3029: a5 = a5 | s1\n  3032: a3 = a3 | a5\n  3035: a4 = u8 [a0 + 0x1d]\n  3038: a5 = u8 [a0 + 0x1c]\n  3041: s1 = u8 [a0 + 0x1e]\n  3044: a1 = u8 [a0 + 0x1f]\n  3047: a4 = a4 << 0x8\n  3050: a4 = a4 | a5\n  3053: s1 = s1 << 0x10\n  3056: a1 = a1 << 0x18\n  3059: a1 = a1 | s1\n  3062: a1 = a1 | a4\n  3065: a1 = a1 << 0x20\n  3068: a3 = a3 | a1\n  3071: a1 = u8 [a0 + 0x11]\n  3074: a4 = u8 [a0 + 0x10]\n  3077: a5 = u8 [a0 + 0x12]\n  3080: s1 = u8 [a0 + 0x13]\n  3083: a1 = a1 << 0x8\n  3086: a1 = a1 | a4\n  3089: a5 = a5 << 0x10\n  3092: s1 = s1 << 0x18\n  3095: a5 = a5 | s1\n  3098: a1 = a1 | a5\n  3101: a4 = u8 [a0 + 0x15]\n  3104: a5 = u8 [a0 + 0x14]\n  3107: s1 = u8 [a0 + 0x16]\n  3110: a0 = u8 [a0 + 0x17]\n  3113: a4 = a4 << 0x8\n  3116: a4 = a4 | a5\n  3119: s1 = s1 << 0x10\n  3122: a0 = a0 << 0x18\n  3125: a0 = a0 | s1\n  3128: a0 = a0 | a4\n  3131: a0 = a0 << 0x20\n  3134: a0 = a0 | a1\n  3137: a0 = reverse a0\n  3139: a1 = reverse a3\n  3141: a3 = u64 [sp + 0x8]\n  3144: u64 [a3] = a1\n  3146: u64 [a3 + 0x8] = a0\n  3149: u64 [a3 + 0x10] = a2\n  3152: u64 [a3 + 0x18] = t0\n  3155: sp = s0 + 0xffffffffffffff90\n  3158: ra = u64 [sp + 0x68]\n  3161: s0 = u64 [sp + 0x60]\n  3164: s1 = u64 [sp + 0x58]\n  3167: sp = sp + 0x70\n  3170: ret\n      : @67 (gas: 1)\n  3172: trap\n      : @68 (gas: 3)\n  3173: a0 = 0\n  3175: a1 = 0\n  3177: ra = 60, jump @0\n      : @69 [@dyn 30] (gas: 6)\n  3182: i32 a1 = a0 + 0\n  3184: a0 = 0x1\n  3187: a2 = 0\n  3189: ra = 0x3e\n  3192: ecalli 8 // 'seal_return'\n  3194: fallthrough\n      : @70 [@dyn 31] (gas: 9)\n  3195: a2 = u64 [a1 + 0x18]\n  3198: a3 = u64 [a1 + 0x10]\n  3201: a4 = u64 [a1 + 0x8]\n  3204: a1 = u64 [a1]\n  3206: u64 [a0 + 0x18] = a2\n  3209: u64 [a0 + 0x10] = a3\n  3212: u64 [a0 + 0x8] = a4\n  3215: u64 [a0] = a1\n  3217: ret\n      : @71 (gas: 8)\n  3219: a0 = u64 [sp + 0x30]\n  3222: a1 = u64 [sp + 0x38]\n  3225: a2 = u64 [sp + 0x28]\n  3228: a3 = u64 [sp + 0x20]\n  3231: a1 = a1 | a2\n  3234: a0 = a0 | a3\n  3237: a0 = a0 | a1\n  3240: jump @76 if a0 != 0\n      : @72 (gas: 2)\n  3244: a0 = i32 [0x20004]\n  3249: jump @76 if a0 <=u 3\n      : @73 (gas: 26)\n  3254: u64 [sp + 88] = 0\n  3257: u64 [sp + 80] = 0\n  3260: u64 [sp + 72] = 0\n  3263: u64 [sp + 64] = 0\n  3266: u64 [sp + 120] = 0\n  3269: u64 [sp + 112] = 0\n  3272: u64 [sp + 104] = 0\n  3275: u64 [sp + 96] = 0\n  3278: u32 [sp + 128] = 0x20\n  3283: i32 a1 = sp + 0x40\n  3286: i32 a3 = sp + 0x60\n  3289: i32 a4 = sp + 0x80\n  3293: a2 = 0xffffffffffffffff\n  3296: a0 = 0\n  3298: ecalli 4 // 'get_storage'\n  3300: a0 = u64 [sp + 0x78]\n  3303: u64 [sp] = a0\n  3305: a0 = u64 [sp + 0x70]\n  3308: u64 [sp + 0x8] = a0\n  3311: a0 = u64 [sp + 0x68]\n  3314: u64 [sp + 0x10] = a0\n  3317: a0 = u64 [sp + 0x60]\n  3320: u64 [sp + 0x18] = a0\n  3323: a0 = 0x40\n  3326: a1 = 0x20\n  3329: ra = 64, jump @0\n      : @74 [@dyn 32] (gas: 100)\n  3334: a1 = u8 [a0 + 0x11]\n  3337: a2 = u8 [a0 + 0x10]\n  3340: a3 = u8 [a0 + 0x12]\n  3343: a4 = u8 [a0 + 0x13]\n  3346: a1 = a1 << 0x8\n  3349: a1 = a1 | a2\n  3352: a3 = a3 << 0x10\n  3355: a4 = a4 << 0x18\n  3358: a3 = a3 | a4\n  3361: a1 = a1 | a3\n  3364: a2 = u8 [a0 + 0x15]\n  3367: a3 = u8 [a0 + 0x14]\n  3370: a4 = u8 [a0 + 0x16]\n  3373: a5 = u8 [a0 + 0x17]\n  3376: a2 = a2 << 0x8\n  3379: a2 = a2 | a3\n  3382: a4 = a4 << 0x10\n  3385: a5 = a5 << 0x18\n  3388: a4 = a4 | a5\n  3391: a2 = a2 | a4\n  3394: a2 = a2 << 0x20\n  3397: t0 = a2 | a1\n  3400: a2 = u8 [a0 + 0x1]\n  3403: a3 = u8 [a0]\n  3405: a4 = u8 [a0 + 0x2]\n  3408: a5 = u8 [a0 + 0x3]\n  3411: a2 = a2 << 0x8\n  3414: a2 = a2 | a3\n  3417: a4 = a4 << 0x10\n  3420: a5 = a5 << 0x18\n  3423: a4 = a4 | a5\n  3426: a2 = a2 | a4\n  3429: a3 = u8 [a0 + 0x5]\n  3432: a4 = u8 [a0 + 0x4]\n  3435: a5 = u8 [a0 + 0x6]\n  3438: s1 = u8 [a0 + 0x7]\n  3441: a3 = a3 << 0x8\n  3444: a3 = a3 | a4\n  3447: a5 = a5 << 0x10\n  3450: s1 = s1 << 0x18\n  3453: a5 = a5 | s1\n  3456: a3 = a3 | a5\n  3459: a3 = a3 << 0x20\n  3462: a2 = a2 | a3\n  3465: a3 = u8 [a0 + 0x19]\n  3468: a4 = u8 [a0 + 0x18]\n  3471: a5 = u8 [a0 + 0x1a]\n  3474: s1 = u8 [a0 + 0x1b]\n  3477: a3 = a3 << 0x8\n  3480: a3 = a3 | a4\n  3483: a5 = a5 << 0x10\n  3486: s1 = s1 << 0x18\n  3489: a5 = a5 | s1\n  3492: a3 = a3 | a5\n  3495: a4 = u8 [a0 + 0x1d]\n  3498: a5 = u8 [a0 + 0x1c]\n  3501: s1 = u8 [a0 + 0x1e]\n  3504: a1 = u8 [a0 + 0x1f]\n  3507: a4 = a4 << 0x8\n  3510: a4 = a4 | a5\n  3513: s1 = s1 << 0x10\n  3516: a1 = a1 << 0x18\n  3519: a1 = a1 | s1\n  3522: a1 = a1 | a4\n  3525: a1 = a1 << 0x20\n  3528: a3 = a3 | a1\n  3531: a1 = u8 [a0 + 0x9]\n  3534: a4 = u8 [a0 + 0x8]\n  3537: a5 = u8 [a0 + 0xa]\n  3540: s1 = u8 [a0 + 0xb]\n  3543: a1 = a1 << 0x8\n  3546: a1 = a1 | a4\n  3549: a5 = a5 << 0x10\n  3552: s1 = s1 << 0x18\n  3555: a5 = a5 | s1\n  3558: a1 = a1 | a5\n  3561: a4 = u8 [a0 + 0xd]\n  3564: a5 = u8 [a0 + 0xc]\n  3567: s1 = u8 [a0 + 0xe]\n  3570: a0 = u8 [a0 + 0xf]\n  3573: a4 = a4 << 0x8\n  3576: a4 = a4 | a5\n  3579: s1 = s1 << 0x10\n  3582: a0 = a0 << 0x18\n  3585: a0 = a0 | s1\n  3588: a0 = a0 | a4\n  3591: a0 = a0 << 0x20\n  3594: a0 = a0 | a1\n  3597: a1 = reverse a0\n  3599: a0 = reverse a3\n  3601: a2 = reverse a2\n  3603: a3 = reverse t0\n  3605: a2 = a2 | a3\n  3608: a3 = a0 | a1\n  3611: a3 = a3 | a2\n  3614: a3 = a3 >> 0x20\n  3617: a1 = a1 | a2\n  3620: a1 = a1 << 0x20\n  3623: a1 = a1 | a3\n  3626: jump @78 if a1 == 0\n      : @75 (gas: 1)\n  3629: trap\n      : @76 (gas: 3)\n  3630: a0 = 0\n  3632: a1 = 0\n  3634: ra = 66, jump @0\n      : @77 [@dyn 33] (gas: 5)\n  3639: i32 a1 = a0 + 0\n  3641: a0 = 0x1\n  3644: a2 = 0\n  3646: ecalli 8 // 'seal_return'\n  3648: fallthrough\n      : @78 (gas: 4)\n  3649: i32 s1 = a0 + 0\n  3651: a1 = 0x20\n  3654: a0 = s1\n  3656: ra = 68, jump @0\n      : @79 [@dyn 34] (gas: 71)\n  3661: a1 = u64 [sp]\n  3663: a1 = reverse a1\n  3665: a2 = u64 [sp + 0x8]\n  3668: a2 = reverse a2\n  3670: a3 = u64 [sp + 0x10]\n  3673: a3 = reverse a3\n  3675: a4 = u64 [sp + 0x18]\n  3678: a4 = reverse a4\n  3680: a5 = a4 >> 0x38\n  3683: u8 [a0 + 0x1f] = a5\n  3686: a5 = a4 >> 0x30\n  3689: u8 [a0 + 0x1e] = a5\n  3692: a5 = a4 >> 0x28\n  3695: u8 [a0 + 0x1d] = a5\n  3698: a5 = a4 >> 0x20\n  3701: u8 [a0 + 0x1c] = a5\n  3704: a5 = a4 >> 0x18\n  3707: u8 [a0 + 0x1b] = a5\n  3710: a5 = a4 >> 0x10\n  3713: u8 [a0 + 0x1a] = a5\n  3716: a5 = a4 >> 0x8\n  3719: u8 [a0 + 0x19] = a5\n  3722: u8 [a0 + 0x18] = a4\n  3725: u8 [a0 + 0x10] = a3\n  3728: a4 = a3 >> 0x38\n  3731: u8 [a0 + 0x17] = a4\n  3734: a4 = a3 >> 0x30\n  3737: u8 [a0 + 0x16] = a4\n  3740: a4 = a3 >> 0x28\n  3743: u8 [a0 + 0x15] = a4\n  3746: a4 = a3 >> 0x20\n  3749: u8 [a0 + 0x14] = a4\n  3752: a4 = a3 >> 0x18\n  3755: u8 [a0 + 0x13] = a4\n  3758: a4 = a3 >> 0x10\n  3761: u8 [a0 + 0x12] = a4\n  3764: a3 = a3 >> 0x8\n  3767: u8 [a0 + 0x11] = a3\n  3770: u8 [a0 + 0x8] = a2\n  3773: a3 = a2 >> 0x38\n  3776: u8 [a0 + 0xf] = a3\n  3779: a3 = a2 >> 0x30\n  3782: u8 [a0 + 0xe] = a3\n  3785: a3 = a2 >> 0x28\n  3788: u8 [a0 + 0xd] = a3\n  3791: a3 = a2 >> 0x20\n  3794: u8 [a0 + 0xc] = a3\n  3797: a3 = a2 >> 0x18\n  3800: u8 [a0 + 0xb] = a3\n  3803: a3 = a2 >> 0x10\n  3806: u8 [a0 + 0xa] = a3\n  3809: a2 = a2 >> 0x8\n  3812: u8 [a0 + 0x9] = a2\n  3815: u8 [a0] = a1\n  3817: a2 = a1 >> 0x38\n  3820: u8 [a0 + 0x7] = a2\n  3823: a2 = a1 >> 0x30\n  3826: u8 [a0 + 0x6] = a2\n  3829: a2 = a1 >> 0x28\n  3832: u8 [a0 + 0x5] = a2\n  3835: a2 = a1 >> 0x20\n  3838: u8 [a0 + 0x4] = a2\n  3841: a2 = a1 >> 0x18\n  3844: u8 [a0 + 0x3] = a2\n  3847: a2 = a1 >> 0x10\n  3850: u8 [a0 + 0x2] = a2\n  3853: a1 = a1 >> 0x8\n  3856: u8 [a0 + 0x1] = a1\n  3859: a1 = 0x20\n  3862: a0 = s1\n  3864: ra = 70, jump @0\n      : @80 [@dyn 35] (gas: 6)\n  3869: i32 a1 = a0 + 0\n  3871: a2 = 0x20\n  3874: a0 = 0\n  3876: ra = 0x48\n  3879: ecalli 8 // 'seal_return'\n  3881: fallthrough\n      : @81 [@dyn 36] (gas: 1)\n  3882: ret\n      : @82 (gas: 8)\n  3884: a0 = u64 [sp + 0x70]\n  3887: a1 = u64 [sp + 0x78]\n  3890: a2 = u64 [sp + 0x68]\n  3893: a3 = u64 [sp + 0x60]\n  3896: a1 = a1 | a2\n  3899: a0 = a0 | a3\n  3902: a0 = a0 | a1\n  3905: jump @88 if a0 != 0\n      : @83 (gas: 2)\n  3909: a0 = i32 [0x20004]\n  3914: jump @88 if a0 <=u 35\n      : @84 (gas: 54)\n  3919: i32 a0 = sp + 0x80\n  3923: a1 = 0x4\n  3926: ecalli 1 // 'call_data_load'\n  3928: a2 = u64 [sp + 0x80]\n  3932: a0 = u64 [sp + 0x88]\n  3936: a1 = u64 [sp + 0x90]\n  3940: a3 = u64 [sp + 0x98]\n  3944: u64 [sp + 0x38] = a3\n  3947: u64 [sp + 0x30] = a1\n  3950: u64 [sp + 0x28] = a0\n  3953: a0 = sp + 0x40\n  3956: a1 = sp + 0x20\n  3959: u64 [sp + 0x20] = a2\n  3962: ra = 0x4a\n  3965: sp = sp + 0xfffffffffffffea0\n  3969: u64 [sp + 0x158] = ra\n  3973: u64 [sp + 0x150] = s0\n  3977: u64 [sp + 0x148] = s1\n  3981: s0 = sp + 0x160\n  3985: sp = sp & 0xffffffffffffffe0\n  3988: u64 [sp + 0x20] = a0\n  3991: a0 = u64 [a1 + 0x18]\n  3994: u64 [sp + 0x40] = a0\n  3997: a0 = u64 [a1 + 0x10]\n  4000: u64 [sp + 0x48] = a0\n  4003: a0 = u64 [a1 + 0x8]\n  4006: u64 [sp + 0x50] = a0\n  4009: a0 = u64 [a1]\n  4011: u64 [sp + 0x58] = a0\n  4014: u64 [sp + 280] = 0\n  4018: u64 [sp + 272] = 0\n  4022: u64 [sp + 264] = 0\n  4026: u64 [sp + 256] = 0x1\n  4031: u64 [sp + 312] = 0\n  4035: u64 [sp + 304] = 0\n  4039: u64 [sp + 296] = 0\n  4043: u64 [sp + 288] = 0\n  4047: u32 [sp + 320] = 0x20\n  4052: i32 a1 = sp + 0x100\n  4056: i32 a3 = sp + 0x120\n  4060: i32 a4 = sp + 0x140\n  4064: a2 = 0xffffffffffffffff\n  4067: a0 = 0\n  4069: ecalli 4 // 'get_storage'\n  4071: a0 = u64 [sp + 0x130]\n  4075: u64 [sp + 0x30] = a0\n  4078: a0 = u64 [sp + 0x128]\n  4082: u64 [sp + 0x28] = a0\n  4085: a0 = u64 [sp + 0x120]\n  4089: u64 [sp + 0x38] = a0\n  4092: a0 = 0x40\n  4095: a1 = 0x20\n  4098: ra = 0x8c\n  4102: jump @0\n      : @85 [@dyn 37] (gas: 11)\n  4105: a0 = u64 [sp + 0x58]\n  4108: u64 [sp + 0x18] = a0\n  4111: a0 = u64 [sp + 0x50]\n  4114: u64 [sp + 0x8] = a0\n  4117: a0 = u64 [sp + 0x48]\n  4120: u64 [sp + 0x10] = a0\n  4123: a0 = u64 [sp + 0x40]\n  4126: u64 [sp] = a0\n  4128: a0 = 0x40\n  4131: a1 = 0x20\n  4134: ra = 76, jump @0\n      : @86 [@dyn 38] (gas: 100)\n  4139: a1 = u8 [a0 + 0x11]\n  4142: a2 = u8 [a0 + 0x10]\n  4145: a3 = u8 [a0 + 0x12]\n  4148: a4 = u8 [a0 + 0x13]\n  4151: a1 = a1 << 0x8\n  4154: a1 = a1 | a2\n  4157: a3 = a3 << 0x10\n  4160: a4 = a4 << 0x18\n  4163: a3 = a3 | a4\n  4166: a1 = a1 | a3\n  4169: a2 = u8 [a0 + 0x15]\n  4172: a3 = u8 [a0 + 0x14]\n  4175: a4 = u8 [a0 + 0x16]\n  4178: a5 = u8 [a0 + 0x17]\n  4181: a2 = a2 << 0x8\n  4184: a2 = a2 | a3\n  4187: a4 = a4 << 0x10\n  4190: a5 = a5 << 0x18\n  4193: a4 = a4 | a5\n  4196: a2 = a2 | a4\n  4199: a2 = a2 << 0x20\n  4202: t0 = a2 | a1\n  4205: a2 = u8 [a0 + 0x1]\n  4208: a3 = u8 [a0]\n  4210: a4 = u8 [a0 + 0x2]\n  4213: a5 = u8 [a0 + 0x3]\n  4216: a2 = a2 << 0x8\n  4219: a2 = a2 | a3\n  4222: a4 = a4 << 0x10\n  4225: a5 = a5 << 0x18\n  4228: a4 = a4 | a5\n  4231: a2 = a2 | a4\n  4234: a3 = u8 [a0 + 0x5]\n  4237: a4 = u8 [a0 + 0x4]\n  4240: a5 = u8 [a0 + 0x6]\n  4243: s1 = u8 [a0 + 0x7]\n  4246: a3 = a3 << 0x8\n  4249: a3 = a3 | a4\n  4252: a5 = a5 << 0x10\n  4255: s1 = s1 << 0x18\n  4258: a5 = a5 | s1\n  4261: a3 = a3 | a5\n  4264: a3 = a3 << 0x20\n  4267: a2 = a2 | a3\n  4270: a3 = u8 [a0 + 0x19]\n  4273: a4 = u8 [a0 + 0x18]\n  4276: a5 = u8 [a0 + 0x1a]\n  4279: s1 = u8 [a0 + 0x1b]\n  4282: a3 = a3 << 0x8\n  4285: a3 = a3 | a4\n  4288: a5 = a5 << 0x10\n  4291: s1 = s1 << 0x18\n  4294: a5 = a5 | s1\n  4297: a3 = a3 | a5\n  4300: a4 = u8 [a0 + 0x1d]\n  4303: a5 = u8 [a0 + 0x1c]\n  4306: s1 = u8 [a0 + 0x1e]\n  4309: a1 = u8 [a0 + 0x1f]\n  4312: a4 = a4 << 0x8\n  4315: a4 = a4 | a5\n  4318: s1 = s1 << 0x10\n  4321: a1 = a1 << 0x18\n  4324: a1 = a1 | s1\n  4327: a1 = a1 | a4\n  4330: a1 = a1 << 0x20\n  4333: a3 = a3 | a1\n  4336: a1 = u8 [a0 + 0x9]\n  4339: a4 = u8 [a0 + 0x8]\n  4342: a5 = u8 [a0 + 0xa]\n  4345: s1 = u8 [a0 + 0xb]\n  4348: a1 = a1 << 0x8\n  4351: a1 = a1 | a4\n  4354: a5 = a5 << 0x10\n  4357: s1 = s1 << 0x18\n  4360: a5 = a5 | s1\n  4363: a1 = a1 | a5\n  4366: a4 = u8 [a0 + 0xd]\n  4369: a5 = u8 [a0 + 0xc]\n  4372: s1 = u8 [a0 + 0xe]\n  4375: a0 = u8 [a0 + 0xf]\n  4378: a4 = a4 << 0x8\n  4381: a4 = a4 | a5\n  4384: s1 = s1 << 0x10\n  4387: a0 = a0 << 0x18\n  4390: a0 = a0 | s1\n  4393: a0 = a0 | a4\n  4396: a0 = a0 << 0x20\n  4399: a0 = a0 | a1\n  4402: a1 = reverse a0\n  4404: a0 = reverse a3\n  4406: a2 = reverse a2\n  4408: a3 = reverse t0\n  4410: a2 = a2 | a3\n  4413: a3 = a0 | a1\n  4416: a3 = a3 | a2\n  4419: a3 = a3 >> 0x20\n  4422: a1 = a1 | a2\n  4425: a1 = a1 << 0x20\n  4428: a1 = a1 | a3\n  4431: jump @90 if a1 == 0\n      : @87 (gas: 1)\n  4434: trap\n      : @88 (gas: 3)\n  4435: a0 = 0\n  4437: a1 = 0\n  4439: ra = 78, jump @0\n      : @89 [@dyn 39] (gas: 5)\n  4444: i32 a1 = a0 + 0\n  4446: a0 = 0x1\n  4449: a2 = 0\n  4451: ecalli 8 // 'seal_return'\n  4453: fallthrough\n      : @90 (gas: 13)\n  4454: a1 = u64 [sp + 0x8]\n  4457: a2 = u64 [sp]\n  4459: a1 = a1 | a2\n  4462: a2 = u64 [sp + 0x18]\n  4465: a3 = u64 [sp + 0x10]\n  4468: a2 = a2 | a3\n  4471: a1 = a1 | a2\n  4474: a1 = a1 >u 0\n  4476: u64 [sp + 0x18] = a1\n  4479: i32 s1 = a0 + 0\n  4481: a1 = 0x20\n  4484: a0 = s1\n  4486: ra = 80, jump @0\n      : @91 [@dyn 40] (gas: 36)\n  4491: u8 [a0 + 30] = 0\n  4494: u8 [a0 + 29] = 0\n  4497: u8 [a0 + 28] = 0\n  4500: u8 [a0 + 27] = 0\n  4503: u8 [a0 + 26] = 0\n  4506: u8 [a0 + 25] = 0\n  4509: u8 [a0 + 24] = 0\n  4512: u8 [a0 + 23] = 0\n  4515: u8 [a0 + 22] = 0\n  4518: u8 [a0 + 21] = 0\n  4521: u8 [a0 + 20] = 0\n  4524: u8 [a0 + 19] = 0\n  4527: u8 [a0 + 18] = 0\n  4530: u8 [a0 + 17] = 0\n  4533: u8 [a0 + 16] = 0\n  4536: u8 [a0 + 15] = 0\n  4539: u8 [a0 + 14] = 0\n  4542: u8 [a0 + 13] = 0\n  4545: u8 [a0 + 12] = 0\n  4548: u8 [a0 + 11] = 0\n  4551: u8 [a0 + 10] = 0\n  4554: u8 [a0 + 9] = 0\n  4557: u8 [a0 + 8] = 0\n  4560: u8 [a0 + 7] = 0\n  4563: u8 [a0 + 6] = 0\n  4566: u8 [a0 + 5] = 0\n  4569: u8 [a0 + 4] = 0\n  4572: u8 [a0 + 3] = 0\n  4575: u8 [a0 + 2] = 0\n  4578: u8 [a0 + 1] = 0\n  4581: u8 [a0 + 0] = 0\n  4583: a1 = u64 [sp + 0x18]\n  4586: u8 [a0 + 0x1f] = a1\n  4589: a1 = 0x20\n  4592: a0 = s1\n  4594: ra = 82, jump @0\n      : @92 [@dyn 41] (gas: 6)\n  4599: i32 a1 = a0 + 0\n  4601: a2 = 0x20\n  4604: a0 = 0\n  4606: ra = 0x54\n  4609: ecalli 8 // 'seal_return'\n  4611: fallthrough\n      : @93 [@dyn 42] (gas: 18)\n  4612: sp = sp + 0xffffffffffffffc0\n  4615: u64 [sp + 0x38] = ra\n  4618: u64 [sp + 0x30] = s0\n  4621: u64 [sp + 0x28] = s1\n  4624: s0 = sp + 0x40\n  4627: sp = sp & 0xffffffffffffffe0\n  4630: a2 = u64 [a1 + 0x10]\n  4633: a3 = u64 [a1 + 0x18]\n  4636: a4 = u64 [a1 + 0x8]\n  4639: a1 = u64 [a1]\n  4641: a3 = a3 | a4\n  4644: a4 = a1 | a2\n  4647: a4 = a4 | a3\n  4650: a4 = a4 >> 0x20\n  4653: a2 = a2 | a3\n  4656: a2 = a2 << 0x20\n  4659: a2 = a2 | a4\n  4662: jump @97 if a2 != 0\n      : @94 (gas: 5)\n  4665: s1 = a0\n  4667: i32 a1 = a1 + 0\n  4669: i32 a0 = sp + 0\n  4671: ecalli 1 // 'call_data_load'\n  4673: fallthrough\n      : @95 (gas: 10)\n  4674: a0 = u64 [sp + 0x10]\n  4677: a1 = u64 [sp + 0x18]\n  4680: a2 = 0x100000000\n  4690: a2 = a2 ^ a0\n  4693: a2 = a2 | a1\n  4696: a3 = a0 >> 0x20\n  4699: a3 = a3 <u 0x1\n  4702: a3 = 0 if a1 != 0\n  4704: a3 = 0 if a2 == 0\n  4706: jump @98 if a3 == 0\n      : @96 (gas: 12)\n  4709: a2 = u64 [sp]\n  4711: a3 = u64 [sp + 0x8]\n  4714: u64 [s1] = a2\n  4716: u64 [s1 + 0x8] = a3\n  4719: u64 [s1 + 0x10] = a0\n  4722: u64 [s1 + 0x18] = a1\n  4725: sp = s0 + 0xffffffffffffffc0\n  4728: ra = u64 [sp + 0x38]\n  4731: s0 = u64 [sp + 0x30]\n  4734: s1 = u64 [sp + 0x28]\n  4737: sp = sp + 0x40\n  4740: ret\n      : @97 (gas: 1)\n  4742: trap\n      : @98 (gas: 3)\n  4743: a0 = 0\n  4745: a1 = 0\n  4747: ra = 86, jump @0\n      : @99 [@dyn 43] (gas: 6)\n  4752: i32 a1 = a0 + 0\n  4754: a0 = 0x1\n  4757: a2 = 0\n  4759: ra = 0x58\n  4762: ecalli 8 // 'seal_return'\n  4764: fallthrough\n      : @100 [@dyn 44] (gas: 52)\n  4765: sp = sp + 0xffffffffffffff80\n  4768: u64 [sp + 0x78] = ra\n  4771: u64 [sp + 0x70] = s0\n  4774: u64 [sp + 0x68] = s1\n  4777: s0 = sp + 0x80\n  4781: sp = sp & 0xffffffffffffffe0\n  4784: t2 = u64 [a1 + 0x10]\n  4787: a5 = u64 [a1 + 0x8]\n  4790: t0 = u64 [a2 + 0x8]\n  4793: s1 = u64 [a1]\n  4795: u64 [sp + 0x10] = s1\n  4798: a4 = u64 [a2]\n  4800: u64 [sp + 0x18] = a4\n  4803: ra = u64 [a2 + 0x10]\n  4806: a3 = t0 ^ a5\n  4809: u64 [sp + 0x38] = a3\n  4812: a3 = t0 <u a5\n  4815: a4 = a4 <u s1\n  4818: t1 = u64 [sp + 0x38]\n  4821: a3 = a4 if t1 == 0\n  4824: t1 = a4\n  4826: a1 = u64 [a1 + 0x18]\n  4829: u64 [sp + 0x38] = a1\n  4832: a1 = u64 [a2 + 0x18]\n  4835: u64 [sp + 0x20] = a1\n  4838: a1 = ra - t2\n  4841: a2 = a1 - a3\n  4844: u64 [sp + 0x28] = a2\n  4847: a2 = a1 <u a3\n  4850: u64 [sp + 0x30] = t2\n  4853: a3 = ra <u t2\n  4856: a1 = u64 [sp + 0x38]\n  4859: a4 = u64 [sp + 0x20]\n  4862: a1 = a4 - a1\n  4865: a1 = a1 - a3\n  4868: t2 = a1 - a2\n  4871: s1 = t0 - a5\n  4874: a2 = s1 - t1\n  4877: t0 = u64 [sp + 0x10]\n  4880: a1 = u64 [sp + 0x18]\n  4883: a3 = a1 - t0\n  4886: a4 = a2 >u 0\n  4888: a3 = a3 <u 0x20\n  4891: a3 = a3 ^ 0x1\n  4894: a3 = a4 if a2 != 0\n  4897: a2 = t2 >s 0\n  4899: a1 = u64 [sp + 0x28]\n  4902: a4 = a1 >u 0\n  4904: a4 = a2 if t2 != 0\n  4907: a1 = a1 | t2\n  4910: a3 = a4 if a1 != 0\n  4913: jump @106 if a3 == 0\n      : @101 (gas: 11)\n  4916: s1 = a0\n  4918: a2 = u64 [sp + 0x30]\n  4921: a0 = t0 | a2\n  4924: a1 = u64 [sp + 0x38]\n  4927: a1 = a1 | a5\n  4930: a0 = a0 | a1\n  4933: a0 = a0 >> 0x20\n  4936: a1 = a1 | a2\n  4939: a1 = a1 << 0x20\n  4942: a0 = a0 | a1\n  4945: jump @105 if a0 != 0\n      : @102 (gas: 4)\n  4948: i32 a1 = t0 + 0\n  4950: i32 a0 = sp + 0x40\n  4953: ecalli 1 // 'call_data_load'\n  4955: fallthrough\n      : @103 (gas: 10)\n  4956: a0 = u64 [sp + 0x50]\n  4959: a1 = u64 [sp + 0x58]\n  4962: a2 = 0x100000000\n  4972: a2 = a2 ^ a0\n  4975: a2 = a2 | a1\n  4978: a3 = a0 >> 0x20\n  4981: a3 = a3 <u 0x1\n  4984: a3 = 0 if a1 != 0\n  4986: a3 = 0 if a2 == 0\n  4988: jump @106 if a3 == 0\n      : @104 (gas: 12)\n  4991: a2 = u64 [sp + 0x48]\n  4994: a3 = u64 [sp + 0x40]\n  4997: u64 [s1 + 0x8] = a2\n  5000: u64 [s1] = a3\n  5002: u64 [s1 + 0x10] = a0\n  5005: u64 [s1 + 0x18] = a1\n  5008: sp = s0 + 0xffffffffffffff80\n  5011: ra = u64 [sp + 0x78]\n  5014: s0 = u64 [sp + 0x70]\n  5017: s1 = u64 [sp + 0x68]\n  5020: sp = sp + 0x80\n  5024: ret\n      : @105 (gas: 1)\n  5026: trap\n      : @106 (gas: 3)\n  5027: a0 = 0\n  5029: a1 = 0\n  5031: ra = 90, jump @0\n      : @107 [@dyn 45] (gas: 6)\n  5036: i32 a1 = a0 + 0\n  5038: a0 = 0x1\n  5041: a2 = 0\n  5043: ra = 0x5c\n  5046: ecalli 8 // 'seal_return'\n  5048: fallthrough\n      : @108 [@dyn 46] (gas: 9)\n  5049: a2 = u64 [a1 + 0x18]\n  5052: a3 = u64 [a1 + 0x10]\n  5055: a4 = u64 [a1 + 0x8]\n  5058: a1 = u64 [a1]\n  5060: u64 [a0 + 0x18] = a2\n  5063: u64 [a0 + 0x10] = a3\n  5066: u64 [a0 + 0x8] = a4\n  5069: u64 [a0] = a1\n  5071: ret\n      : @109 (gas: 8)\n  5073: a0 = u64 [sp + 0x30]\n  5076: a1 = u64 [sp + 0x38]\n  5079: a2 = u64 [sp + 0x28]\n  5082: a3 = u64 [sp + 0x20]\n  5085: a1 = a1 | a2\n  5088: a0 = a0 | a3\n  5091: a0 = a0 | a1\n  5094: jump @116 if a0 != 0\n      : @110 (gas: 2)\n  5098: a0 = i32 [0x20004]\n  5103: jump @116 if a0 <=u 35\n      : @111 (gas: 4)\n  5108: i32 a0 = sp + 0x80\n  5112: a1 = 0x4\n  5115: ecalli 1 // 'call_data_load'\n  5117: fallthrough\n      : @112 (gas: 11)\n  5118: s1 = u64 [sp + 0x90]\n  5122: a3 = u64 [sp + 0x98]\n  5126: a0 = 0x100000000\n  5136: a0 = a0 ^ s1\n  5139: a0 = a0 | a3\n  5142: a1 = s1 >> 0x20\n  5145: a1 = a1 <u 0x1\n  5148: u64 [sp + 0x18] = a3\n  5151: a1 = 0 if a3 != 0\n  5153: a1 = 0 if a0 == 0\n  5155: jump @117 if a1 == 0\n      : @113 (gas: 44)\n  5159: a0 = u64 [sp + 0x88]\n  5163: u64 [sp + 0x8] = a0\n  5166: a0 = u64 [sp + 0x80]\n  5170: u64 [sp + 0x10] = a0\n  5173: u64 [sp + 120] = 0\n  5176: u64 [sp + 112] = 0\n  5179: u64 [sp + 104] = 0\n  5182: u64 [sp + 96] = 0x1\n  5186: u64 [sp + 152] = 0\n  5190: u64 [sp + 144] = 0\n  5194: u64 [sp + 136] = 0\n  5198: u64 [sp + 128] = 0\n  5202: u32 [sp + 64] = 0x20\n  5206: i32 a1 = sp + 0x60\n  5209: i32 a3 = sp + 0x80\n  5213: i32 a4 = sp + 0x40\n  5216: a2 = 0xffffffffffffffff\n  5219: a0 = 0\n  5221: ecalli 4 // 'get_storage'\n  5223: a0 = u32 [sp + 0x94]\n  5227: a1 = u64 [sp + 0x98]\n  5231: a0 = a0 << 0x20\n  5234: a0 = a0 | s1\n  5237: a2 = u64 [sp + 0x18]\n  5240: a1 = a1 | a2\n  5243: u64 [sp + 120] = 0\n  5246: u64 [sp + 112] = 0\n  5249: u64 [sp + 104] = 0\n  5252: u64 [sp + 96] = 0x1\n  5256: u64 [sp + 0x98] = a1\n  5260: u64 [sp + 0x90] = a0\n  5264: a0 = u64 [sp + 0x8]\n  5267: u64 [sp + 0x88] = a0\n  5271: a0 = u64 [sp + 0x10]\n  5274: u64 [sp + 0x80] = a0\n  5278: i32 a1 = sp + 0x60\n  5281: i32 a3 = sp + 0x80\n  5285: a2 = 0xffffffffffffffff\n  5288: a4 = 0x20\n  5291: a0 = 0\n  5293: ecalli 10 // 'set_storage'\n  5295: a0 = 0x40\n  5298: a1 = 0x20\n  5301: ra = 94, jump @0\n      : @114 [@dyn 47] (gas: 100)\n  5306: a1 = u8 [a0 + 0x11]\n  5309: a2 = u8 [a0 + 0x10]\n  5312: a3 = u8 [a0 + 0x12]\n  5315: a4 = u8 [a0 + 0x13]\n  5318: a1 = a1 << 0x8\n  5321: a1 = a1 | a2\n  5324: a3 = a3 << 0x10\n  5327: a4 = a4 << 0x18\n  5330: a3 = a3 | a4\n  5333: a1 = a1 | a3\n  5336: a2 = u8 [a0 + 0x15]\n  5339: a3 = u8 [a0 + 0x14]\n  5342: a4 = u8 [a0 + 0x16]\n  5345: a5 = u8 [a0 + 0x17]\n  5348: a2 = a2 << 0x8\n  5351: a2 = a2 | a3\n  5354: a4 = a4 << 0x10\n  5357: a5 = a5 << 0x18\n  5360: a4 = a4 | a5\n  5363: a2 = a2 | a4\n  5366: a2 = a2 << 0x20\n  5369: t0 = a2 | a1\n  5372: a2 = u8 [a0 + 0x1]\n  5375: a3 = u8 [a0]\n  5377: a4 = u8 [a0 + 0x2]\n  5380: a5 = u8 [a0 + 0x3]\n  5383: a2 = a2 << 0x8\n  5386: a2 = a2 | a3\n  5389: a4 = a4 << 0x10\n  5392: a5 = a5 << 0x18\n  5395: a4 = a4 | a5\n  5398: a2 = a2 | a4\n  5401: a3 = u8 [a0 + 0x5]\n  5404: a4 = u8 [a0 + 0x4]\n  5407: a5 = u8 [a0 + 0x6]\n  5410: s1 = u8 [a0 + 0x7]\n  5413: a3 = a3 << 0x8\n  5416: a3 = a3 | a4\n  5419: a5 = a5 << 0x10\n  5422: s1 = s1 << 0x18\n  5425: a5 = a5 | s1\n  5428: a3 = a3 | a5\n  5431: a3 = a3 << 0x20\n  5434: a2 = a2 | a3\n  5437: a3 = u8 [a0 + 0x19]\n  5440: a4 = u8 [a0 + 0x18]\n  5443: a5 = u8 [a0 + 0x1a]\n  5446: s1 = u8 [a0 + 0x1b]\n  5449: a3 = a3 << 0x8\n  5452: a3 = a3 | a4\n  5455: a5 = a5 << 0x10\n  5458: s1 = s1 << 0x18\n  5461: a5 = a5 | s1\n  5464: a3 = a3 | a5\n  5467: a4 = u8 [a0 + 0x1d]\n  5470: a5 = u8 [a0 + 0x1c]\n  5473: s1 = u8 [a0 + 0x1e]\n  5476: a1 = u8 [a0 + 0x1f]\n  5479: a4 = a4 << 0x8\n  5482: a4 = a4 | a5\n  5485: s1 = s1 << 0x10\n  5488: a1 = a1 << 0x18\n  5491: a1 = a1 | s1\n  5494: a1 = a1 | a4\n  5497: a1 = a1 << 0x20\n  5500: a3 = a3 | a1\n  5503: a1 = u8 [a0 + 0x9]\n  5506: a4 = u8 [a0 + 0x8]\n  5509: a5 = u8 [a0 + 0xa]\n  5512: s1 = u8 [a0 + 0xb]\n  5515: a1 = a1 << 0x8\n  5518: a1 = a1 | a4\n  5521: a5 = a5 << 0x10\n  5524: s1 = s1 << 0x18\n  5527: a5 = a5 | s1\n  5530: a1 = a1 | a5\n  5533: a4 = u8 [a0 + 0xd]\n  5536: a5 = u8 [a0 + 0xc]\n  5539: s1 = u8 [a0 + 0xe]\n  5542: a0 = u8 [a0 + 0xf]\n  5545: a4 = a4 << 0x8\n  5548: a4 = a4 | a5\n  5551: s1 = s1 << 0x10\n  5554: a0 = a0 << 0x18\n  5557: a0 = a0 | s1\n  5560: a0 = a0 | a4\n  5563: a0 = a0 << 0x20\n  5566: a0 = a0 | a1\n  5569: a1 = reverse a0\n  5571: a0 = reverse a3\n  5573: a2 = reverse a2\n  5575: a3 = reverse t0\n  5577: a2 = a2 | a3\n  5580: a3 = a0 | a1\n  5583: a3 = a3 | a2\n  5586: a3 = a3 >> 0x20\n  5589: a1 = a1 | a2\n  5592: a1 = a1 << 0x20\n  5595: a1 = a1 | a3\n  5598: jump @119 if a1 == 0\n      : @115 (gas: 1)\n  5601: trap\n      : @116 (gas: 4)\n  5602: a0 = 0\n  5604: a1 = 0\n  5606: ra = 0x60\n  5609: jump @0\n      : @117 (gas: 2)\n  5612: a0 = 0\n  5614: ra = 96, jump @0\n      : @118 [@dyn 48] (gas: 7)\n  5619: i32 a1 = a0 + 0\n  5621: a0 = 0x1\n  5624: a2 = 0\n  5626: ecalli 8 // 'seal_return'\n  5628: i32 a0 = a0 + 0\n  5630: ra = 0x62\n  5633: jump @0\n      : @119 (gas: 2)\n  5636: i32 a0 = a0 + 0\n  5638: ra = 98, jump @0\n      : @120 [@dyn 49] (gas: 6)\n  5643: i32 a1 = a0 + 0\n  5645: a0 = 0\n  5647: a2 = 0\n  5649: ra = 0x64\n  5652: ecalli 8 // 'seal_return'\n  5654: fallthrough\n      : @121 [@dyn 50] (gas: 194)\n  5655: sp = sp + 0xffffffffffffffa0\n  5658: u64 [sp + 0x58] = ra\n  5661: u64 [sp + 0x50] = s0\n  5664: u64 [sp + 0x48] = s1\n  5667: u64 [sp] = a0\n  5669: t1 = u64 [a1]\n  5671: ra = u64 [a1 + 0x8]\n  5674: a4 = u64 [a1 + 0x10]\n  5677: a1 = u64 [a1 + 0x18]\n  5680: t0 = u64 [a2]\n  5682: a3 = u64 [a2 + 0x8]\n  5685: t2 = u64 [a2 + 0x18]\n  5688: a2 = u64 [a2 + 0x10]\n  5691: s0 = t0 >> 0x3d\n  5694: s1 = a3 << 0x3\n  5697: s0 = s0 | s1\n  5700: a3 = a3 >> 0x3d\n  5703: s1 = a2 << 0x3\n  5706: a3 = a3 | s1\n  5709: a2 = a2 >> 0x3d\n  5712: t2 = t2 << 0x3\n  5715: s1 = t2 | a2\n  5718: t2 = t0 << 0x3\n  5721: a2 = s1 >u 0\n  5723: a5 = a3 >u 0\n  5725: a5 = a2 if s1 != 0\n  5728: a0 = s0 >u 0\n  5730: a2 = t2 <u 0x100\n  5734: t2 = a2 ^ 0x1\n  5737: t2 = a0 if s0 != 0\n  5740: a3 = a3 | s1\n  5743: t2 = a5 if a3 != 0\n  5746: u8 [sp + 71] = 0\n  5749: u8 [sp + 70] = 0\n  5752: u8 [sp + 69] = 0\n  5755: u8 [sp + 68] = 0\n  5758: u8 [sp + 67] = 0\n  5761: u8 [sp + 66] = 0\n  5764: u8 [sp + 65] = 0\n  5767: u8 [sp + 64] = 0\n  5770: u8 [sp + 63] = 0\n  5773: u8 [sp + 62] = 0\n  5776: u8 [sp + 61] = 0\n  5779: u8 [sp + 60] = 0\n  5782: u8 [sp + 59] = 0\n  5785: u8 [sp + 58] = 0\n  5788: u8 [sp + 57] = 0\n  5791: u8 [sp + 56] = 0\n  5794: u8 [sp + 55] = 0\n  5797: u8 [sp + 54] = 0\n  5800: u8 [sp + 53] = 0\n  5803: u8 [sp + 52] = 0\n  5806: u8 [sp + 51] = 0\n  5809: u8 [sp + 50] = 0\n  5812: u8 [sp + 49] = 0\n  5815: u8 [sp + 48] = 0\n  5818: u8 [sp + 47] = 0\n  5821: u8 [sp + 46] = 0\n  5824: u8 [sp + 45] = 0\n  5827: u8 [sp + 44] = 0\n  5830: u8 [sp + 43] = 0\n  5833: u8 [sp + 42] = 0\n  5836: u8 [sp + 41] = 0\n  5839: u8 [sp + 40] = 0\n  5842: u8 [sp + 0x20] = a1\n  5845: u8 [sp + 0x18] = a4\n  5848: u8 [sp + 0x10] = ra\n  5851: u8 [sp + 0x8] = t1\n  5854: a0 = a1 >> 0x38\n  5857: u8 [sp + 0x27] = a0\n  5860: a0 = a1 >> 0x30\n  5863: u8 [sp + 0x26] = a0\n  5866: a0 = a1 >> 0x28\n  5869: u8 [sp + 0x25] = a0\n  5872: a0 = a1 >> 0x20\n  5875: u8 [sp + 0x24] = a0\n  5878: a0 = a1 >> 0x18\n  5881: u8 [sp + 0x23] = a0\n  5884: a0 = a1 >> 0x10\n  5887: u8 [sp + 0x22] = a0\n  5890: a1 = a1 >> 0x8\n  5893: u8 [sp + 0x21] = a1\n  5896: a0 = a4 >> 0x38\n  5899: u8 [sp + 0x1f] = a0\n  5902: a0 = a4 >> 0x30\n  5905: u8 [sp + 0x1e] = a0\n  5908: a0 = a4 >> 0x28\n  5911: u8 [sp + 0x1d] = a0\n  5914: a0 = a4 >> 0x20\n  5917: u8 [sp + 0x1c] = a0\n  5920: a0 = a4 >> 0x18\n  5923: u8 [sp + 0x1b] = a0\n  5926: a0 = a4 >> 0x10\n  5929: u8 [sp + 0x1a] = a0\n  5932: a4 = a4 >> 0x8\n  5935: u8 [sp + 0x19] = a4\n  5938: a0 = ra >> 0x38\n  5941: u8 [sp + 0x17] = a0\n  5944: a0 = ra >> 0x30\n  5947: u8 [sp + 0x16] = a0\n  5950: a0 = ra >> 0x28\n  5953: u8 [sp + 0x15] = a0\n  5956: a0 = ra >> 0x20\n  5959: u8 [sp + 0x14] = a0\n  5962: a0 = ra >> 0x18\n  5965: u8 [sp + 0x13] = a0\n  5968: a0 = ra >> 0x10\n  5971: u8 [sp + 0x12] = a0\n  5974: a0 = ra >> 0x8\n  5977: u8 [sp + 0x11] = a0\n  5980: a0 = t1 >> 0x38\n  5983: u8 [sp + 0xf] = a0\n  5986: a0 = t1 >> 0x30\n  5989: u8 [sp + 0xe] = a0\n  5992: a0 = t1 >> 0x28\n  5995: u8 [sp + 0xd] = a0\n  5998: a0 = t1 >> 0x20\n  6001: u8 [sp + 0xc] = a0\n  6004: a0 = t1 >> 0x18\n  6007: u8 [sp + 0xb] = a0\n  6010: a0 = t1 >> 0x10\n  6013: u8 [sp + 0xa] = a0\n  6016: a0 = t1 >> 0x8\n  6019: u8 [sp + 0x9] = a0\n  6022: a1 = t0 & 0x1f\n  6025: a0 = sp + 0x8\n  6028: a1 = a1 + a0\n  6031: a0 = u8 [a1 + 0x9]\n  6034: a2 = u8 [a1 + 0x8]\n  6037: a3 = u8 [a1 + 0xa]\n  6040: a4 = u8 [a1 + 0xb]\n  6043: a0 = a0 << 0x8\n  6046: a0 = a0 | a2\n  6049: a3 = a3 << 0x10\n  6052: a4 = a4 << 0x18\n  6055: a3 = a3 | a4\n  6058: a0 = a0 | a3\n  6061: a2 = u8 [a1 + 0xd]\n  6064: a3 = u8 [a1 + 0xc]\n  6067: a4 = u8 [a1 + 0xe]\n  6070: a5 = u8 [a1 + 0xf]\n  6073: a2 = a2 << 0x8\n  6076: a2 = a2 | a3\n  6079: a4 = a4 << 0x10\n  6082: a5 = a5 << 0x18\n  6085: a4 = a4 | a5\n  6088: a2 = a2 | a4\n  6091: a2 = a2 << 0x20\n  6094: a3 = a2 | a0\n  6097: a0 = u8 [a1 + 0x1]\n  6100: a2 = u8 [a1]\n  6102: a4 = u8 [a1 + 0x2]\n  6105: a5 = u8 [a1 + 0x3]\n  6108: a0 = a0 << 0x8\n  6111: a0 = a0 | a2\n  6114: a4 = a4 << 0x10\n  6117: a5 = a5 << 0x18\n  6120: a4 = a4 | a5\n  6123: a0 = a0 | a4\n  6126: a2 = u8 [a1 + 0x5]\n  6129: a4 = u8 [a1 + 0x4]\n  6132: a5 = u8 [a1 + 0x6]\n  6135: s1 = u8 [a1 + 0x7]\n  6138: a2 = a2 << 0x8\n  6141: a2 = a2 | a4\n  6144: a5 = a5 << 0x10\n  6147: s1 = s1 << 0x18\n  6150: a5 = a5 | s1\n  6153: a2 = a2 | a5\n  6156: a2 = a2 << 0x20\n  6159: a0 = a0 | a2\n  6162: a2 = u8 [a1 + 0x11]\n  6165: a4 = u8 [a1 + 0x10]\n  6168: a5 = u8 [a1 + 0x12]\n  6171: a1 = u8 [a1 + 0x13]\n  6174: a2 = a2 << 0x8\n  6177: a2 = a2 | a4\n  6180: a5 = a5 << 0x10\n  6183: a1 = a1 << 0x18\n  6186: a1 = a1 | a5\n  6189: a1 = a1 | a2\n  6192: a0 = 0 if t2 != 0\n  6194: a3 = 0 if t2 != 0\n  6196: a1 = 0 if t2 != 0\n  6198: a2 = u64 [sp]\n  6200: u64 [a2 + 24] = 0\n  6203: u64 [a2 + 0x10] = a1\n  6206: u64 [a2 + 0x8] = a3\n  6209: u64 [a2] = a0\n  6211: ra = u64 [sp + 0x58]\n  6214: s0 = u64 [sp + 0x50]\n  6217: s1 = u64 [sp + 0x48]\n  6220: sp = sp + 0x60\n  6223: ret\n      : @122 (gas: 8)\n  6225: a0 = u64 [sp + 0x30]\n  6228: a1 = u64 [sp + 0x38]\n  6231: a2 = u64 [sp + 0x28]\n  6234: a3 = u64 [sp + 0x20]\n  6237: a1 = a1 | a2\n  6240: a0 = a0 | a3\n  6243: a0 = a0 | a1\n  6246: jump @127 if a0 != 0\n      : @123 (gas: 2)\n  6250: a0 = i32 [0x20004]\n  6255: jump @127 if a0 <=u 3\n      : @124 (gas: 24)\n  6260: u64 [sp + 88] = 0\n  6263: u64 [sp + 80] = 0\n  6266: u64 [sp + 72] = 0\n  6269: u64 [sp + 64] = 0x1\n  6273: u64 [sp + 120] = 0\n  6276: u64 [sp + 112] = 0\n  6279: u64 [sp + 104] = 0\n  6282: u64 [sp + 96] = 0\n  6285: u32 [sp + 128] = 0x20\n  6290: i32 a1 = sp + 0x40\n  6293: i32 a3 = sp + 0x60\n  6296: i32 a4 = sp + 0x80\n  6300: a2 = 0xffffffffffffffff\n  6303: a0 = 0\n  6305: ecalli 4 // 'get_storage'\n  6307: a0 = u64 [sp + 0x70]\n  6310: u64 [sp + 0x8] = a0\n  6313: a0 = u64 [sp + 0x68]\n  6316: u64 [sp + 0x10] = a0\n  6319: a0 = u64 [sp + 0x60]\n  6322: u64 [sp + 0x18] = a0\n  6325: a0 = 0x40\n  6328: a1 = 0x20\n  6331: ra = 102, jump @0\n      : @125 [@dyn 51] (gas: 100)\n  6336: a1 = u8 [a0 + 0x11]\n  6339: a2 = u8 [a0 + 0x10]\n  6342: a3 = u8 [a0 + 0x12]\n  6345: a4 = u8 [a0 + 0x13]\n  6348: a1 = a1 << 0x8\n  6351: a1 = a1 | a2\n  6354: a3 = a3 << 0x10\n  6357: a4 = a4 << 0x18\n  6360: a3 = a3 | a4\n  6363: a1 = a1 | a3\n  6366: a2 = u8 [a0 + 0x15]\n  6369: a3 = u8 [a0 + 0x14]\n  6372: a4 = u8 [a0 + 0x16]\n  6375: a5 = u8 [a0 + 0x17]\n  6378: a2 = a2 << 0x8\n  6381: a2 = a2 | a3\n  6384: a4 = a4 << 0x10\n  6387: a5 = a5 << 0x18\n  6390: a4 = a4 | a5\n  6393: a2 = a2 | a4\n  6396: a2 = a2 << 0x20\n  6399: t0 = a2 | a1\n  6402: a2 = u8 [a0 + 0x1]\n  6405: a3 = u8 [a0]\n  6407: a4 = u8 [a0 + 0x2]\n  6410: a5 = u8 [a0 + 0x3]\n  6413: a2 = a2 << 0x8\n  6416: a2 = a2 | a3\n  6419: a4 = a4 << 0x10\n  6422: a5 = a5 << 0x18\n  6425: a4 = a4 | a5\n  6428: a2 = a2 | a4\n  6431: a3 = u8 [a0 + 0x5]\n  6434: a4 = u8 [a0 + 0x4]\n  6437: a5 = u8 [a0 + 0x6]\n  6440: s1 = u8 [a0 + 0x7]\n  6443: a3 = a3 << 0x8\n  6446: a3 = a3 | a4\n  6449: a5 = a5 << 0x10\n  6452: s1 = s1 << 0x18\n  6455: a5 = a5 | s1\n  6458: a3 = a3 | a5\n  6461: a3 = a3 << 0x20\n  6464: a2 = a2 | a3\n  6467: a3 = u8 [a0 + 0x19]\n  6470: a4 = u8 [a0 + 0x18]\n  6473: a5 = u8 [a0 + 0x1a]\n  6476: s1 = u8 [a0 + 0x1b]\n  6479: a3 = a3 << 0x8\n  6482: a3 = a3 | a4\n  6485: a5 = a5 << 0x10\n  6488: s1 = s1 << 0x18\n  6491: a5 = a5 | s1\n  6494: a3 = a3 | a5\n  6497: a4 = u8 [a0 + 0x1d]\n  6500: a5 = u8 [a0 + 0x1c]\n  6503: s1 = u8 [a0 + 0x1e]\n  6506: a1 = u8 [a0 + 0x1f]\n  6509: a4 = a4 << 0x8\n  6512: a4 = a4 | a5\n  6515: s1 = s1 << 0x10\n  6518: a1 = a1 << 0x18\n  6521: a1 = a1 | s1\n  6524: a1 = a1 | a4\n  6527: a1 = a1 << 0x20\n  6530: a3 = a3 | a1\n  6533: a1 = u8 [a0 + 0x9]\n  6536: a4 = u8 [a0 + 0x8]\n  6539: a5 = u8 [a0 + 0xa]\n  6542: s1 = u8 [a0 + 0xb]\n  6545: a1 = a1 << 0x8\n  6548: a1 = a1 | a4\n  6551: a5 = a5 << 0x10\n  6554: s1 = s1 << 0x18\n  6557: a5 = a5 | s1\n  6560: a1 = a1 | a5\n  6563: a4 = u8 [a0 + 0xd]\n  6566: a5 = u8 [a0 + 0xc]\n  6569: s1 = u8 [a0 + 0xe]\n  6572: a0 = u8 [a0 + 0xf]\n  6575: a4 = a4 << 0x8\n  6578: a4 = a4 | a5\n  6581: s1 = s1 << 0x10\n  6584: a0 = a0 << 0x18\n  6587: a0 = a0 | s1\n  6590: a0 = a0 | a4\n  6593: a0 = a0 << 0x20\n  6596: a0 = a0 | a1\n  6599: a1 = reverse a0\n  6601: a0 = reverse a3\n  6603: a2 = reverse a2\n  6605: a3 = reverse t0\n  6607: a2 = a2 | a3\n  6610: a3 = a0 | a1\n  6613: a3 = a3 | a2\n  6616: a3 = a3 >> 0x20\n  6619: a1 = a1 | a2\n  6622: a1 = a1 << 0x20\n  6625: a1 = a1 | a3\n  6628: jump @129 if a1 == 0\n      : @126 (gas: 1)\n  6631: trap\n      : @127 (gas: 3)\n  6632: a0 = 0\n  6634: a1 = 0\n  6636: ra = 104, jump @0\n      : @128 [@dyn 52] (gas: 5)\n  6641: i32 a1 = a0 + 0\n  6643: a0 = 0x1\n  6646: a2 = 0\n  6648: ecalli 8 // 'seal_return'\n  6650: fallthrough\n      : @129 (gas: 7)\n  6651: a1 = u64 [sp + 0x8]\n  6654: a1 = a1 << 0x20\n  6657: s1 = a1 >> 0x20\n  6660: i32 a0 = a0 + 0\n  6662: u64 [sp + 0x8] = a0\n  6665: a1 = 0x20\n  6668: ra = 106, jump @0\n      : @130 [@dyn 53] (gas: 58)\n  6673: a1 = reverse s1\n  6675: a2 = u64 [sp + 0x10]\n  6678: a2 = reverse a2\n  6680: a3 = u64 [sp + 0x18]\n  6683: a3 = reverse a3\n  6685: a4 = a3 >> 0x38\n  6688: u8 [a0 + 0x1f] = a4\n  6691: a4 = a3 >> 0x30\n  6694: u8 [a0 + 0x1e] = a4\n  6697: a4 = a3 >> 0x28\n  6700: u8 [a0 + 0x1d] = a4\n  6703: a4 = a3 >> 0x20\n  6706: u8 [a0 + 0x1c] = a4\n  6709: a4 = a3 >> 0x18\n  6712: u8 [a0 + 0x1b] = a4\n  6715: a4 = a3 >> 0x10\n  6718: u8 [a0 + 0x1a] = a4\n  6721: a4 = a3 >> 0x8\n  6724: u8 [a0 + 0x19] = a4\n  6727: u8 [a0 + 0x18] = a3\n  6730: u8 [a0 + 0x10] = a2\n  6733: u8 [a0 + 11] = 0\n  6736: u8 [a0 + 10] = 0\n  6739: u8 [a0 + 9] = 0\n  6742: u8 [a0 + 7] = 0\n  6745: u8 [a0 + 6] = 0\n  6748: u8 [a0 + 5] = 0\n  6751: u8 [a0 + 4] = 0\n  6754: u8 [a0 + 3] = 0\n  6757: u8 [a0 + 2] = 0\n  6760: u8 [a0 + 1] = 0\n  6763: u8 [a0 + 0] = 0\n  6765: a3 = a2 >> 0x38\n  6768: u8 [a0 + 0x17] = a3\n  6771: a3 = a2 >> 0x30\n  6774: u8 [a0 + 0x16] = a3\n  6777: a3 = a2 >> 0x28\n  6780: u8 [a0 + 0x15] = a3\n  6783: a3 = a2 >> 0x20\n  6786: u8 [a0 + 0x14] = a3\n  6789: a3 = a2 >> 0x18\n  6792: u8 [a0 + 0x13] = a3\n  6795: a3 = a2 >> 0x10\n  6798: u8 [a0 + 0x12] = a3\n  6801: a2 = a2 >> 0x8\n  6804: u8 [a0 + 0x11] = a2\n  6807: u8 [a0 + 0x8] = a1\n  6810: a2 = a1 >> 0x38\n  6813: u8 [a0 + 0xf] = a2\n  6816: a2 = a1 >> 0x30\n  6819: u8 [a0 + 0xe] = a2\n  6822: a2 = a1 >> 0x28\n  6825: u8 [a0 + 0xd] = a2\n  6828: a1 = a1 >> 0x20\n  6831: u8 [a0 + 0xc] = a1\n  6834: a1 = 0x20\n  6837: a0 = u64 [sp + 0x8]\n  6840: ra = 108, jump @0\n      : @131 [@dyn 54] (gas: 6)\n  6845: i32 a1 = a0 + 0\n  6847: a2 = 0x20\n  6850: a0 = 0\n  6852: ra = 0x6e\n  6855: ecalli 8 // 'seal_return'\n  6857: fallthrough\n      : @132 [@dyn 55] (gas: 13)\n  6858: sp = sp + 0xffffffffffffff80\n  6861: u64 [sp + 0x78] = ra\n  6864: u64 [sp + 0x70] = s0\n  6867: u64 [sp + 0x68] = s1\n  6870: s0 = sp + 0x80\n  6874: sp = sp & 0xffffffffffffffe0\n  6877: u64 [sp + 88] = 0\n  6880: u64 [sp + 80] = 0\n  6883: u64 [sp + 72] = 0\n  6886: u64 [sp + 64] = 0\n  6889: i32 a0 = sp + 0x40\n  6892: ecalli 11 // 'value_transferred'\n  6894: fallthrough\n      : @133 (gas: 8)\n  6895: a0 = u64 [sp + 0x50]\n  6898: a1 = u64 [sp + 0x58]\n  6901: a2 = u64 [sp + 0x48]\n  6904: a3 = u64 [sp + 0x40]\n  6907: a1 = a1 | a2\n  6910: a0 = a0 | a3\n  6913: a0 = a0 | a1\n  6916: jump @139 if a0 != 0\n      : @134 (gas: 2)\n  6920: a0 = i32 [0x20004]\n  6925: jump @139 if a0 <=u 3\n      : @135 (gas: 34)\n  6930: a0 = sp + 0x20\n  6933: ra = 0x70\n  6936: sp = sp + 0xfffffffffffffec0\n  6940: u64 [sp + 0x138] = ra\n  6944: u64 [sp + 0x130] = s0\n  6948: u64 [sp + 0x128] = s1\n  6952: s0 = sp + 0x140\n  6956: sp = sp & 0xffffffffffffffe0\n  6959: u64 [sp + 0x28] = a0\n  6962: u64 [sp + 248] = 0\n  6966: u64 [sp + 240] = 0\n  6970: u64 [sp + 232] = 0\n  6974: u64 [sp + 224] = 0x1\n  6979: u64 [sp + 280] = 0\n  6983: u64 [sp + 272] = 0\n  6987: u64 [sp + 264] = 0\n  6991: u64 [sp + 256] = 0\n  6995: u32 [sp + 288] = 0x20\n  7000: i32 a1 = sp + 0xe0\n  7004: i32 a3 = sp + 0x100\n  7008: i32 a4 = sp + 0x120\n  7012: a2 = 0xffffffffffffffff\n  7015: a0 = 0\n  7017: ecalli 4 // 'get_storage'\n  7019: a0 = u64 [sp + 0x110]\n  7023: u64 [sp + 0x38] = a0\n  7026: a0 = u64 [sp + 0x108]\n  7030: u64 [sp + 0x30] = a0\n  7033: a0 = u64 [sp + 0x100]\n  7037: u64 [sp + 0x40] = a0\n  7040: a0 = 0x40\n  7043: a1 = 0x20\n  7046: ra = 0x9e\n  7050: jump @0\n      : @136 [@dyn 56] (gas: 11)\n  7053: a0 = u64 [sp + 0x38]\n  7056: u64 [sp + 0x18] = a0\n  7059: a0 = u64 [sp + 0x30]\n  7062: u64 [sp + 0x8] = a0\n  7065: a0 = u64 [sp + 0x28]\n  7068: u64 [sp + 0x10] = a0\n  7071: a0 = u64 [sp + 0x20]\n  7074: u64 [sp] = a0\n  7076: a0 = 0x40\n  7079: a1 = 0x20\n  7082: ra = 114, jump @0\n      : @137 [@dyn 57] (gas: 100)\n  7087: a1 = u8 [a0 + 0x11]\n  7090: a2 = u8 [a0 + 0x10]\n  7093: a3 = u8 [a0 + 0x12]\n  7096: a4 = u8 [a0 + 0x13]\n  7099: a1 = a1 << 0x8\n  7102: a1 = a1 | a2\n  7105: a3 = a3 << 0x10\n  7108: a4 = a4 << 0x18\n  7111: a3 = a3 | a4\n  7114: a1 = a1 | a3\n  7117: a2 = u8 [a0 + 0x15]\n  7120: a3 = u8 [a0 + 0x14]\n  7123: a4 = u8 [a0 + 0x16]\n  7126: a5 = u8 [a0 + 0x17]\n  7129: a2 = a2 << 0x8\n  7132: a2 = a2 | a3\n  7135: a4 = a4 << 0x10\n  7138: a5 = a5 << 0x18\n  7141: a4 = a4 | a5\n  7144: a2 = a2 | a4\n  7147: a2 = a2 << 0x20\n  7150: t0 = a2 | a1\n  7153: a2 = u8 [a0 + 0x1]\n  7156: a3 = u8 [a0]\n  7158: a4 = u8 [a0 + 0x2]\n  7161: a5 = u8 [a0 + 0x3]\n  7164: a2 = a2 << 0x8\n  7167: a2 = a2 | a3\n  7170: a4 = a4 << 0x10\n  7173: a5 = a5 << 0x18\n  7176: a4 = a4 | a5\n  7179: a2 = a2 | a4\n  7182: a3 = u8 [a0 + 0x5]\n  7185: a4 = u8 [a0 + 0x4]\n  7188: a5 = u8 [a0 + 0x6]\n  7191: s1 = u8 [a0 + 0x7]\n  7194: a3 = a3 << 0x8\n  7197: a3 = a3 | a4\n  7200: a5 = a5 << 0x10\n  7203: s1 = s1 << 0x18\n  7206: a5 = a5 | s1\n  7209: a3 = a3 | a5\n  7212: a3 = a3 << 0x20\n  7215: a2 = a2 | a3\n  7218: a3 = u8 [a0 + 0x19]\n  7221: a4 = u8 [a0 + 0x18]\n  7224: a5 = u8 [a0 + 0x1a]\n  7227: s1 = u8 [a0 + 0x1b]\n  7230: a3 = a3 << 0x8\n  7233: a3 = a3 | a4\n  7236: a5 = a5 << 0x10\n  7239: s1 = s1 << 0x18\n  7242: a5 = a5 | s1\n  7245: a3 = a3 | a5\n  7248: a4 = u8 [a0 + 0x1d]\n  7251: a5 = u8 [a0 + 0x1c]\n  7254: s1 = u8 [a0 + 0x1e]\n  7257: a1 = u8 [a0 + 0x1f]\n  7260: a4 = a4 << 0x8\n  7263: a4 = a4 | a5\n  7266: s1 = s1 << 0x10\n  7269: a1 = a1 << 0x18\n  7272: a1 = a1 | s1\n  7275: a1 = a1 | a4\n  7278: a1 = a1 << 0x20\n  7281: a3 = a3 | a1\n  7284: a1 = u8 [a0 + 0x9]\n  7287: a4 = u8 [a0 + 0x8]\n  7290: a5 = u8 [a0 + 0xa]\n  7293: s1 = u8 [a0 + 0xb]\n  7296: a1 = a1 << 0x8\n  7299: a1 = a1 | a4\n  7302: a5 = a5 << 0x10\n  7305: s1 = s1 << 0x18\n  7308: a5 = a5 | s1\n  7311: a1 = a1 | a5\n  7314: a4 = u8 [a0 + 0xd]\n  7317: a5 = u8 [a0 + 0xc]\n  7320: s1 = u8 [a0 + 0xe]\n  7323: a0 = u8 [a0 + 0xf]\n  7326: a4 = a4 << 0x8\n  7329: a4 = a4 | a5\n  7332: s1 = s1 << 0x10\n  7335: a0 = a0 << 0x18\n  7338: a0 = a0 | s1\n  7341: a0 = a0 | a4\n  7344: a0 = a0 << 0x20\n  7347: a0 = a0 | a1\n  7350: a1 = reverse a0\n  7352: a0 = reverse a3\n  7354: a2 = reverse a2\n  7356: a3 = reverse t0\n  7358: a2 = a2 | a3\n  7361: a3 = a0 | a1\n  7364: a3 = a3 | a2\n  7367: a3 = a3 >> 0x20\n  7370: a1 = a1 | a2\n  7373: a1 = a1 << 0x20\n  7376: a1 = a1 | a3\n  7379: jump @141 if a1 == 0\n      : @138 (gas: 1)\n  7382: trap\n      : @139 (gas: 3)\n  7383: a0 = 0\n  7385: a1 = 0\n  7387: ra = 116, jump @0\n      : @140 [@dyn 58] (gas: 5)\n  7392: i32 a1 = a0 + 0\n  7394: a0 = 0x1\n  7397: a2 = 0\n  7399: ecalli 8 // 'seal_return'\n  7401: fallthrough\n      : @141 (gas: 13)\n  7402: a1 = u64 [sp + 0x8]\n  7405: a2 = u64 [sp]\n  7407: a1 = a1 | a2\n  7410: a2 = u64 [sp + 0x18]\n  7413: a3 = u64 [sp + 0x10]\n  7416: a2 = a2 | a3\n  7419: a1 = a1 | a2\n  7422: a1 = a1 >u 0\n  7424: u64 [sp + 0x18] = a1\n  7427: i32 s1 = a0 + 0\n  7429: a1 = 0x20\n  7432: a0 = s1\n  7434: ra = 118, jump @0\n      : @142 [@dyn 59] (gas: 36)\n  7439: u8 [a0 + 30] = 0\n  7442: u8 [a0 + 29] = 0\n  7445: u8 [a0 + 28] = 0\n  7448: u8 [a0 + 27] = 0\n  7451: u8 [a0 + 26] = 0\n  7454: u8 [a0 + 25] = 0\n  7457: u8 [a0 + 24] = 0\n  7460: u8 [a0 + 23] = 0\n  7463: u8 [a0 + 22] = 0\n  7466: u8 [a0 + 21] = 0\n  7469: u8 [a0 + 20] = 0\n  7472: u8 [a0 + 19] = 0\n  7475: u8 [a0 + 18] = 0\n  7478: u8 [a0 + 17] = 0\n  7481: u8 [a0 + 16] = 0\n  7484: u8 [a0 + 15] = 0\n  7487: u8 [a0 + 14] = 0\n  7490: u8 [a0 + 13] = 0\n  7493: u8 [a0 + 12] = 0\n  7496: u8 [a0 + 11] = 0\n  7499: u8 [a0 + 10] = 0\n  7502: u8 [a0 + 9] = 0\n  7505: u8 [a0 + 8] = 0\n  7508: u8 [a0 + 7] = 0\n  7511: u8 [a0 + 6] = 0\n  7514: u8 [a0 + 5] = 0\n  7517: u8 [a0 + 4] = 0\n  7520: u8 [a0 + 3] = 0\n  7523: u8 [a0 + 2] = 0\n  7526: u8 [a0 + 1] = 0\n  7529: u8 [a0 + 0] = 0\n  7531: a1 = u64 [sp + 0x18]\n  7534: u8 [a0 + 0x1f] = a1\n  7537: a1 = 0x20\n  7540: a0 = s1\n  7542: ra = 120, jump @0\n      : @143 [@dyn 60] (gas: 6)\n  7547: i32 a1 = a0 + 0\n  7549: a2 = 0x20\n  7552: a0 = 0\n  7554: ra = 0x7a\n  7557: ecalli 8 // 'seal_return'\n  7559: fallthrough\n      : @144 [@dyn 61] (gas: 5)\n  7560: u64 [a0 + 24] = 0\n  7563: u64 [a0 + 16] = 0\n  7566: u64 [a0 + 8] = 0\n  7569: u64 [a0 + 0] = 0\n  7571: ret\n      : @145 (gas: 16)\n  7573: sp = sp + 0xffffffffffffff20\n  7577: u64 [sp + 0xd8] = ra\n  7581: u64 [sp + 0xd0] = s0\n  7585: u64 [sp + 0xc8] = s1\n  7589: s0 = sp + 0xe0\n  7593: sp = sp & 0xfffffffffffffff0\n  7596: a3 = u64 [a1 + 0x18]\n  7599: a2 = u64 [a1 + 0x10]\n  7602: a4 = u64 [a1 + 0x8]\n  7605: u64 [sp + 0x10] = a2\n  7608: u64 [sp + 0x8] = a3\n  7611: a2 = a2 | a3\n  7614: a3 = a4 <u 0x1\n  7617: a3 = 0 if a2 != 0\n  7619: u64 [sp + 0x38] = a0\n  7622: jump @151 if a3 == 0\n      : @146 (gas: 19)\n  7626: s1 = u64 [a1]\n  7628: a0 = s1 + 0x1f\n  7631: a1 = a0 <u s1\n  7634: u64 [sp + 0x18] = a4\n  7637: a1 = a1 + a4\n  7640: a1 = a1 & 0x1\n  7643: a0 = a0 & 0xffffffffffffffe0\n  7646: a2 = a0 + 0x20\n  7649: a0 = a2 <u a0\n  7652: a3 = a1 + a0\n  7655: a4 = a3 <u a1\n  7658: a4 = a0 if a0 == 0\n  7661: u64 [sp + 152] = 0\n  7665: u64 [sp + 0x80] = a2\n  7669: u64 [sp + 0x88] = a3\n  7673: a0 = sp + 0xa0\n  7677: a1 = sp + 0x80\n  7681: u64 [sp + 0x90] = a4\n  7685: ra = 124, jump @50\n      : @147 [@dyn 62] (gas: 15)\n  7690: a0 = u64 [sp + 0xb8]\n  7694: a2 = u64 [sp + 0xb0]\n  7698: a1 = u64 [sp + 0xa8]\n  7702: a3 = u64 [sp + 0xa0]\n  7706: u64 [sp + 0x28] = a0\n  7709: u64 [sp + 0x20] = a1\n  7712: a0 = a0 | a1\n  7715: a1 = a3 | a2\n  7718: a1 = a1 | a0\n  7721: a1 = a1 >> 0x20\n  7724: u64 [sp + 0x30] = a2\n  7727: a0 = a0 | a2\n  7730: a0 = a0 << 0x20\n  7733: a0 = a0 | a1\n  7736: jump @150 if a0 != 0\n      : @148 (gas: 4)\n  7740: i32 a0 = a3 + 0\n  7742: a1 = 0x20\n  7745: u64 [sp] = a3\n  7747: ra = 126, jump @0\n      : @149 [@dyn 63] (gas: 82)\n  7752: a1 = u64 [sp + 0x8]\n  7755: a1 = reverse a1\n  7757: a2 = u64 [sp + 0x10]\n  7760: a2 = reverse a2\n  7762: a3 = u64 [sp + 0x18]\n  7765: a3 = reverse a3\n  7767: a4 = reverse s1\n  7769: a5 = a4 >> 0x38\n  7772: u8 [a0 + 0x1f] = a5\n  7775: a5 = a4 >> 0x30\n  7778: u8 [a0 + 0x1e] = a5\n  7781: a5 = a4 >> 0x28\n  7784: u8 [a0 + 0x1d] = a5\n  7787: a5 = a4 >> 0x20\n  7790: u8 [a0 + 0x1c] = a5\n  7793: a5 = a4 >> 0x18\n  7796: u8 [a0 + 0x1b] = a5\n  7799: a5 = a4 >> 0x10\n  7802: u8 [a0 + 0x1a] = a5\n  7805: a5 = a4 >> 0x8\n  7808: u8 [a0 + 0x19] = a5\n  7811: u8 [a0 + 0x18] = a4\n  7814: u8 [a0 + 0x10] = a3\n  7817: a4 = a3 >> 0x38\n  7820: u8 [a0 + 0x17] = a4\n  7823: a4 = a3 >> 0x30\n  7826: u8 [a0 + 0x16] = a4\n  7829: a4 = a3 >> 0x28\n  7832: u8 [a0 + 0x15] = a4\n  7835: a4 = a3 >> 0x20\n  7838: u8 [a0 + 0x14] = a4\n  7841: a4 = a3 >> 0x18\n  7844: u8 [a0 + 0x13] = a4\n  7847: a4 = a3 >> 0x10\n  7850: u8 [a0 + 0x12] = a4\n  7853: a3 = a3 >> 0x8\n  7856: u8 [a0 + 0x11] = a3\n  7859: u8 [a0 + 0x8] = a2\n  7862: a3 = a2 >> 0x38\n  7865: u8 [a0 + 0xf] = a3\n  7868: a3 = a2 >> 0x30\n  7871: u8 [a0 + 0xe] = a3\n  7874: a3 = a2 >> 0x28\n  7877: u8 [a0 + 0xd] = a3\n  7880: a3 = a2 >> 0x20\n  7883: u8 [a0 + 0xc] = a3\n  7886: a3 = a2 >> 0x18\n  7889: u8 [a0 + 0xb] = a3\n  7892: a3 = a2 >> 0x10\n  7895: u8 [a0 + 0xa] = a3\n  7898: a2 = a2 >> 0x8\n  7901: u8 [a0 + 0x9] = a2\n  7904: u8 [a0] = a1\n  7906: a2 = a1 >> 0x38\n  7909: u8 [a0 + 0x7] = a2\n  7912: a2 = a1 >> 0x30\n  7915: u8 [a0 + 0x6] = a2\n  7918: a2 = a1 >> 0x28\n  7921: u8 [a0 + 0x5] = a2\n  7924: a2 = a1 >> 0x20\n  7927: u8 [a0 + 0x4] = a2\n  7930: a2 = a1 >> 0x18\n  7933: u8 [a0 + 0x3] = a2\n  7936: a2 = a1 >> 0x10\n  7939: u8 [a0 + 0x2] = a2\n  7942: a1 = a1 >> 0x8\n  7945: u8 [a0 + 0x1] = a1\n  7948: a0 = u64 [sp + 0x38]\n  7951: a1 = u64 [sp]\n  7953: u64 [a0] = a1\n  7955: a1 = u64 [sp + 0x28]\n  7958: u64 [a0 + 0x18] = a1\n  7961: a1 = u64 [sp + 0x20]\n  7964: u64 [a0 + 0x8] = a1\n  7967: a1 = u64 [sp + 0x30]\n  7970: u64 [a0 + 0x10] = a1\n  7973: sp = s0 + 0xffffffffffffff20\n  7977: ra = u64 [sp + 0xd8]\n  7981: s0 = u64 [sp + 0xd0]\n  7985: s1 = u64 [sp + 0xc8]\n  7989: sp = sp + 0xe0\n  7993: ret\n      : @150 (gas: 1)\n  7995: trap\n      : @151 (gas: 8)\n  7996: u64 [sp + 112] = 0\n  7999: u64 [sp + 104] = 0\n  8002: u64 [sp + 96] = 0\n  8005: a0 = 0x4e487b7100000000\n  8015: a1 = sp + 0x60\n  8018: u64 [sp + 0x78] = a0\n  8021: a0 = 0\n  8023: ra = 128, jump @8\n      : @152 [@dyn 64] (gas: 7)\n  8029: u64 [sp + 88] = 0\n  8032: u64 [sp + 80] = 0\n  8035: u64 [sp + 64] = 0x41\n  8039: a0 = 0x4\n  8042: a1 = sp + 0x40\n  8045: u64 [sp + 72] = 0\n  8048: ra = 130, jump @8\n      : @153 [@dyn 65] (gas: 3)\n  8054: a1 = 0x24\n  8057: a0 = 0\n  8059: ra = 132, jump @0\n      : @154 [@dyn 66] (gas: 6)\n  8065: i32 a1 = a0 + 0\n  8067: a0 = 0x1\n  8070: a2 = 0x24\n  8073: ra = 0x86\n  8077: ecalli 8 // 'seal_return'\n  8079: fallthrough\n      : @155 [@dyn 67] (gas: 6)\n  8080: u64 [a0 + 24] = 0\n  8083: u64 [a0 + 16] = 0\n  8086: u64 [a0 + 8] = 0\n  8089: a1 = 0x60\n  8092: u64 [a0] = a1\n  8094: ret\n      : @156 (gas: 9)\n  8096: sp = sp + 0xffffffffffffff60\n  8100: u64 [sp + 0x98] = ra\n  8104: u64 [sp + 0x90] = s0\n  8108: u64 [sp + 0x88] = s1\n  8112: s0 = sp + 0xa0\n  8116: sp = sp & 0xffffffffffffffe0\n  8119: s1 = a0\n  8121: ecalli 7 // 'return_data_size'\n  8123: fallthrough\n      : @157 (gas: 1)\n  8124: jump @166 if a0 == 0\n      : @158 (gas: 9)\n  8128: u64 [sp + 0x20] = s1\n  8131: ecalli 7 // 'return_data_size'\n  8133: u64 [sp + 88] = 0\n  8136: u64 [sp + 80] = 0\n  8139: u64 [sp + 0x40] = a0\n  8142: a0 = sp + 0x60\n  8145: a1 = sp + 0x40\n  8148: u64 [sp + 72] = 0\n  8151: ra = 136, jump @145\n      : @159 [@dyn 68] (gas: 9)\n  8157: a0 = u64 [sp + 0x78]\n  8160: u64 [sp + 0x38] = a0\n  8163: a0 = u64 [sp + 0x70]\n  8166: u64 [sp + 0x30] = a0\n  8169: a0 = u64 [sp + 0x68]\n  8172: u64 [sp + 0x28] = a0\n  8175: s1 = u64 [sp + 0x60]\n  8178: ecalli 7 // 'return_data_size'\n  8180: fallthrough\n      : @160 (gas: 20)\n  8181: a1 = s1 + 0x20\n  8184: u64 [sp + 0x18] = s1\n  8187: a2 = a1 <u s1\n  8190: a4 = u64 [sp + 0x28]\n  8193: a3 = a4 + a2\n  8196: a4 = a3 <u a4\n  8199: a4 = a2 if a2 == 0\n  8202: a2 = u64 [sp + 0x30]\n  8205: a4 = a4 + a2\n  8208: a2 = a4 <u a2\n  8211: a5 = u64 [sp + 0x38]\n  8214: a2 = a2 + a5\n  8217: a5 = a1 | a4\n  8220: a2 = a2 | a3\n  8223: a5 = a5 | a2\n  8226: a5 = a5 >> 0x20\n  8229: a2 = a2 | a4\n  8232: a2 = a2 << 0x20\n  8235: a2 = a2 | a5\n  8238: jump @165 if a2 != 0\n      : @161 (gas: 3)\n  8241: s1 = a0\n  8243: a0 = a0 >> 0x20\n  8246: jump @165 if a0 != 0\n      : @162 (gas: 4)\n  8249: i32 a0 = a1 + 0\n  8251: i32 a1 = s1 + 0\n  8253: u64 [sp + 0x10] = a1\n  8256: ra = 138, jump @0\n      : @163 [@dyn 69] (gas: 6)\n  8262: u32 [sp + 0x80] = s1\n  8266: i32 a0 = a0 + 0\n  8268: i32 a1 = sp + 0x80\n  8272: a2 = 0\n  8274: ecalli 6 // 'return_data_copy'\n  8276: fallthrough\n      : @164 (gas: 8)\n  8277: a0 = i32 [sp + 0x80]\n  8281: s1 = u64 [sp + 0x20]\n  8284: a1 = u64 [sp + 0x38]\n  8287: a2 = u64 [sp + 0x30]\n  8290: a3 = u64 [sp + 0x28]\n  8293: a4 = u64 [sp + 0x18]\n  8296: a5 = u64 [sp + 0x10]\n  8299: jump @167 if a0 >=u a5\n      : @165 (gas: 1)\n  8302: trap\n      : @166 (gas: 5)\n  8303: a3 = 0\n  8305: a2 = 0\n  8307: a1 = 0\n  8309: a4 = 0x60\n  8312: fallthrough\n      : @167 (gas: 10)\n  8313: u64 [s1] = a4\n  8315: u64 [s1 + 0x8] = a3\n  8318: u64 [s1 + 0x10] = a2\n  8321: u64 [s1 + 0x18] = a1\n  8324: sp = s0 + 0xffffffffffffff60\n  8328: ra = u64 [sp + 0x98]\n  8332: s0 = u64 [sp + 0x90]\n  8336: s1 = u64 [sp + 0x88]\n  8340: sp = sp + 0xa0\n  8344: ret\n      : @168 [@dyn 70] (gas: 112)\n  8346: a1 = u8 [a0 + 0x19]\n  8349: a2 = u8 [a0 + 0x18]\n  8352: a3 = u8 [a0 + 0x1a]\n  8355: a4 = u8 [a0 + 0x1b]\n  8358: a1 = a1 << 0x8\n  8361: a1 = a1 | a2\n  8364: a3 = a3 << 0x10\n  8367: a4 = a4 << 0x18\n  8370: a3 = a3 | a4\n  8373: a1 = a1 | a3\n  8376: a2 = u8 [a0 + 0x1d]\n  8379: a3 = u8 [a0 + 0x1c]\n  8382: a4 = u8 [a0 + 0x1e]\n  8385: a5 = u8 [a0 + 0x1f]\n  8388: a2 = a2 << 0x8\n  8391: a2 = a2 | a3\n  8394: a4 = a4 << 0x10\n  8397: a5 = a5 << 0x18\n  8400: a4 = a4 | a5\n  8403: a2 = a2 | a4\n  8406: a2 = a2 << 0x20\n  8409: t0 = a2 | a1\n  8412: a2 = u8 [a0 + 0x11]\n  8415: a3 = u8 [a0 + 0x10]\n  8418: a4 = u8 [a0 + 0x12]\n  8421: a5 = u8 [a0 + 0x13]\n  8424: a2 = a2 << 0x8\n  8427: a2 = a2 | a3\n  8430: a4 = a4 << 0x10\n  8433: a5 = a5 << 0x18\n  8436: a4 = a4 | a5\n  8439: a2 = a2 | a4\n  8442: a3 = u8 [a0 + 0x15]\n  8445: a4 = u8 [a0 + 0x14]\n  8448: a5 = u8 [a0 + 0x16]\n  8451: s1 = u8 [a0 + 0x17]\n  8454: a3 = a3 << 0x8\n  8457: a3 = a3 | a4\n  8460: a5 = a5 << 0x10\n  8463: s1 = s1 << 0x18\n  8466: a5 = a5 | s1\n  8469: a3 = a3 | a5\n  8472: a3 = a3 << 0x20\n  8475: a2 = a2 | a3\n  8478: a3 = u8 [a0 + 0x9]\n  8481: a4 = u8 [a0 + 0x8]\n  8484: a5 = u8 [a0 + 0xa]\n  8487: s1 = u8 [a0 + 0xb]\n  8490: a3 = a3 << 0x8\n  8493: a3 = a3 | a4\n  8496: a5 = a5 << 0x10\n  8499: s1 = s1 << 0x18\n  8502: a5 = a5 | s1\n  8505: a3 = a3 | a5\n  8508: a4 = u8 [a0 + 0xd]\n  8511: a5 = u8 [a0 + 0xc]\n  8514: s1 = u8 [a0 + 0xe]\n  8517: a1 = u8 [a0 + 0xf]\n  8520: a4 = a4 << 0x8\n  8523: a4 = a4 | a5\n  8526: s1 = s1 << 0x10\n  8529: a1 = a1 << 0x18\n  8532: a1 = a1 | s1\n  8535: a1 = a1 | a4\n  8538: a1 = a1 << 0x20\n  8541: a3 = a3 | a1\n  8544: a1 = u8 [a0 + 0x1]\n  8547: a4 = u8 [a0]\n  8549: a5 = u8 [a0 + 0x2]\n  8552: s1 = u8 [a0 + 0x3]\n  8555: a1 = a1 << 0x8\n  8558: a1 = a1 | a4\n  8561: a5 = a5 << 0x10\n  8564: s1 = s1 << 0x18\n  8567: a5 = a5 | s1\n  8570: a1 = a1 | a5\n  8573: a4 = u8 [a0 + 0x5]\n  8576: a5 = u8 [a0 + 0x4]\n  8579: s1 = u8 [a0 + 0x6]\n  8582: a0 = u8 [a0 + 0x7]\n  8585: a4 = a4 << 0x8\n  8588: a4 = a4 | a5\n  8591: s1 = s1 << 0x10\n  8594: a0 = a0 << 0x18\n  8597: a0 = a0 | s1\n  8600: a0 = a0 | a4\n  8603: a0 = a0 << 0x20\n  8606: a0 = a0 | a1\n  8609: a4 = reverse a0\n  8611: a5 = reverse a3\n  8613: a3 = reverse a2\n  8615: a1 = reverse t0\n  8617: a0 = a1 + 0x20\n  8620: u64 [sp + 0x60] = a1\n  8623: a1 = a0 <u a1\n  8626: a2 = a3 + a1\n  8629: u64 [sp + 0x68] = a3\n  8632: a3 = a2 <u a3\n  8635: a3 = a1 if a1 == 0\n  8638: a3 = a3 + a5\n  8641: u64 [sp + 0x70] = a5\n  8644: a1 = a3 <u a5\n  8647: u64 [sp + 0x78] = a4\n  8650: a1 = a1 + a4\n  8653: a4 = a0 | a3\n  8656: a1 = a1 | a2\n  8659: a4 = a4 | a1\n  8662: a4 = a4 >> 0x20\n  8665: a1 = a1 | a3\n  8668: a1 = a1 << 0x20\n  8671: a1 = a1 | a4\n  8674: jump @182 if a1 != 0\n      : @169 (gas: 4)\n  8678: i32 s1 = a0 + 0\n  8680: a1 = 0x20\n  8683: a0 = s1\n  8685: ra = 142, jump @0\n      : @170 [@dyn 71] (gas: 53)\n  8691: u8 [a0 + 31] = 0\n  8694: u8 [a0 + 30] = 0\n  8697: u8 [a0 + 29] = 0\n  8700: u8 [a0 + 28] = 0\n  8703: u8 [a0 + 27] = 0\n  8706: u8 [a0 + 26] = 0\n  8709: u8 [a0 + 25] = 0\n  8712: u8 [a0 + 24] = 0\n  8715: u8 [a0 + 23] = 0\n  8718: u8 [a0 + 22] = 0\n  8721: u8 [a0 + 21] = 0\n  8724: u8 [a0 + 20] = 0\n  8727: u8 [a0 + 19] = 0\n  8730: u8 [a0 + 18] = 0\n  8733: u8 [a0 + 17] = 0\n  8736: u8 [a0 + 16] = 0\n  8739: u8 [a0 + 15] = 0\n  8742: u8 [a0 + 14] = 0\n  8745: u8 [a0 + 13] = 0\n  8748: u8 [a0 + 12] = 0\n  8751: u8 [a0 + 11] = 0\n  8754: u8 [a0 + 10] = 0\n  8757: u8 [a0 + 9] = 0\n  8760: u8 [a0 + 8] = 0\n  8763: u8 [a0 + 7] = 0\n  8766: u8 [a0 + 6] = 0\n  8769: u8 [a0 + 5] = 0\n  8772: u8 [a0 + 4] = 0\n  8775: u8 [a0 + 3] = 0x77\n  8779: u8 [a0 + 2] = 0x10\n  8783: u8 [a0 + 1] = 0x24\n  8787: a2 = u64 [sp + 0x60]\n  8790: a1 = a2 + 0x24\n  8793: a2 = a1 <u a2\n  8796: a4 = u64 [sp + 0x68]\n  8799: a3 = a4 + a2\n  8802: a4 = a3 <u a4\n  8805: a4 = a2 if a2 == 0\n  8808: a2 = u64 [sp + 0x70]\n  8811: a4 = a4 + a2\n  8814: a2 = a4 <u a2\n  8817: a5 = u64 [sp + 0x78]\n  8820: a2 = a2 + a5\n  8823: a2 = a2 | a3\n  8826: a3 = a1 | a4\n  8829: a3 = a3 | a2\n  8832: a2 = a2 | a4\n  8835: a4 = 0x55\n  8838: a3 = a3 >> 0x20\n  8841: a2 = a2 << 0x20\n  8844: a2 = a2 | a3\n  8847: u8 [a0] = a4\n  8849: jump @182 if a2 != 0\n      : @171 (gas: 4)\n  8853: u64 [sp + 0x18] = s1\n  8856: i32 a0 = a1 + 0\n  8858: a1 = 0x20\n  8861: ra = 144, jump @0\n      : @172 [@dyn 72] (gas: 80)\n  8867: a1 = u64 [sp + 0x40]\n  8870: a1 = reverse a1\n  8872: a2 = u64 [sp + 0x48]\n  8875: a2 = reverse a2\n  8877: a3 = u64 [sp + 0x50]\n  8880: a3 = reverse a3\n  8882: a4 = u64 [sp + 0x58]\n  8885: a4 = reverse a4\n  8887: a5 = a4 >> 0x38\n  8890: u8 [a0 + 0x1f] = a5\n  8893: a5 = a4 >> 0x30\n  8896: u8 [a0 + 0x1e] = a5\n  8899: a5 = a4 >> 0x28\n  8902: u8 [a0 + 0x1d] = a5\n  8905: a5 = a4 >> 0x20\n  8908: u8 [a0 + 0x1c] = a5\n  8911: a5 = a4 >> 0x18\n  8914: u8 [a0 + 0x1b] = a5\n  8917: a5 = a4 >> 0x10\n  8920: u8 [a0 + 0x1a] = a5\n  8923: a5 = a4 >> 0x8\n  8926: u8 [a0 + 0x19] = a5\n  8929: u8 [a0 + 0x18] = a4\n  8932: u8 [a0 + 0x10] = a3\n  8935: a4 = a3 >> 0x38\n  8938: u8 [a0 + 0x17] = a4\n  8941: a4 = a3 >> 0x30\n  8944: u8 [a0 + 0x16] = a4\n  8947: a4 = a3 >> 0x28\n  8950: u8 [a0 + 0x15] = a4\n  8953: a4 = a3 >> 0x20\n  8956: u8 [a0 + 0x14] = a4\n  8959: a4 = a3 >> 0x18\n  8962: u8 [a0 + 0x13] = a4\n  8965: a4 = a3 >> 0x10\n  8968: u8 [a0 + 0x12] = a4\n  8971: a3 = a3 >> 0x8\n  8974: u8 [a0 + 0x11] = a3\n  8977: u8 [a0 + 0x8] = a2\n  8980: a3 = a2 >> 0x38\n  8983: u8 [a0 + 0xf] = a3\n  8986: a3 = a2 >> 0x30\n  8989: u8 [a0 + 0xe] = a3\n  8992: a3 = a2 >> 0x28\n  8995: u8 [a0 + 0xd] = a3\n  8998: a3 = a2 >> 0x20\n  9001: u8 [a0 + 0xc] = a3\n  9004: a3 = a2 >> 0x18\n  9007: u8 [a0 + 0xb] = a3\n  9010: a3 = a2 >> 0x10\n  9013: u8 [a0 + 0xa] = a3\n  9016: a2 = a2 >> 0x8\n  9019: u8 [a0 + 0x9] = a2\n  9022: u8 [a0] = a1\n  9024: a2 = a1 >> 0x38\n  9027: u8 [a0 + 0x7] = a2\n  9030: a2 = a1 >> 0x30\n  9033: u8 [a0 + 0x6] = a2\n  9036: a2 = a1 >> 0x28\n  9039: u8 [a0 + 0x5] = a2\n  9042: a2 = a1 >> 0x20\n  9045: u8 [a0 + 0x4] = a2\n  9048: a2 = a1 >> 0x18\n  9051: u8 [a0 + 0x3] = a2\n  9054: a2 = a1 >> 0x10\n  9057: u8 [a0 + 0x2] = a2\n  9060: a1 = a1 >> 0x8\n  9063: a4 = u64 [sp + 0x70]\n  9066: a2 = u64 [sp + 0x60]\n  9069: a2 = a2 | a4\n  9072: a3 = u64 [sp + 0x78]\n  9075: a5 = u64 [sp + 0x68]\n  9078: a3 = a3 | a5\n  9081: a2 = a2 | a3\n  9084: a2 = a2 >> 0x20\n  9087: a3 = a3 | a4\n  9090: a3 = a3 << 0x20\n  9093: a2 = a2 | a3\n  9096: u8 [a0 + 0x1] = a1\n  9099: jump @182 if a2 != 0\n      : @173 (gas: 5)\n  9103: s1 = u64 [sp + 0x60]\n  9106: i32 a0 = s1 + 0\n  9108: u64 [sp + 0x58] = a0\n  9111: a1 = 0x20\n  9114: ra = 146, jump @0\n      : @174 [@dyn 73] (gas: 49)\n  9120: u8 [a0 + 31] = 0x24\n  9124: u8 [a0 + 30] = 0\n  9127: u8 [a0 + 29] = 0\n  9130: u8 [a0 + 28] = 0\n  9133: u8 [a0 + 27] = 0\n  9136: u8 [a0 + 26] = 0\n  9139: u8 [a0 + 25] = 0\n  9142: u8 [a0 + 24] = 0\n  9145: u8 [a0 + 23] = 0\n  9148: u8 [a0 + 22] = 0\n  9151: u8 [a0 + 21] = 0\n  9154: u8 [a0 + 20] = 0\n  9157: u8 [a0 + 19] = 0\n  9160: u8 [a0 + 18] = 0\n  9163: u8 [a0 + 17] = 0\n  9166: u8 [a0 + 16] = 0\n  9169: u8 [a0 + 15] = 0\n  9172: u8 [a0 + 14] = 0\n  9175: u8 [a0 + 13] = 0\n  9178: u8 [a0 + 12] = 0\n  9181: u8 [a0 + 11] = 0\n  9184: u8 [a0 + 10] = 0\n  9187: u8 [a0 + 9] = 0\n  9190: u8 [a0 + 8] = 0\n  9193: u8 [a0 + 7] = 0\n  9196: u8 [a0 + 6] = 0\n  9199: u8 [a0 + 5] = 0\n  9202: u8 [a0 + 4] = 0\n  9205: u8 [a0 + 3] = 0\n  9208: u8 [a0 + 2] = 0\n  9211: u8 [a0 + 1] = 0\n  9214: u8 [a0 + 0] = 0\n  9216: a0 = s1 + 0x60\n  9219: u64 [sp + 0x50] = a0\n  9222: a0 = a0 <u s1\n  9225: a1 = u64 [sp + 0x68]\n  9228: a2 = a1 + a0\n  9231: u64 [sp + 0x60] = a2\n  9234: a1 = a2 <u a1\n  9237: a1 = a0 if a0 == 0\n  9240: a0 = u64 [sp + 0x70]\n  9243: s1 = a0 + a1\n  9246: a0 = s1 <u a0\n  9249: a1 = u64 [sp + 0x78]\n  9252: a0 = a0 + a1\n  9255: u64 [sp + 0x78] = a0\n  9258: a0 = 0x40\n  9261: a1 = 0x20\n  9264: ra = 148, jump @0\n      : @175 [@dyn 74] (gas: 70)\n  9270: a1 = u64 [sp + 0x78]\n  9273: a1 = reverse a1\n  9275: a2 = reverse s1\n  9277: a3 = u64 [sp + 0x60]\n  9280: a3 = reverse a3\n  9282: a4 = u64 [sp + 0x50]\n  9285: a4 = reverse a4\n  9287: a5 = a4 >> 0x38\n  9290: u8 [a0 + 0x1f] = a5\n  9293: a5 = a4 >> 0x30\n  9296: u8 [a0 + 0x1e] = a5\n  9299: a5 = a4 >> 0x28\n  9302: u8 [a0 + 0x1d] = a5\n  9305: a5 = a4 >> 0x20\n  9308: u8 [a0 + 0x1c] = a5\n  9311: a5 = a4 >> 0x18\n  9314: u8 [a0 + 0x1b] = a5\n  9317: a5 = a4 >> 0x10\n  9320: u8 [a0 + 0x1a] = a5\n  9323: a5 = a4 >> 0x8\n  9326: u8 [a0 + 0x19] = a5\n  9329: u8 [a0 + 0x18] = a4\n  9332: a4 = a3 >> 0x38\n  9335: u8 [a0 + 0x17] = a4\n  9338: a4 = a3 >> 0x30\n  9341: u8 [a0 + 0x16] = a4\n  9344: a4 = a3 >> 0x28\n  9347: u8 [a0 + 0x15] = a4\n  9350: a4 = a3 >> 0x20\n  9353: u8 [a0 + 0x14] = a4\n  9356: a4 = a3 >> 0x18\n  9359: u8 [a0 + 0x13] = a4\n  9362: a4 = a3 >> 0x10\n  9365: u8 [a0 + 0x12] = a4\n  9368: a4 = a3 >> 0x8\n  9371: u8 [a0 + 0x11] = a4\n  9374: u8 [a0 + 0x10] = a3\n  9377: u8 [a0 + 0x8] = a2\n  9380: a3 = a2 >> 0x38\n  9383: u8 [a0 + 0xf] = a3\n  9386: a3 = a2 >> 0x30\n  9389: u8 [a0 + 0xe] = a3\n  9392: a3 = a2 >> 0x28\n  9395: u8 [a0 + 0xd] = a3\n  9398: a3 = a2 >> 0x20\n  9401: u8 [a0 + 0xc] = a3\n  9404: a3 = a2 >> 0x18\n  9407: u8 [a0 + 0xb] = a3\n  9410: a3 = a2 >> 0x10\n  9413: u8 [a0 + 0xa] = a3\n  9416: a2 = a2 >> 0x8\n  9419: u8 [a0 + 0x9] = a2\n  9422: u8 [a0] = a1\n  9424: a2 = a1 >> 0x38\n  9427: u8 [a0 + 0x7] = a2\n  9430: a2 = a1 >> 0x30\n  9433: u8 [a0 + 0x6] = a2\n  9436: a2 = a1 >> 0x28\n  9439: u8 [a0 + 0x5] = a2\n  9442: a2 = a1 >> 0x20\n  9445: u8 [a0 + 0x4] = a2\n  9448: a2 = a1 >> 0x18\n  9451: u8 [a0 + 0x3] = a2\n  9454: a2 = a1 >> 0x10\n  9457: u8 [a0 + 0x2] = a2\n  9460: a1 = a1 >> 0x8\n  9463: u8 [a0 + 0x1] = a1\n  9466: a1 = 0x20\n  9469: a0 = u64 [sp + 0x58]\n  9472: ra = 150, jump @0\n      : @176 [@dyn 75] (gas: 97)\n  9478: a1 = u8 [a0 + 0x11]\n  9481: a2 = u8 [a0 + 0x10]\n  9484: a3 = u8 [a0 + 0x12]\n  9487: a4 = u8 [a0 + 0x13]\n  9490: a1 = a1 << 0x8\n  9493: a1 = a1 | a2\n  9496: a3 = a3 << 0x10\n  9499: a4 = a4 << 0x18\n  9502: a3 = a3 | a4\n  9505: a1 = a1 | a3\n  9508: a2 = u8 [a0 + 0x15]\n  9511: a3 = u8 [a0 + 0x14]\n  9514: a4 = u8 [a0 + 0x16]\n  9517: a5 = u8 [a0 + 0x17]\n  9520: a2 = a2 << 0x8\n  9523: a2 = a2 | a3\n  9526: a4 = a4 << 0x10\n  9529: a5 = a5 << 0x18\n  9532: a4 = a4 | a5\n  9535: a2 = a2 | a4\n  9538: a2 = a2 << 0x20\n  9541: t0 = a2 | a1\n  9544: a2 = u8 [a0 + 0x1]\n  9547: a3 = u8 [a0]\n  9549: a4 = u8 [a0 + 0x2]\n  9552: a5 = u8 [a0 + 0x3]\n  9555: a2 = a2 << 0x8\n  9558: a2 = a2 | a3\n  9561: a4 = a4 << 0x10\n  9564: a5 = a5 << 0x18\n  9567: a4 = a4 | a5\n  9570: a2 = a2 | a4\n  9573: a3 = u8 [a0 + 0x5]\n  9576: a4 = u8 [a0 + 0x4]\n  9579: a5 = u8 [a0 + 0x6]\n  9582: s1 = u8 [a0 + 0x7]\n  9585: a3 = a3 << 0x8\n  9588: a3 = a3 | a4\n  9591: a5 = a5 << 0x10\n  9594: s1 = s1 << 0x18\n  9597: a5 = a5 | s1\n  9600: a3 = a3 | a5\n  9603: a3 = a3 << 0x20\n  9606: a2 = a2 | a3\n  9609: a3 = u8 [a0 + 0x19]\n  9612: a4 = u8 [a0 + 0x18]\n  9615: a5 = u8 [a0 + 0x1a]\n  9618: s1 = u8 [a0 + 0x1b]\n  9621: a3 = a3 << 0x8\n  9624: a3 = a3 | a4\n  9627: a5 = a5 << 0x10\n  9630: s1 = s1 << 0x18\n  9633: a5 = a5 | s1\n  9636: a3 = a3 | a5\n  9639: a4 = u8 [a0 + 0x1d]\n  9642: a5 = u8 [a0 + 0x1c]\n  9645: s1 = u8 [a0 + 0x1e]\n  9648: a1 = u8 [a0 + 0x1f]\n  9651: a4 = a4 << 0x8\n  9654: a4 = a4 | a5\n  9657: s1 = s1 << 0x10\n  9660: a1 = a1 << 0x18\n  9663: a1 = a1 | s1\n  9666: a1 = a1 | a4\n  9669: a1 = a1 << 0x20\n  9672: a3 = a3 | a1\n  9675: a1 = u8 [a0 + 0x9]\n  9678: a4 = u8 [a0 + 0x8]\n  9681: a5 = u8 [a0 + 0xa]\n  9684: s1 = u8 [a0 + 0xb]\n  9687: a1 = a1 << 0x8\n  9690: a1 = a1 | a4\n  9693: a5 = a5 << 0x10\n  9696: s1 = s1 << 0x18\n  9699: a5 = a5 | s1\n  9702: a1 = a1 | a5\n  9705: a4 = u8 [a0 + 0xd]\n  9708: a5 = u8 [a0 + 0xc]\n  9711: s1 = u8 [a0 + 0xe]\n  9714: a0 = u8 [a0 + 0xf]\n  9717: a4 = a4 << 0x8\n  9720: a4 = a4 | a5\n  9723: s1 = s1 << 0x10\n  9726: a0 = a0 << 0x18\n  9729: a0 = a0 | s1\n  9732: a0 = a0 | a4\n  9735: a0 = a0 << 0x20\n  9738: a0 = a0 | a1\n  9741: a0 = reverse a0\n  9743: u64 [sp + 0x78] = a0\n  9746: s1 = reverse a3\n  9748: a0 = reverse a2\n  9750: u64 [sp + 0x70] = a0\n  9753: a0 = reverse t0\n  9755: u64 [sp + 0x68] = a0\n  9758: ecalli 5 // 'ref_time_left'\n  9760: fallthrough\n      : @177 (gas: 27)\n  9761: a0 = u64 [sp + 0x28]\n  9764: a0 = reverse a0\n  9766: a1 = a0 << 0x20\n  9769: a2 = u64 [sp + 0x30]\n  9772: a2 = reverse a2\n  9774: a2 = a2 >> 0x20\n  9777: a1 = a1 | a2\n  9780: a2 = u64 [sp + 0x38]\n  9783: a2 = reverse a2\n  9785: a3 = a2 << 0x20\n  9788: a0 = a0 >> 0x20\n  9791: a0 = a0 | a3\n  9794: a2 = a2 >> 0x20\n  9797: u64 [sp + 0xa8] = a0\n  9801: u64 [sp + 0xa0] = a1\n  9805: a0 = u64 [sp + 0x70]\n  9808: a1 = u64 [sp + 0x68]\n  9811: a0 = a0 | a1\n  9814: a4 = u64 [sp + 0x78]\n  9817: a1 = s1 | a4\n  9820: a1 = a1 | a0\n  9823: a1 = a1 >> 0x20\n  9826: a0 = a0 | a4\n  9829: a0 = a0 << 0x20\n  9832: a0 = a0 | a1\n  9835: u32 [sp + 0xb0] = a2\n  9839: jump @182 if a0 != 0\n      : @178 (gas: 4)\n  9843: a3 = s1\n  9845: i32 a1 = a3 + 0\n  9847: a0 = u64 [sp + 0x18]\n  9850: ra = 152, jump @0\n      : @179 [@dyn 76] (gas: 4)\n  9856: u64 [sp + 0x78] = a0\n  9859: a0 = 0\n  9861: a1 = 0\n  9863: ra = 154, jump @0\n      : @180 [@dyn 77] (gas: 26)\n  9869: u32 [sp + 192] = 0\n  9873: u64 [sp + 248] = 0xffffffffffffffff\n  9878: u64 [sp + 240] = 0xffffffffffffffff\n  9883: u64 [sp + 232] = 0xffffffffffffffff\n  9888: u64 [sp + 224] = 0xffffffffffffffff\n  9893: a1 = sp + 0xa0\n  9897: a1 = a1 << 0x20\n  9900: t0 = a1 >> 0x20\n  9903: a1 = u64 [sp + 0x78]\n  9906: a1 = a1 << 0x20\n  9909: a1 = a1 >> 0x20\n  9912: a4 = s1 << 0x20\n  9915: a4 = a4 | a1\n  9918: a0 = a0 << 0x20\n  9921: a0 = a0 >> 0x20\n  9924: a1 = sp + 0xc0\n  9928: a1 = a1 << 0x20\n  9931: a5 = a1 | a0\n  9934: i32 a3 = sp + 0xe0\n  9938: a1 = 0xffffffffffffffff\n  9941: a2 = 0xffffffffffffffff\n  9944: a0 = t0\n  9946: ecalli 3 // 'delegate_call'\n  9948: s1 = a0 <u 0x1\n  9951: a0 = sp + 0x80\n  9955: ra = 156, jump @156\n      : @181 [@dyn 78] (gas: 11)\n  9961: a0 = u64 [sp + 0x20]\n  9964: u64 [a0 + 24] = 0\n  9967: u64 [a0 + 16] = 0\n  9970: u64 [a0 + 8] = 0\n  9973: u64 [a0] = s1\n  9975: sp = s0 + 0xfffffffffffffea0\n  9979: ra = u64 [sp + 0x158]\n  9983: s0 = u64 [sp + 0x150]\n  9987: s1 = u64 [sp + 0x148]\n  9991: sp = sp + 0x160\n  9995: ret\n      : @182 (gas: 1)\n  9997: trap\n      : @183 [@dyn 79] (gas: 111)\n  9998: a1 = u8 [a0 + 0x19]\n 10001: a2 = u8 [a0 + 0x18]\n 10004: a3 = u8 [a0 + 0x1a]\n 10007: a4 = u8 [a0 + 0x1b]\n 10010: a1 = a1 << 0x8\n 10013: a1 = a1 | a2\n 10016: a3 = a3 << 0x10\n 10019: a4 = a4 << 0x18\n 10022: a3 = a3 | a4\n 10025: a1 = a1 | a3\n 10028: a2 = u8 [a0 + 0x1d]\n 10031: a3 = u8 [a0 + 0x1c]\n 10034: a4 = u8 [a0 + 0x1e]\n 10037: a5 = u8 [a0 + 0x1f]\n 10040: a2 = a2 << 0x8\n 10043: a2 = a2 | a3\n 10046: a4 = a4 << 0x10\n 10049: a5 = a5 << 0x18\n 10052: a4 = a4 | a5\n 10055: a2 = a2 | a4\n 10058: a2 = a2 << 0x20\n 10061: t0 = a2 | a1\n 10064: a2 = u8 [a0 + 0x11]\n 10067: a3 = u8 [a0 + 0x10]\n 10070: a4 = u8 [a0 + 0x12]\n 10073: a5 = u8 [a0 + 0x13]\n 10076: a2 = a2 << 0x8\n 10079: a2 = a2 | a3\n 10082: a4 = a4 << 0x10\n 10085: a5 = a5 << 0x18\n 10088: a4 = a4 | a5\n 10091: a2 = a2 | a4\n 10094: a3 = u8 [a0 + 0x15]\n 10097: a4 = u8 [a0 + 0x14]\n 10100: a5 = u8 [a0 + 0x16]\n 10103: s1 = u8 [a0 + 0x17]\n 10106: a3 = a3 << 0x8\n 10109: a3 = a3 | a4\n 10112: a5 = a5 << 0x10\n 10115: s1 = s1 << 0x18\n 10118: a5 = a5 | s1\n 10121: a3 = a3 | a5\n 10124: a3 = a3 << 0x20\n 10127: a2 = a2 | a3\n 10130: a3 = u8 [a0 + 0x9]\n 10133: a4 = u8 [a0 + 0x8]\n 10136: a5 = u8 [a0 + 0xa]\n 10139: s1 = u8 [a0 + 0xb]\n 10142: a3 = a3 << 0x8\n 10145: a3 = a3 | a4\n 10148: a5 = a5 << 0x10\n 10151: s1 = s1 << 0x18\n 10154: a5 = a5 | s1\n 10157: a3 = a3 | a5\n 10160: a4 = u8 [a0 + 0xd]\n 10163: a5 = u8 [a0 + 0xc]\n 10166: s1 = u8 [a0 + 0xe]\n 10169: a1 = u8 [a0 + 0xf]\n 10172: a4 = a4 << 0x8\n 10175: a4 = a4 | a5\n 10178: s1 = s1 << 0x10\n 10181: a1 = a1 << 0x18\n 10184: a1 = a1 | s1\n 10187: a1 = a1 | a4\n 10190: a1 = a1 << 0x20\n 10193: a3 = a3 | a1\n 10196: a1 = u8 [a0 + 0x1]\n 10199: a4 = u8 [a0]\n 10201: a5 = u8 [a0 + 0x2]\n 10204: s1 = u8 [a0 + 0x3]\n 10207: a1 = a1 << 0x8\n 10210: a1 = a1 | a4\n 10213: a5 = a5 << 0x10\n 10216: s1 = s1 << 0x18\n 10219: a5 = a5 | s1\n 10222: a1 = a1 | a5\n 10225: a4 = u8 [a0 + 0x5]\n 10228: a5 = u8 [a0 + 0x4]\n 10231: s1 = u8 [a0 + 0x6]\n 10234: a0 = u8 [a0 + 0x7]\n 10237: a4 = a4 << 0x8\n 10240: a4 = a4 | a5\n 10243: s1 = s1 << 0x10\n 10246: a0 = a0 << 0x18\n 10249: a0 = a0 | s1\n 10252: a0 = a0 | a4\n 10255: a0 = a0 << 0x20\n 10258: a0 = a0 | a1\n 10261: s1 = reverse a0\n 10263: a4 = reverse a3\n 10265: a3 = reverse a2\n 10267: a1 = reverse t0\n 10269: a0 = a1 + 0x20\n 10272: u64 [sp + 0x48] = a1\n 10275: a1 = a0 <u a1\n 10278: a2 = a3 + a1\n 10281: u64 [sp + 0x50] = a3\n 10284: a3 = a2 <u a3\n 10287: a3 = a1 if a1 == 0\n 10290: a3 = a3 + a4\n 10293: u64 [sp + 0x58] = a4\n 10296: a1 = a3 <u a4\n 10299: a1 = a1 + s1\n 10302: a4 = a0 | a3\n 10305: a1 = a1 | a2\n 10308: a4 = a4 | a1\n 10311: a4 = a4 >> 0x20\n 10314: a1 = a1 | a3\n 10317: a1 = a1 << 0x20\n 10320: a1 = a1 | a4\n 10323: jump @195 if a1 != 0\n      : @184 (gas: 4)\n 10327: i32 a0 = a0 + 0\n 10329: a1 = 0x20\n 10332: u64 [sp + 0x18] = a0\n 10335: ra = 160, jump @0\n      : @185 [@dyn 80] (gas: 44)\n 10341: u8 [a0 + 3] = 0x8a\n 10346: u8 [a0 + 2] = 0xe0\n 10351: u8 [a0 + 1] = 0x9d\n 10356: u8 [a0 + 0] = 0xd0\n 10360: a3 = u64 [sp + 0x58]\n 10363: a1 = u64 [sp + 0x48]\n 10366: a1 = a1 | a3\n 10369: u64 [sp + 0x20] = s1\n 10372: a2 = u64 [sp + 0x50]\n 10375: a2 = a2 | s1\n 10378: a1 = a1 | a2\n 10381: a1 = a1 >> 0x20\n 10384: a2 = a2 | a3\n 10387: a2 = a2 << 0x20\n 10390: a1 = a1 | a2\n 10393: u8 [a0 + 31] = 0\n 10396: u8 [a0 + 30] = 0\n 10399: u8 [a0 + 29] = 0\n 10402: u8 [a0 + 28] = 0\n 10405: u8 [a0 + 27] = 0\n 10408: u8 [a0 + 26] = 0\n 10411: u8 [a0 + 25] = 0\n 10414: u8 [a0 + 24] = 0\n 10417: u8 [a0 + 23] = 0\n 10420: u8 [a0 + 22] = 0\n 10423: u8 [a0 + 21] = 0\n 10426: u8 [a0 + 20] = 0\n 10429: u8 [a0 + 19] = 0\n 10432: u8 [a0 + 18] = 0\n 10435: u8 [a0 + 17] = 0\n 10438: u8 [a0 + 16] = 0\n 10441: u8 [a0 + 15] = 0\n 10444: u8 [a0 + 14] = 0\n 10447: u8 [a0 + 13] = 0\n 10450: u8 [a0 + 12] = 0\n 10453: u8 [a0 + 11] = 0\n 10456: u8 [a0 + 10] = 0\n 10459: u8 [a0 + 9] = 0\n 10462: u8 [a0 + 8] = 0\n 10465: u8 [a0 + 7] = 0\n 10468: u8 [a0 + 6] = 0\n 10471: u8 [a0 + 5] = 0\n 10474: u8 [a0 + 4] = 0\n 10477: jump @195 if a1 != 0\n      : @186 (gas: 5)\n 10481: s1 = u64 [sp + 0x48]\n 10484: i32 a0 = s1 + 0\n 10486: u64 [sp + 0x10] = a0\n 10489: a1 = 0x20\n 10492: ra = 162, jump @0\n      : @187 [@dyn 81] (gas: 49)\n 10498: u8 [a0 + 31] = 0x4\n 10502: u8 [a0 + 30] = 0\n 10505: u8 [a0 + 29] = 0\n 10508: u8 [a0 + 28] = 0\n 10511: u8 [a0 + 27] = 0\n 10514: u8 [a0 + 26] = 0\n 10517: u8 [a0 + 25] = 0\n 10520: u8 [a0 + 24] = 0\n 10523: u8 [a0 + 23] = 0\n 10526: u8 [a0 + 22] = 0\n 10529: u8 [a0 + 21] = 0\n 10532: u8 [a0 + 20] = 0\n 10535: u8 [a0 + 19] = 0\n 10538: u8 [a0 + 18] = 0\n 10541: u8 [a0 + 17] = 0\n 10544: u8 [a0 + 16] = 0\n 10547: u8 [a0 + 15] = 0\n 10550: u8 [a0 + 14] = 0\n 10553: u8 [a0 + 13] = 0\n 10556: u8 [a0 + 12] = 0\n 10559: u8 [a0 + 11] = 0\n 10562: u8 [a0 + 10] = 0\n 10565: u8 [a0 + 9] = 0\n 10568: u8 [a0 + 8] = 0\n 10571: u8 [a0 + 7] = 0\n 10574: u8 [a0 + 6] = 0\n 10577: u8 [a0 + 5] = 0\n 10580: u8 [a0 + 4] = 0\n 10583: u8 [a0 + 3] = 0\n 10586: u8 [a0 + 2] = 0\n 10589: u8 [a0 + 1] = 0\n 10592: u8 [a0 + 0] = 0\n 10594: a0 = s1 + 0x40\n 10597: u64 [sp + 0x8] = a0\n 10600: a0 = a0 <u s1\n 10603: a1 = u64 [sp + 0x50]\n 10606: a2 = a1 + a0\n 10609: u64 [sp + 0x48] = a2\n 10612: a1 = a2 <u a1\n 10615: a1 = a0 if a0 == 0\n 10618: a0 = u64 [sp + 0x58]\n 10621: s1 = a0 + a1\n 10624: a0 = s1 <u a0\n 10627: a1 = u64 [sp + 0x20]\n 10630: a0 = a0 + a1\n 10633: u64 [sp + 0x58] = a0\n 10636: a0 = 0x40\n 10639: a1 = 0x20\n 10642: ra = 164, jump @0\n      : @188 [@dyn 82] (gas: 70)\n 10648: a1 = u64 [sp + 0x58]\n 10651: a1 = reverse a1\n 10653: a2 = reverse s1\n 10655: a3 = u64 [sp + 0x48]\n 10658: a3 = reverse a3\n 10660: a4 = u64 [sp + 0x8]\n 10663: a4 = reverse a4\n 10665: a5 = a4 >> 0x38\n 10668: u8 [a0 + 0x1f] = a5\n 10671: a5 = a4 >> 0x30\n 10674: u8 [a0 + 0x1e] = a5\n 10677: a5 = a4 >> 0x28\n 10680: u8 [a0 + 0x1d] = a5\n 10683: a5 = a4 >> 0x20\n 10686: u8 [a0 + 0x1c] = a5\n 10689: a5 = a4 >> 0x18\n 10692: u8 [a0 + 0x1b] = a5\n 10695: a5 = a4 >> 0x10\n 10698: u8 [a0 + 0x1a] = a5\n 10701: a5 = a4 >> 0x8\n 10704: u8 [a0 + 0x19] = a5\n 10707: u8 [a0 + 0x18] = a4\n 10710: a4 = a3 >> 0x38\n 10713: u8 [a0 + 0x17] = a4\n 10716: a4 = a3 >> 0x30\n 10719: u8 [a0 + 0x16] = a4\n 10722: a4 = a3 >> 0x28\n 10725: u8 [a0 + 0x15] = a4\n 10728: a4 = a3 >> 0x20\n 10731: u8 [a0 + 0x14] = a4\n 10734: a4 = a3 >> 0x18\n 10737: u8 [a0 + 0x13] = a4\n 10740: a4 = a3 >> 0x10\n 10743: u8 [a0 + 0x12] = a4\n 10746: a4 = a3 >> 0x8\n 10749: u8 [a0 + 0x11] = a4\n 10752: u8 [a0 + 0x10] = a3\n 10755: u8 [a0 + 0x8] = a2\n 10758: a3 = a2 >> 0x38\n 10761: u8 [a0 + 0xf] = a3\n 10764: a3 = a2 >> 0x30\n 10767: u8 [a0 + 0xe] = a3\n 10770: a3 = a2 >> 0x28\n 10773: u8 [a0 + 0xd] = a3\n 10776: a3 = a2 >> 0x20\n 10779: u8 [a0 + 0xc] = a3\n 10782: a3 = a2 >> 0x18\n 10785: u8 [a0 + 0xb] = a3\n 10788: a3 = a2 >> 0x10\n 10791: u8 [a0 + 0xa] = a3\n 10794: a2 = a2 >> 0x8\n 10797: u8 [a0 + 0x9] = a2\n 10800: u8 [a0] = a1\n 10802: a2 = a1 >> 0x38\n 10805: u8 [a0 + 0x7] = a2\n 10808: a2 = a1 >> 0x30\n 10811: u8 [a0 + 0x6] = a2\n 10814: a2 = a1 >> 0x28\n 10817: u8 [a0 + 0x5] = a2\n 10820: a2 = a1 >> 0x20\n 10823: u8 [a0 + 0x4] = a2\n 10826: a2 = a1 >> 0x18\n 10829: u8 [a0 + 0x3] = a2\n 10832: a2 = a1 >> 0x10\n 10835: u8 [a0 + 0x2] = a2\n 10838: a1 = a1 >> 0x8\n 10841: u8 [a0 + 0x1] = a1\n 10844: a1 = 0x20\n 10847: a0 = u64 [sp + 0x10]\n 10850: ra = 166, jump @0\n      : @189 [@dyn 83] (gas: 97)\n 10856: a1 = u8 [a0 + 0x11]\n 10859: a2 = u8 [a0 + 0x10]\n 10862: a3 = u8 [a0 + 0x12]\n 10865: a4 = u8 [a0 + 0x13]\n 10868: a1 = a1 << 0x8\n 10871: a1 = a1 | a2\n 10874: a3 = a3 << 0x10\n 10877: a4 = a4 << 0x18\n 10880: a3 = a3 | a4\n 10883: a1 = a1 | a3\n 10886: a2 = u8 [a0 + 0x15]\n 10889: a3 = u8 [a0 + 0x14]\n 10892: a4 = u8 [a0 + 0x16]\n 10895: a5 = u8 [a0 + 0x17]\n 10898: a2 = a2 << 0x8\n 10901: a2 = a2 | a3\n 10904: a4 = a4 << 0x10\n 10907: a5 = a5 << 0x18\n 10910: a4 = a4 | a5\n 10913: a2 = a2 | a4\n 10916: a2 = a2 << 0x20\n 10919: t0 = a2 | a1\n 10922: a2 = u8 [a0 + 0x1]\n 10925: a3 = u8 [a0]\n 10927: a4 = u8 [a0 + 0x2]\n 10930: a5 = u8 [a0 + 0x3]\n 10933: a2 = a2 << 0x8\n 10936: a2 = a2 | a3\n 10939: a4 = a4 << 0x10\n 10942: a5 = a5 << 0x18\n 10945: a4 = a4 | a5\n 10948: a2 = a2 | a4\n 10951: a3 = u8 [a0 + 0x5]\n 10954: a4 = u8 [a0 + 0x4]\n 10957: a5 = u8 [a0 + 0x6]\n 10960: s1 = u8 [a0 + 0x7]\n 10963: a3 = a3 << 0x8\n 10966: a3 = a3 | a4\n 10969: a5 = a5 << 0x10\n 10972: s1 = s1 << 0x18\n 10975: a5 = a5 | s1\n 10978: a3 = a3 | a5\n 10981: a3 = a3 << 0x20\n 10984: a2 = a2 | a3\n 10987: a3 = u8 [a0 + 0x19]\n 10990: a4 = u8 [a0 + 0x18]\n 10993: a5 = u8 [a0 + 0x1a]\n 10996: s1 = u8 [a0 + 0x1b]\n 10999: a3 = a3 << 0x8\n 11002: a3 = a3 | a4\n 11005: a5 = a5 << 0x10\n 11008: s1 = s1 << 0x18\n 11011: a5 = a5 | s1\n 11014: a3 = a3 | a5\n 11017: a4 = u8 [a0 + 0x1d]\n 11020: a5 = u8 [a0 + 0x1c]\n 11023: s1 = u8 [a0 + 0x1e]\n 11026: a1 = u8 [a0 + 0x1f]\n 11029: a4 = a4 << 0x8\n 11032: a4 = a4 | a5\n 11035: s1 = s1 << 0x10\n 11038: a1 = a1 << 0x18\n 11041: a1 = a1 | s1\n 11044: a1 = a1 | a4\n 11047: a1 = a1 << 0x20\n 11050: a3 = a3 | a1\n 11053: a1 = u8 [a0 + 0x9]\n 11056: a4 = u8 [a0 + 0x8]\n 11059: a5 = u8 [a0 + 0xa]\n 11062: s1 = u8 [a0 + 0xb]\n 11065: a1 = a1 << 0x8\n 11068: a1 = a1 | a4\n 11071: a5 = a5 << 0x10\n 11074: s1 = s1 << 0x18\n 11077: a5 = a5 | s1\n 11080: a1 = a1 | a5\n 11083: a4 = u8 [a0 + 0xd]\n 11086: a5 = u8 [a0 + 0xc]\n 11089: s1 = u8 [a0 + 0xe]\n 11092: a0 = u8 [a0 + 0xf]\n 11095: a4 = a4 << 0x8\n 11098: a4 = a4 | a5\n 11101: s1 = s1 << 0x10\n 11104: a0 = a0 << 0x18\n 11107: a0 = a0 | s1\n 11110: a0 = a0 | a4\n 11113: a0 = a0 << 0x20\n 11116: a0 = a0 | a1\n 11119: a0 = reverse a0\n 11121: u64 [sp + 0x58] = a0\n 11124: s1 = reverse a3\n 11126: a0 = reverse a2\n 11128: u64 [sp + 0x50] = a0\n 11131: a0 = reverse t0\n 11133: u64 [sp + 0x48] = a0\n 11136: ecalli 5 // 'ref_time_left'\n 11138: fallthrough\n      : @190 (gas: 27)\n 11139: a0 = u64 [sp + 0x30]\n 11142: a0 = reverse a0\n 11144: a1 = a0 << 0x20\n 11147: a2 = u64 [sp + 0x38]\n 11150: a2 = reverse a2\n 11152: a2 = a2 >> 0x20\n 11155: a1 = a1 | a2\n 11158: a2 = u64 [sp + 0x40]\n 11161: a2 = reverse a2\n 11163: a3 = a2 << 0x20\n 11166: a0 = a0 >> 0x20\n 11169: a0 = a0 | a3\n 11172: a2 = a2 >> 0x20\n 11175: u64 [sp + 0x88] = a0\n 11179: u64 [sp + 0x80] = a1\n 11183: a0 = u64 [sp + 0x50]\n 11186: a1 = u64 [sp + 0x48]\n 11189: a0 = a0 | a1\n 11192: a4 = u64 [sp + 0x58]\n 11195: a1 = s1 | a4\n 11198: a1 = a1 | a0\n 11201: a1 = a1 >> 0x20\n 11204: a0 = a0 | a4\n 11207: a0 = a0 << 0x20\n 11210: a0 = a0 | a1\n 11213: u32 [sp + 0x90] = a2\n 11217: jump @195 if a0 != 0\n      : @191 (gas: 4)\n 11221: a3 = s1\n 11223: i32 a1 = a3 + 0\n 11225: a0 = u64 [sp + 0x18]\n 11228: ra = 168, jump @0\n      : @192 [@dyn 84] (gas: 4)\n 11234: u64 [sp + 0x58] = a0\n 11237: a0 = 0\n 11239: a1 = 0\n 11241: ra = 170, jump @0\n      : @193 [@dyn 85] (gas: 26)\n 11247: u32 [sp + 160] = 0\n 11251: u64 [sp + 216] = 0xffffffffffffffff\n 11256: u64 [sp + 208] = 0xffffffffffffffff\n 11261: u64 [sp + 200] = 0xffffffffffffffff\n 11266: u64 [sp + 192] = 0xffffffffffffffff\n 11271: a1 = sp + 0x80\n 11275: a1 = a1 << 0x20\n 11278: t0 = a1 >> 0x20\n 11281: a1 = u64 [sp + 0x58]\n 11284: a1 = a1 << 0x20\n 11287: a1 = a1 >> 0x20\n 11290: a4 = s1 << 0x20\n 11293: a4 = a4 | a1\n 11296: a0 = a0 << 0x20\n 11299: a0 = a0 >> 0x20\n 11302: a1 = sp + 0xa0\n 11306: a1 = a1 << 0x20\n 11309: a5 = a1 | a0\n 11312: i32 a3 = sp + 0xc0\n 11316: a1 = 0xffffffffffffffff\n 11319: a2 = 0xffffffffffffffff\n 11322: a0 = t0\n 11324: ecalli 3 // 'delegate_call'\n 11326: s1 = a0 <u 0x1\n 11329: a0 = sp + 0x60\n 11332: ra = 172, jump @156\n      : @194 [@dyn 86] (gas: 11)\n 11338: a0 = u64 [sp + 0x28]\n 11341: u64 [a0 + 24] = 0\n 11344: u64 [a0 + 16] = 0\n 11347: u64 [a0 + 8] = 0\n 11350: u64 [a0] = s1\n 11352: sp = s0 + 0xfffffffffffffec0\n 11356: ra = u64 [sp + 0x138]\n 11360: s0 = u64 [sp + 0x130]\n 11364: s1 = u64 [sp + 0x128]\n 11368: sp = sp + 0x140\n 11372: ret\n      : @195 (gas: 1)\n 11374: trap\n      : @196 [@dyn 87] (gas: 100)\n 11375: a1 = u8 [a0 + 0x11]\n 11378: a2 = u8 [a0 + 0x10]\n 11381: a3 = u8 [a0 + 0x12]\n 11384: a4 = u8 [a0 + 0x13]\n 11387: a1 = a1 << 0x8\n 11390: a1 = a1 | a2\n 11393: a3 = a3 << 0x10\n 11396: a4 = a4 << 0x18\n 11399: a3 = a3 | a4\n 11402: a1 = a1 | a3\n 11405: a2 = u8 [a0 + 0x15]\n 11408: a3 = u8 [a0 + 0x14]\n 11411: a4 = u8 [a0 + 0x16]\n 11414: a5 = u8 [a0 + 0x17]\n 11417: a2 = a2 << 0x8\n 11420: a2 = a2 | a3\n 11423: a4 = a4 << 0x10\n 11426: a5 = a5 << 0x18\n 11429: a4 = a4 | a5\n 11432: a2 = a2 | a4\n 11435: a2 = a2 << 0x20\n 11438: t0 = a2 | a1\n 11441: a2 = u8 [a0 + 0x1]\n 11444: a3 = u8 [a0]\n 11446: a4 = u8 [a0 + 0x2]\n 11449: a5 = u8 [a0 + 0x3]\n 11452: a2 = a2 << 0x8\n 11455: a2 = a2 | a3\n 11458: a4 = a4 << 0x10\n 11461: a5 = a5 << 0x18\n 11464: a4 = a4 | a5\n 11467: a2 = a2 | a4\n 11470: a3 = u8 [a0 + 0x5]\n 11473: a4 = u8 [a0 + 0x4]\n 11476: a5 = u8 [a0 + 0x6]\n 11479: s1 = u8 [a0 + 0x7]\n 11482: a3 = a3 << 0x8\n 11485: a3 = a3 | a4\n 11488: a5 = a5 << 0x10\n 11491: s1 = s1 << 0x18\n 11494: a5 = a5 | s1\n 11497: a3 = a3 | a5\n 11500: a3 = a3 << 0x20\n 11503: a2 = a2 | a3\n 11506: a3 = u8 [a0 + 0x19]\n 11509: a4 = u8 [a0 + 0x18]\n 11512: a5 = u8 [a0 + 0x1a]\n 11515: s1 = u8 [a0 + 0x1b]\n 11518: a3 = a3 << 0x8\n 11521: a3 = a3 | a4\n 11524: a5 = a5 << 0x10\n 11527: s1 = s1 << 0x18\n 11530: a5 = a5 | s1\n 11533: a3 = a3 | a5\n 11536: a4 = u8 [a0 + 0x1d]\n 11539: a5 = u8 [a0 + 0x1c]\n 11542: s1 = u8 [a0 + 0x1e]\n 11545: a1 = u8 [a0 + 0x1f]\n 11548: a4 = a4 << 0x8\n 11551: a4 = a4 | a5\n 11554: s1 = s1 << 0x10\n 11557: a1 = a1 << 0x18\n 11560: a1 = a1 | s1\n 11563: a1 = a1 | a4\n 11566: a1 = a1 << 0x20\n 11569: a3 = a3 | a1\n 11572: a1 = u8 [a0 + 0x9]\n 11575: a4 = u8 [a0 + 0x8]\n 11578: a5 = u8 [a0 + 0xa]\n 11581: s1 = u8 [a0 + 0xb]\n 11584: a1 = a1 << 0x8\n 11587: a1 = a1 | a4\n 11590: a5 = a5 << 0x10\n 11593: s1 = s1 << 0x18\n 11596: a5 = a5 | s1\n 11599: a1 = a1 | a5\n 11602: a4 = u8 [a0 + 0xd]\n 11605: a5 = u8 [a0 + 0xc]\n 11608: s1 = u8 [a0 + 0xe]\n 11611: a0 = u8 [a0 + 0xf]\n 11614: a4 = a4 << 0x8\n 11617: a4 = a4 | a5\n 11620: s1 = s1 << 0x10\n 11623: a0 = a0 << 0x18\n 11626: a0 = a0 | s1\n 11629: a0 = a0 | a4\n 11632: a0 = a0 << 0x20\n 11635: a0 = a0 | a1\n 11638: a1 = reverse a0\n 11640: a0 = reverse a3\n 11642: a2 = reverse a2\n 11644: a3 = reverse t0\n 11646: a2 = a2 | a3\n 11649: a3 = a0 | a1\n 11652: a3 = a3 | a2\n 11655: a3 = a3 >> 0x20\n 11658: a1 = a1 | a2\n 11661: a1 = a1 << 0x20\n 11664: a1 = a1 | a3\n 11667: jump @205 if a1 != 0\n      : @197 (gas: 7)\n 11671: a1 = 0x20004\n 11676: u64 [sp + 0x18] = a1\n 11679: s1 = i32 [0x20004]\n 11684: i32 a0 = a0 + 0\n 11686: u64 [sp + 0x20] = a0\n 11689: a1 = s1\n 11691: ra = 176, jump @0\n      : @198 [@dyn 88] (gas: 27)\n 11697: i32 a0 = a0 + 0\n 11699: a1 = s1\n 11701: a2 = 0\n 11703: ecalli 0 // 'call_data_copy'\n 11704: a0 = u64 [sp + 0x18]\n 11707: s1 = i32 [a0]\n 11709: u64 [sp + 0x18] = s1\n 11712: ecalli 5 // 'ref_time_left'\n 11714: a0 = u64 [sp + 0x28]\n 11717: a0 = reverse a0\n 11719: a1 = a0 << 0x20\n 11722: a2 = u64 [sp + 0x30]\n 11725: a2 = reverse a2\n 11727: a2 = a2 >> 0x20\n 11730: a1 = a1 | a2\n 11733: a2 = u64 [sp + 0x38]\n 11736: a2 = reverse a2\n 11738: a3 = a2 << 0x20\n 11741: a0 = a0 >> 0x20\n 11744: a0 = a0 | a3\n 11747: a2 = a2 >> 0x20\n 11750: u64 [sp + 0x48] = a0\n 11753: u64 [sp + 0x40] = a1\n 11756: u32 [sp + 0x50] = a2\n 11759: a0 = u64 [sp + 0x20]\n 11762: a1 = s1\n 11764: ra = 178, jump @0\n      : @199 [@dyn 89] (gas: 4)\n 11770: s1 = a0\n 11772: a0 = 0\n 11774: a1 = 0\n 11776: ra = 180, jump @0\n      : @200 [@dyn 90] (gas: 26)\n 11782: u32 [sp + 96] = 0\n 11785: u64 [sp + 152] = 0xffffffffffffffff\n 11790: u64 [sp + 144] = 0xffffffffffffffff\n 11795: u64 [sp + 136] = 0xffffffffffffffff\n 11800: u64 [sp + 128] = 0xffffffffffffffff\n 11805: a1 = sp + 0x40\n 11808: a1 = a1 << 0x20\n 11811: t0 = a1 >> 0x20\n 11814: s1 = s1 << 0x20\n 11817: s1 = s1 >> 0x20\n 11820: a4 = u64 [sp + 0x18]\n 11823: a4 = a4 << 0x20\n 11826: a4 = a4 | s1\n 11829: a0 = a0 << 0x20\n 11832: a0 = a0 >> 0x20\n 11835: a1 = sp + 0x60\n 11838: a1 = a1 << 0x20\n 11841: a5 = a1 | a0\n 11844: i32 a3 = sp + 0x80\n 11848: a1 = 0xffffffffffffffff\n 11851: a2 = 0xffffffffffffffff\n 11854: a0 = t0\n 11856: ecalli 3 // 'delegate_call'\n 11858: u64 [sp + 0x38] = a0\n 11861: ecalli 7 // 'return_data_size'\n 11863: fallthrough\n      : @201 (gas: 3)\n 11864: s1 = a0\n 11866: a0 = a0 >> 0x20\n 11869: jump @205 if a0 != 0\n      : @202 (gas: 4)\n 11872: i32 a1 = s1 + 0\n 11874: u64 [sp + 0x30] = a1\n 11877: a0 = u64 [sp + 0x20]\n 11880: ra = 182, jump @0\n      : @203 [@dyn 91] (gas: 6)\n 11886: u32 [sp + 0xa0] = s1\n 11890: i32 a0 = a0 + 0\n 11892: i32 a1 = sp + 0xa0\n 11896: a2 = 0\n 11898: ecalli 6 // 'return_data_copy'\n 11900: fallthrough\n      : @204 (gas: 3)\n 11901: a0 = i32 [sp + 0xa0]\n 11905: a1 = u64 [sp + 0x30]\n 11908: jump @206 if a0 >=u a1\n      : @205 (gas: 1)\n 11911: trap\n      : @206 (gas: 3)\n 11912: s1 = a1\n 11914: a0 = u64 [sp + 0x20]\n 11917: ra = 184, jump @0\n      : @207 [@dyn 92] (gas: 2)\n 11923: a1 = u64 [sp + 0x38]\n 11926: jump @209 if a1 == 0\n      : @208 (gas: 5)\n 11929: i32 a1 = a0 + 0\n 11931: a0 = 0x1\n 11934: a2 = s1\n 11936: ecalli 8 // 'seal_return'\n 11938: fallthrough\n      : @209 (gas: 7)\n 11939: i32 a1 = a0 + 0\n 11941: a0 = 0\n 11943: a2 = s1\n 11945: ecalli 8 // 'seal_return'\n 11947: a0 = 0\n 11949: ra = 0xba\n 11953: jump @10\n      : @210 [export #0: 'call'] (gas: 2)\n 11956: a0 = 0\n 11958: ra = 186, jump @10\n      : @211 [@dyn 93] [export #1: 'deploy'] (gas: 2)\n 11964: a0 = 0x1\n 11967: ra = 188, jump @10\n      : @212 [@dyn 94] (gas: 48)\n 11973: sp = sp + 0xffffffffffffffa0\n 11976: u64 [sp + 0x58] = ra\n 11979: u64 [sp + 0x50] = s0\n 11982: u64 [sp + 0x48] = s1\n 11985: s0 = sp + 0x60\n 11988: sp = sp & 0xfffffffffffffff0\n 11991: a2 = u64 [a1]\n 11993: a3 = u64 [a1 + 0x8]\n 11996: a4 = u64 [a1 + 0x10]\n 11999: a1 = u64 [a1 + 0x18]\n 12002: s1 = a0\n 12004: u64 [sp + 0x18] = a1\n 12007: u64 [sp + 0x10] = a4\n 12010: u64 [sp + 0x8] = a3\n 12013: a0 = sp + 0x20\n 12016: a1 = sp\n 12018: u64 [sp] = a2\n 12020: a2 = u64 [a1]\n 12022: t0 = u64 [a1 + 0x18]\n 12025: a4 = u64 [a1 + 0x8]\n 12028: a1 = u64 [a1 + 0x10]\n 12031: a5 = a2 + 0x1f\n 12034: a2 = a5 <u a2\n 12037: a3 = a4 + a2\n 12040: a4 = a3 <u a4\n 12043: a4 = a2 if a2 == 0\n 12046: a4 = a4 + a1\n 12049: a1 = a4 <u a1\n 12052: a1 = a1 + t0\n 12055: a5 = a5 & 0xffffffffffffffe0\n 12058: u64 [a0] = a5\n 12060: u64 [a0 + 0x8] = a3\n 12063: u64 [a0 + 0x10] = a4\n 12066: u64 [a0 + 0x18] = a1\n 12069: a0 = u64 [sp + 0x30]\n 12072: a1 = u64 [sp + 0x38]\n 12075: a2 = u64 [sp + 0x20]\n 12078: a3 = u64 [sp + 0x28]\n 12081: u64 [s1 + 0x10] = a0\n 12084: u64 [s1 + 0x18] = a1\n 12087: u64 [s1] = a2\n 12089: u64 [s1 + 0x8] = a3\n 12092: sp = s0 + 0xffffffffffffffa0\n 12095: ra = u64 [sp + 0x58]\n 12098: s0 = u64 [sp + 0x50]\n 12101: s1 = u64 [sp + 0x48]\n 12104: sp = sp + 0x60\n 12107: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"increment()": "d09de08a",
							"logicContract()": "cc0e97c9",
							"setLogicContract(address)": "5aa4470f",
							"setValue(uint256)": "55241077",
							"value()": "3fa4f245"
						}
					},
					"irOptimized": "/// @use-src 1:\"homework3/ProxyContract.sol\"\nobject \"ProxyContract_101\" {\n    code {\n        {\n            /// @src 1:60:1346  \"contract ProxyContract {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_ProxyContract()\n            constructor_ProxyContract(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"ProxyContract_101_deployed\"), datasize(\"ProxyContract_101_deployed\"))\n            return(_2, datasize(\"ProxyContract_101_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function cleanup_address(value) -> cleaned\n        {\n            cleaned := cleanup_uint160(value)\n        }\n        function validator_revert_address(value)\n        {\n            if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n        }\n        function abi_decode_address_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_address(value)\n        }\n        function abi_decode_tuple_address_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_ProxyContract() -> ret_param\n        {\n            let programSize := datasize(\"ProxyContract_101\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_tuple_address_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n        }\n        /// @ast-id 38 @src 1:155:240  \"constructor(address _logicContract) {...\"\n        function constructor_ProxyContract(var_logicContract)\n        {\n            /// @src 1:218:232  \"_logicContract\"\n            let _1 := var_logicContract\n            let expr := _1\n            /// @src 1:202:232  \"logicContract = _logicContract\"\n            update_storage_value_offset_address_to_address(0x01, expr)\n        }\n    }\n    /// @use-src 1:\"homework3/ProxyContract.sol\"\n    object \"ProxyContract_101_deployed\" {\n        code {\n            {\n                /// @src 1:60:1346  \"contract ProxyContract {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x3fa4f245 { external_fun_value() }\n                    case 0x55241077 { external_fun_setValue() }\n                    case 0x5aa4470f {\n                        external_fun_setLogicContract()\n                    }\n                    case 0xcc0e97c9 { external_fun_logicContract() }\n                    case 0xd09de08a { external_fun_increment() }\n                    default { }\n                }\n                if iszero(calldatasize()) { stop() }\n                fun()\n                stop()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 26 @src 1:90:107  \"uint public value\"\n            function getter_fun_value() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 1:60:1346  \"contract ProxyContract {...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_value()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_value()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_setValue()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := fun_setValue(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_setLogicContract()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_setLogicContract(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 28 @src 1:114:142  \"address public logicContract\"\n            function getter_fun_logicContract() -> ret\n            {\n                let slot := 1\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 1:60:1346  \"contract ProxyContract {...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_logicContract()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_logicContract()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_increment()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_increment()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function zero_value_for_split_bool() -> ret\n            { ret := 0 }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_bytes(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_bytes(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_split_bytes() -> ret\n            { ret := 96 }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 {\n                    data := zero_value_for_split_bytes()\n                }\n                default {\n                    data := allocate_memory_array_bytes(returndatasize())\n                    returndatacopy(add(data, 0x20), 0, returndatasize())\n                }\n            }\n            /// @ast-id 91 @src 1:619:845  \"function setValue(uint _newValue) public returns (bool) {...\"\n            function fun_setValue(var_newValue) -> var\n            {\n                /// @src 1:669:673  \"bool\"\n                let zero_t_bool := zero_value_for_split_bool()\n                var := zero_t_bool\n                /// @src 1:705:718  \"logicContract\"\n                let _1 := read_from_storage_split_offset_address(0x01)\n                let expr := _1\n                /// @src 1:705:731  \"logicContract.delegatecall\"\n                let expr_80_address := expr\n                /// @src 1:791:800  \"_newValue\"\n                let _2 := var_newValue\n                let expr_1 := _2\n                /// @src 1:746:801  \"abi.encodeWithSignature(\\\"setValue(uint256)\\\", _newValue)\"\n                let expr_85_mpos := allocate_unbounded()\n                let _3 := add(expr_85_mpos, 0x20)\n                mstore(_3, shl(224, 0x55241077))\n                _3 := add(_3, 4)\n                let _4 := abi_encode_uint256(_3, expr_1)\n                mstore(expr_85_mpos, sub(_4, add(expr_85_mpos, 0x20)))\n                finalize_allocation(expr_85_mpos, sub(_4, expr_85_mpos))\n                /// @src 1:705:812  \"logicContract.delegatecall(...\"\n                let _5 := add(expr_85_mpos, 0x20)\n                let _6 := mload(expr_85_mpos)\n                let expr_component := delegatecall(gas(), expr_80_address, _5, _6, 0, 0)\n                pop(extract_returndata())\n                /// @src 1:686:812  \"(bool success, ) = logicContract.delegatecall(...\"\n                let var_success := expr_component\n                /// @src 1:830:837  \"success\"\n                let _7 := var_success\n                let expr_2 := _7\n                /// @src 1:823:837  \"return success\"\n                var := expr_2\n                leave\n            }\n            /// @src 1:60:1346  \"contract ProxyContract {...\"\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            /// @ast-id 52 @src 1:293:399  \"function setLogicContract(address _logicContract) public {...\"\n            function fun_setLogicContract(var_logicContract)\n            {\n                /// @src 1:377:391  \"_logicContract\"\n                let _1 := var_logicContract\n                let expr := _1\n                /// @src 1:361:391  \"logicContract = _logicContract\"\n                update_storage_value_offset_address_to_address(0x01, expr)\n            }\n            /// @ast-id 70 @src 1:411:607  \"function increment() public returns (bool) {...\"\n            function fun_increment() -> var_\n            {\n                /// @src 1:448:452  \"bool\"\n                let zero_bool := zero_value_for_split_bool()\n                var_ := zero_bool\n                /// @src 1:484:497  \"logicContract\"\n                let _1 := read_from_storage_split_offset_address(0x01)\n                let expr := _1\n                /// @src 1:484:510  \"logicContract.delegatecall\"\n                let expr_address := expr\n                /// @src 1:525:563  \"abi.encodeWithSignature(\\\"increment()\\\")\"\n                let expr_mpos := allocate_unbounded()\n                let _2 := add(expr_mpos, 0x20)\n                mstore(_2, shl(225, 0x684ef045))\n                _2 := add(_2, 4)\n                let _3 := abi_encode_tuple(_2)\n                mstore(expr_mpos, sub(_3, add(expr_mpos, 0x20)))\n                finalize_allocation(expr_mpos, sub(_3, expr_mpos))\n                /// @src 1:484:574  \"logicContract.delegatecall(...\"\n                let _4 := add(expr_mpos, 0x20)\n                let _5 := mload(expr_mpos)\n                let expr_component := delegatecall(gas(), expr_address, _4, _5, 0, 0)\n                pop(extract_returndata())\n                /// @src 1:465:574  \"(bool success, ) = logicContract.delegatecall(...\"\n                let var_success := expr_component\n                /// @src 1:592:599  \"success\"\n                let _6 := var_success\n                let expr_1 := _6\n                /// @src 1:585:599  \"return success\"\n                var_ := expr_1\n                leave\n            }\n            /// @ast-id 100 @src 1:859:1343  \"fallback() external payable {...\"\n            function fun()\n            {\n                /// @src 1:914:927  \"logicContract\"\n                let _1 := read_from_storage_split_offset_address(0x01)\n                let expr := _1\n                /// @src 1:898:927  \"address _impl = logicContract\"\n                let var_impl := expr\n                /// @src 1:938:1336  \"assembly {...\"\n                let usr$ptr := mload(0x40)\n                calldatacopy(usr$ptr, 0, calldatasize())\n                let usr$result := delegatecall(gas(), var_impl, usr$ptr, calldatasize(), 0, 0)\n                let usr$size := returndatasize()\n                returndatacopy(usr$ptr, 0, usr$size)\n                switch usr$result\n                case 0 { revert(usr$ptr, usr$size) }\n                default { return(usr$ptr, usr$size) }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220488e1e08630c0384f450e9b44387fe6f234b5e543633c3640c757395257fbd6064736f6c634300081c0033\"\n    }\n}\n",
					"hash": "c2525d46db4f6c5030ac0b685430c1e2fcd7b0bea95850a5f2b6b1b74d00fb42",
					"factoryDependencies": {}
				}
			},
			"homework3/TestContract.sol": {
				"TestContract": {
					"abi": [
						{
							"inputs": [],
							"name": "testDelegateCall",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"testDelegateCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"homework3/TestContract.sol\":\"TestContract\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"homework3/LogicContract.sol\":{\"keccak256\":\"0x1542228b5052b66b30fcfb7477ddc1db6427e24fd5e62dddc8b58249914fc962\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac6be642d4cf23c89a86d8bebbe3d5e23836f077529282348a3fed1757b90b\",\"dweb:/ipfs/Qmdv3eMJS1RxMc2vCKUqTtNdRoy27QqaNcZhC24SohTmU4\"]},\"homework3/ProxyContract.sol\":{\"keccak256\":\"0x61cdf475e31f667907ce3535dab2639d39ba538eed70c0592ad2295b838c9e60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63237ff84a58612c96245fde478844e2053bec4c3630fc2ddf112c69ef2bb5dc\",\"dweb:/ipfs/QmemoUiSBJuViSQhRRydmLDnwBv1BsiAYHfPuqrhVK7Av4\"]},\"homework3/TestContract.sol\":{\"keccak256\":\"0x90d58a262ad339e5b825c8a6149bfedf949062bf294037b68e4e01396e95381a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d36cdc9d6095c240b312cef63f1bf7d33394d699b4583a79c872fa20f9b98db\",\"dweb:/ipfs/QmUqaMRvy3GPxh1S8Pt81Vk8XGyvCUh5rBJ2ju4nTxwFeU\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 8286\n// Code size = 25854 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 3 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 11 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 9 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 1 // 'call_data_copy'\n   849: fallthrough\n      : @24 (gas: 2)\n   850: a1 = i32 [0x20008]\n   855: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   858: a0 = 0x30010\n   863: i32 a0 = a0 + 0\n   865: ecalli 10 // 'set_immutable_data'\n   867: fallthrough\n      : @26 (gas: 3)\n   868: a0 = s1\n   870: a1 = 0\n   872: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   877: i32 a1 = a0 + 0\n   879: a0 = 0\n   881: a2 = 0\n   883: ra = 0x12\n   886: ecalli 9 // 'seal_return'\n   888: fallthrough\n      : @28 [@dyn 9] (gas: 8)\n   889: sp = sp + 0xffffffffffffffc0\n   892: u64 [sp + 0x38] = ra\n   895: u64 [sp + 0x30] = s0\n   898: s0 = sp + 0x40\n   901: sp = sp & 0xffffffffffffffe0\n   904: a0 = 0x40\n   907: a1 = 0x20\n   910: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 34)\n   915: u8 [a0 + 31] = 0x80\n   920: u8 [a0 + 30] = 0\n   923: u8 [a0 + 29] = 0\n   926: u8 [a0 + 28] = 0\n   929: u8 [a0 + 27] = 0\n   932: u8 [a0 + 26] = 0\n   935: u8 [a0 + 25] = 0\n   938: u8 [a0 + 24] = 0\n   941: u8 [a0 + 23] = 0\n   944: u8 [a0 + 22] = 0\n   947: u8 [a0 + 21] = 0\n   950: u8 [a0 + 20] = 0\n   953: u8 [a0 + 19] = 0\n   956: u8 [a0 + 18] = 0\n   959: u8 [a0 + 17] = 0\n   962: u8 [a0 + 16] = 0\n   965: u8 [a0 + 15] = 0\n   968: u8 [a0 + 14] = 0\n   971: u8 [a0 + 13] = 0\n   974: u8 [a0 + 12] = 0\n   977: u8 [a0 + 11] = 0\n   980: u8 [a0 + 10] = 0\n   983: u8 [a0 + 9] = 0\n   986: u8 [a0 + 8] = 0\n   989: u8 [a0 + 7] = 0\n   992: u8 [a0 + 3] = 0\n   995: u8 [a0 + 2] = 0\n   998: u8 [a0 + 1] = 0\n  1001: u8 [a0 + 0] = 0\n  1003: a1 = i32 [0x20004]\n  1008: u8 [a0 + 6] = 0\n  1011: u8 [a0 + 5] = 0\n  1014: u8 [a0 + 4] = 0\n  1017: jump @33 if a1 <u 4\n      : @30 (gas: 4)\n  1021: i32 a0 = sp + 0\n  1023: a1 = 0\n  1025: ecalli 2 // 'call_data_load'\n  1027: fallthrough\n      : @31 (gas: 4)\n  1028: a0 = u32 [sp + 0x1c]\n  1031: a0 = a0 << 0x20\n  1034: a1 = 0xe1e3634100000000\n  1044: jump @33 if a0 != a1\n      : @32 (gas: 13)\n  1047: ra = 0x16\n  1050: sp = sp + 0xffffffffffffffc0\n  1053: u64 [sp + 0x38] = ra\n  1056: u64 [sp + 0x30] = s0\n  1059: s0 = sp + 0x40\n  1062: sp = sp & 0xffffffffffffffe0\n  1065: u64 [sp + 24] = 0\n  1068: u64 [sp + 16] = 0\n  1071: u64 [sp + 8] = 0\n  1074: u64 [sp + 0] = 0\n  1076: i32 a0 = sp + 0\n  1078: ecalli 11 // 'value_transferred'\n  1080: jump @41\n      : @33 [@dyn 11] (gas: 7)\n  1083: ra = 0x18\n  1086: sp = sp + 0xfffffffffffffff8\n  1089: u64 [sp] = ra\n  1091: a0 = 0\n  1093: a1 = 0\n  1095: ra = 0x3a\n  1098: jump @0\n      : @34 [@dyn 12] (gas: 7)\n  1101: sp = sp + 0xfffffffffffffff0\n  1104: u64 [sp + 0x8] = ra\n  1107: u64 [sp] = s0\n  1109: s0 = a0\n  1111: a0 = 0x40\n  1114: a1 = 0x20\n  1117: ra = 26, jump @0\n      : @35 [@dyn 13] (gas: 100)\n  1122: a1 = u8 [a0 + 0x1]\n  1125: a2 = u8 [a0]\n  1127: a3 = u8 [a0 + 0x2]\n  1130: a4 = u8 [a0 + 0x3]\n  1133: a1 = a1 << 0x8\n  1136: a1 = a1 | a2\n  1139: a3 = a3 << 0x10\n  1142: a4 = a4 << 0x18\n  1145: a3 = a3 | a4\n  1148: a1 = a1 | a3\n  1151: a2 = u8 [a0 + 0x5]\n  1154: a3 = u8 [a0 + 0x4]\n  1157: a4 = u8 [a0 + 0x6]\n  1160: a5 = u8 [a0 + 0x7]\n  1163: a2 = a2 << 0x8\n  1166: a2 = a2 | a3\n  1169: a4 = a4 << 0x10\n  1172: a5 = a5 << 0x18\n  1175: a4 = a4 | a5\n  1178: a2 = a2 | a4\n  1181: a2 = a2 << 0x20\n  1184: t0 = a2 | a1\n  1187: a2 = u8 [a0 + 0x9]\n  1190: a3 = u8 [a0 + 0x8]\n  1193: a4 = u8 [a0 + 0xa]\n  1196: a5 = u8 [a0 + 0xb]\n  1199: a2 = a2 << 0x8\n  1202: a2 = a2 | a3\n  1205: a4 = a4 << 0x10\n  1208: a5 = a5 << 0x18\n  1211: a4 = a4 | a5\n  1214: a2 = a2 | a4\n  1217: a3 = u8 [a0 + 0xd]\n  1220: a4 = u8 [a0 + 0xc]\n  1223: a5 = u8 [a0 + 0xe]\n  1226: a1 = u8 [a0 + 0xf]\n  1229: a3 = a3 << 0x8\n  1232: a3 = a3 | a4\n  1235: a5 = a5 << 0x10\n  1238: a1 = a1 << 0x18\n  1241: a1 = a1 | a5\n  1244: a1 = a1 | a3\n  1247: a1 = a1 << 0x20\n  1250: t1 = a1 | a2\n  1253: a1 = u8 [a0 + 0x11]\n  1256: a3 = u8 [a0 + 0x10]\n  1259: a4 = u8 [a0 + 0x12]\n  1262: a5 = u8 [a0 + 0x13]\n  1265: a1 = a1 << 0x8\n  1268: a1 = a1 | a3\n  1271: a4 = a4 << 0x10\n  1274: a5 = a5 << 0x18\n  1277: a4 = a4 | a5\n  1280: a1 = a1 | a4\n  1283: a3 = u8 [a0 + 0x15]\n  1286: a4 = u8 [a0 + 0x14]\n  1289: a5 = u8 [a0 + 0x16]\n  1292: a2 = u8 [a0 + 0x17]\n  1295: a3 = a3 << 0x8\n  1298: a3 = a3 | a4\n  1301: a5 = a5 << 0x10\n  1304: a2 = a2 << 0x18\n  1307: a2 = a2 | a5\n  1310: a2 = a2 | a3\n  1313: a2 = a2 << 0x20\n  1316: a3 = a2 | a1\n  1319: a1 = u8 [a0 + 0x19]\n  1322: a2 = u8 [a0 + 0x18]\n  1325: a4 = u8 [a0 + 0x1a]\n  1328: a5 = u8 [a0 + 0x1b]\n  1331: a1 = a1 << 0x8\n  1334: a1 = a1 | a2\n  1337: a4 = a4 << 0x10\n  1340: a5 = a5 << 0x18\n  1343: a4 = a4 | a5\n  1346: a1 = a1 | a4\n  1349: a2 = u8 [a0 + 0x1d]\n  1352: a4 = u8 [a0 + 0x1c]\n  1355: a5 = u8 [a0 + 0x1e]\n  1358: a0 = u8 [a0 + 0x1f]\n  1361: a2 = a2 << 0x8\n  1364: a2 = a2 | a4\n  1367: a5 = a5 << 0x10\n  1370: a0 = a0 << 0x18\n  1373: a0 = a0 | a5\n  1376: a0 = a0 | a2\n  1379: a0 = a0 << 0x20\n  1382: a0 = a0 | a1\n  1385: a0 = reverse a0\n  1387: a1 = reverse a3\n  1389: a2 = reverse t1\n  1391: a3 = reverse t0\n  1393: u64 [s0 + 0x18] = a3\n  1396: u64 [s0 + 0x10] = a2\n  1399: u64 [s0 + 0x8] = a1\n  1402: u64 [s0] = a0\n  1404: ra = u64 [sp + 0x8]\n  1407: s0 = u64 [sp]\n  1409: sp = sp + 0x10\n  1412: ret\n      : @36 (gas: 19)\n  1414: t0 = u64 [a0 + 0x18]\n  1417: t1 = u64 [a1 + 0x18]\n  1420: a4 = u64 [a0 + 0x10]\n  1423: a5 = u64 [a0 + 0x8]\n  1426: a2 = u64 [a1 + 0x8]\n  1429: t2 = u64 [a0]\n  1431: a3 = u64 [a1]\n  1433: a1 = u64 [a1 + 0x10]\n  1436: a0 = a2 ^ a5\n  1439: a2 = a2 <u a5\n  1442: a3 = a3 <u t2\n  1445: a3 = a2 if a0 != 0\n  1448: a0 = a1 - a4\n  1451: a0 = a0 <u a3\n  1454: a1 = a1 <u a4\n  1457: a2 = t1 - t0\n  1460: a2 = a2 - a1\n  1463: a2 = a2 - a0\n  1466: jump @38 if a2 <s 0\n      : @37 (gas: 1)\n  1469: jump @436\n      : @38 (gas: 5)\n  1472: sp = sp + 0xfffffffffffffff8\n  1475: u64 [sp] = ra\n  1477: a0 = 0\n  1479: a1 = 0\n  1481: ra = 28, jump @0\n      : @39 [@dyn 14] (gas: 6)\n  1486: i32 a1 = a0 + 0\n  1488: a0 = 0x1\n  1491: a2 = 0\n  1493: ra = 0x1e\n  1496: ecalli 9 // 'seal_return'\n  1498: fallthrough\n      : @40 [@dyn 15] (gas: 9)\n  1499: a2 = u64 [a1 + 0x18]\n  1502: a3 = u64 [a1 + 0x10]\n  1505: a4 = u64 [a1 + 0x8]\n  1508: a1 = u64 [a1]\n  1510: u64 [a0 + 0x18] = a2\n  1513: u64 [a0 + 0x10] = a3\n  1516: u64 [a0 + 0x8] = a4\n  1519: u64 [a0] = a1\n  1521: ret\n      : @41 (gas: 8)\n  1523: a0 = u64 [sp + 0x10]\n  1526: a1 = u64 [sp + 0x18]\n  1529: a2 = u64 [sp + 0x8]\n  1532: a3 = u64 [sp]\n  1534: a1 = a1 | a2\n  1537: a0 = a0 | a3\n  1540: a0 = a0 | a1\n  1543: jump @47 if a0 != 0\n      : @42 (gas: 2)\n  1547: a0 = i32 [0x20004]\n  1552: jump @47 if a0 <=u 3\n      : @43 (gas: 12)\n  1557: ra = 0x20\n  1560: sp = sp + 0xfffffffffffff808\n  1564: u64 [sp + 0x7f0] = ra\n  1568: u64 [sp + 0x7e8] = s0\n  1572: u64 [sp + 0x7e0] = s1\n  1576: s0 = sp + 0x7f8\n  1580: sp = sp + 0xfffffffffffffbd8\n  1584: sp = sp & 0xffffffffffffffe0\n  1587: a0 = 0x40\n  1590: a1 = 0x20\n  1593: ra = 0x6c\n  1596: jump @0\n      : @44 [@dyn 16] (gas: 3)\n  1599: a0 = 0x40\n  1602: a1 = 0x20\n  1605: ra = 34, jump @0\n      : @45 [@dyn 17] (gas: 100)\n  1610: a1 = u8 [a0 + 0x11]\n  1613: a2 = u8 [a0 + 0x10]\n  1616: a3 = u8 [a0 + 0x12]\n  1619: a4 = u8 [a0 + 0x13]\n  1622: a1 = a1 << 0x8\n  1625: a1 = a1 | a2\n  1628: a3 = a3 << 0x10\n  1631: a4 = a4 << 0x18\n  1634: a3 = a3 | a4\n  1637: a1 = a1 | a3\n  1640: a2 = u8 [a0 + 0x15]\n  1643: a3 = u8 [a0 + 0x14]\n  1646: a4 = u8 [a0 + 0x16]\n  1649: a5 = u8 [a0 + 0x17]\n  1652: a2 = a2 << 0x8\n  1655: a2 = a2 | a3\n  1658: a4 = a4 << 0x10\n  1661: a5 = a5 << 0x18\n  1664: a4 = a4 | a5\n  1667: a2 = a2 | a4\n  1670: a2 = a2 << 0x20\n  1673: t0 = a2 | a1\n  1676: a2 = u8 [a0 + 0x1]\n  1679: a3 = u8 [a0]\n  1681: a4 = u8 [a0 + 0x2]\n  1684: a5 = u8 [a0 + 0x3]\n  1687: a2 = a2 << 0x8\n  1690: a2 = a2 | a3\n  1693: a4 = a4 << 0x10\n  1696: a5 = a5 << 0x18\n  1699: a4 = a4 | a5\n  1702: a2 = a2 | a4\n  1705: a3 = u8 [a0 + 0x5]\n  1708: a4 = u8 [a0 + 0x4]\n  1711: a5 = u8 [a0 + 0x6]\n  1714: a1 = u8 [a0 + 0x7]\n  1717: a3 = a3 << 0x8\n  1720: a3 = a3 | a4\n  1723: a5 = a5 << 0x10\n  1726: a1 = a1 << 0x18\n  1729: a1 = a1 | a5\n  1732: a1 = a1 | a3\n  1735: a1 = a1 << 0x20\n  1738: t1 = a1 | a2\n  1741: a1 = u8 [a0 + 0x19]\n  1744: a3 = u8 [a0 + 0x18]\n  1747: a4 = u8 [a0 + 0x1a]\n  1750: a5 = u8 [a0 + 0x1b]\n  1753: a1 = a1 << 0x8\n  1756: a1 = a1 | a3\n  1759: a4 = a4 << 0x10\n  1762: a5 = a5 << 0x18\n  1765: a4 = a4 | a5\n  1768: a1 = a1 | a4\n  1771: a3 = u8 [a0 + 0x1d]\n  1774: a4 = u8 [a0 + 0x1c]\n  1777: a5 = u8 [a0 + 0x1e]\n  1780: a2 = u8 [a0 + 0x1f]\n  1783: a3 = a3 << 0x8\n  1786: a3 = a3 | a4\n  1789: a5 = a5 << 0x10\n  1792: a2 = a2 << 0x18\n  1795: a2 = a2 | a5\n  1798: a2 = a2 | a3\n  1801: a2 = a2 << 0x20\n  1804: a3 = a2 | a1\n  1807: a1 = u8 [a0 + 0x9]\n  1810: a2 = u8 [a0 + 0x8]\n  1813: a4 = u8 [a0 + 0xa]\n  1816: a5 = u8 [a0 + 0xb]\n  1819: a1 = a1 << 0x8\n  1822: a1 = a1 | a2\n  1825: a4 = a4 << 0x10\n  1828: a5 = a5 << 0x18\n  1831: a4 = a4 | a5\n  1834: a1 = a1 | a4\n  1837: a2 = u8 [a0 + 0xd]\n  1840: a4 = u8 [a0 + 0xc]\n  1843: a5 = u8 [a0 + 0xe]\n  1846: a0 = u8 [a0 + 0xf]\n  1849: a2 = a2 << 0x8\n  1852: a2 = a2 | a4\n  1855: a5 = a5 << 0x10\n  1858: a0 = a0 << 0x18\n  1861: a0 = a0 | a5\n  1864: a0 = a0 | a2\n  1867: a0 = a0 << 0x20\n  1870: a0 = a0 | a1\n  1873: a1 = reverse a0\n  1875: a0 = reverse a3\n  1877: a2 = reverse t1\n  1879: a3 = reverse t0\n  1881: a2 = a2 | a3\n  1884: a3 = a0 | a1\n  1887: a3 = a3 | a2\n  1890: a3 = a3 >> 0x20\n  1893: a1 = a1 | a2\n  1896: a1 = a1 << 0x20\n  1899: a1 = a1 | a3\n  1902: jump @49 if a1 == 0\n      : @46 (gas: 1)\n  1905: trap\n      : @47 (gas: 3)\n  1906: a0 = 0\n  1908: a1 = 0\n  1910: ra = 36, jump @0\n      : @48 [@dyn 18] (gas: 7)\n  1915: i32 a1 = a0 + 0\n  1917: a0 = 0x1\n  1920: a2 = 0\n  1922: ecalli 9 // 'seal_return'\n  1924: i32 a0 = a0 + 0\n  1926: ra = 0x26\n  1929: jump @0\n      : @49 (gas: 2)\n  1932: i32 a0 = a0 + 0\n  1934: ra = 38, jump @0\n      : @50 [@dyn 19] (gas: 6)\n  1939: i32 a1 = a0 + 0\n  1941: a0 = 0\n  1943: a2 = 0\n  1945: ra = 0x28\n  1948: ecalli 9 // 'seal_return'\n  1950: fallthrough\n      : @51 [@dyn 20] (gas: 13)\n  1951: sp = sp + 0xffffffffffffffb0\n  1954: u64 [sp + 0x48] = ra\n  1957: u64 [sp + 0x40] = s0\n  1960: s0 = sp + 0x50\n  1963: sp = sp & 0xfffffffffffffff0\n  1966: u64 [sp + 48] = 0\n  1969: u64 [sp + 40] = 0\n  1972: u64 [sp + 32] = 0\n  1975: a0 = 0x4e487b7100000000\n  1985: a1 = sp + 0x20\n  1988: u64 [sp + 0x38] = a0\n  1991: a0 = 0\n  1993: ra = 42, jump @8\n      : @52 [@dyn 21] (gas: 7)\n  1998: u64 [sp + 24] = 0\n  2001: u64 [sp + 16] = 0\n  2004: u64 [sp + 0] = 0x41\n  2007: a0 = 0x4\n  2010: a1 = sp\n  2012: u64 [sp + 8] = 0\n  2015: ra = 44, jump @8\n      : @53 [@dyn 22] (gas: 3)\n  2020: a1 = 0x24\n  2023: a0 = 0\n  2025: ra = 46, jump @0\n      : @54 [@dyn 23] (gas: 6)\n  2030: i32 a1 = a0 + 0\n  2032: a0 = 0x1\n  2035: a2 = 0x24\n  2038: ra = 0x30\n  2041: ecalli 9 // 'seal_return'\n  2043: fallthrough\n      : @55 [@dyn 24] (gas: 9)\n  2044: sp = sp + 0xffffffffffffffc0\n  2047: u64 [sp + 0x38] = ra\n  2050: u64 [sp + 0x30] = s0\n  2053: u64 [sp + 0x28] = s1\n  2056: s0 = sp + 0x40\n  2059: sp = sp & 0xffffffffffffffe0\n  2062: a0 = 0x40\n  2065: a1 = 0x20\n  2068: ra = 50, jump @0\n      : @56 [@dyn 25] (gas: 97)\n  2073: a1 = u8 [a0 + 0x11]\n  2076: a2 = u8 [a0 + 0x10]\n  2079: a3 = u8 [a0 + 0x12]\n  2082: a4 = u8 [a0 + 0x13]\n  2085: a1 = a1 << 0x8\n  2088: a1 = a1 | a2\n  2091: a3 = a3 << 0x10\n  2094: a4 = a4 << 0x18\n  2097: a3 = a3 | a4\n  2100: a1 = a1 | a3\n  2103: a2 = u8 [a0 + 0x15]\n  2106: a3 = u8 [a0 + 0x14]\n  2109: a4 = u8 [a0 + 0x16]\n  2112: a5 = u8 [a0 + 0x17]\n  2115: a2 = a2 << 0x8\n  2118: a2 = a2 | a3\n  2121: a4 = a4 << 0x10\n  2124: a5 = a5 << 0x18\n  2127: a4 = a4 | a5\n  2130: a2 = a2 | a4\n  2133: a2 = a2 << 0x20\n  2136: t0 = a2 | a1\n  2139: a2 = u8 [a0 + 0x1]\n  2142: a3 = u8 [a0]\n  2144: a4 = u8 [a0 + 0x2]\n  2147: a5 = u8 [a0 + 0x3]\n  2150: a2 = a2 << 0x8\n  2153: a2 = a2 | a3\n  2156: a4 = a4 << 0x10\n  2159: a5 = a5 << 0x18\n  2162: a4 = a4 | a5\n  2165: a2 = a2 | a4\n  2168: a3 = u8 [a0 + 0x5]\n  2171: a4 = u8 [a0 + 0x4]\n  2174: a5 = u8 [a0 + 0x6]\n  2177: s1 = u8 [a0 + 0x7]\n  2180: a3 = a3 << 0x8\n  2183: a3 = a3 | a4\n  2186: a5 = a5 << 0x10\n  2189: s1 = s1 << 0x18\n  2192: a5 = a5 | s1\n  2195: a3 = a3 | a5\n  2198: a3 = a3 << 0x20\n  2201: a2 = a2 | a3\n  2204: a3 = u8 [a0 + 0x19]\n  2207: a4 = u8 [a0 + 0x18]\n  2210: a5 = u8 [a0 + 0x1a]\n  2213: s1 = u8 [a0 + 0x1b]\n  2216: a3 = a3 << 0x8\n  2219: a3 = a3 | a4\n  2222: a5 = a5 << 0x10\n  2225: s1 = s1 << 0x18\n  2228: a5 = a5 | s1\n  2231: a3 = a3 | a5\n  2234: a4 = u8 [a0 + 0x1d]\n  2237: a5 = u8 [a0 + 0x1c]\n  2240: s1 = u8 [a0 + 0x1e]\n  2243: a1 = u8 [a0 + 0x1f]\n  2246: a4 = a4 << 0x8\n  2249: a4 = a4 | a5\n  2252: s1 = s1 << 0x10\n  2255: a1 = a1 << 0x18\n  2258: a1 = a1 | s1\n  2261: a1 = a1 | a4\n  2264: a1 = a1 << 0x20\n  2267: a3 = a3 | a1\n  2270: a1 = u8 [a0 + 0x9]\n  2273: a4 = u8 [a0 + 0x8]\n  2276: a5 = u8 [a0 + 0xa]\n  2279: s1 = u8 [a0 + 0xb]\n  2282: a1 = a1 << 0x8\n  2285: a1 = a1 | a4\n  2288: a5 = a5 << 0x10\n  2291: s1 = s1 << 0x18\n  2294: a5 = a5 | s1\n  2297: a1 = a1 | a5\n  2300: a4 = u8 [a0 + 0xd]\n  2303: a5 = u8 [a0 + 0xc]\n  2306: s1 = u8 [a0 + 0xe]\n  2309: a0 = u8 [a0 + 0xf]\n  2312: a4 = a4 << 0x8\n  2315: a4 = a4 | a5\n  2318: s1 = s1 << 0x10\n  2321: a0 = a0 << 0x18\n  2324: a0 = a0 | s1\n  2327: a0 = a0 | a4\n  2330: a0 = a0 << 0x20\n  2333: a0 = a0 | a1\n  2336: s1 = reverse a0\n  2338: a0 = reverse a3\n  2340: u64 [sp + 0x8] = a0\n  2343: a0 = reverse a2\n  2345: u64 [sp + 0x18] = a0\n  2348: a0 = reverse t0\n  2350: u64 [sp + 0x10] = a0\n  2353: ecalli 8 // 'return_data_size'\n  2355: fallthrough\n      : @57 (gas: 11)\n  2356: a3 = u64 [sp + 0x8]\n  2359: a1 = u64 [sp + 0x18]\n  2362: a2 = u64 [sp + 0x10]\n  2365: a1 = a1 | a2\n  2368: a2 = a3 | s1\n  2371: a2 = a2 | a1\n  2374: a2 = a2 >> 0x20\n  2377: a1 = a1 | s1\n  2380: a1 = a1 << 0x20\n  2383: a1 = a1 | a2\n  2386: jump @64 if a1 != 0\n      : @58 (gas: 3)\n  2389: s1 = a0\n  2391: a0 = a0 >> 0x20\n  2394: jump @64 if a0 != 0\n      : @59 (gas: 5)\n  2397: i32 a0 = a3 + 0\n  2399: i32 a1 = s1 + 0\n  2401: u64 [sp + 0x18] = a1\n  2404: u64 [sp + 0x10] = a0\n  2407: ra = 52, jump @0\n      : @60 [@dyn 26] (gas: 6)\n  2412: u32 [sp + 0x20] = s1\n  2415: i32 a0 = a0 + 0\n  2417: i32 a1 = sp + 0x20\n  2420: a2 = 0\n  2422: ecalli 7 // 'return_data_copy'\n  2424: fallthrough\n      : @61 (gas: 3)\n  2425: a0 = i32 [sp + 0x20]\n  2428: a1 = u64 [sp + 0x18]\n  2431: jump @64 if a0 <u a1\n      : @62 (gas: 2)\n  2434: ecalli 8 // 'return_data_size'\n  2436: fallthrough\n      : @63 (gas: 2)\n  2437: a1 = a0 >> 0x20\n  2440: jump @65 if a1 == 0\n      : @64 (gas: 1)\n  2443: trap\n      : @65 (gas: 4)\n  2444: i32 s1 = a0 + 0\n  2446: a0 = u64 [sp + 0x10]\n  2449: a1 = s1\n  2451: ra = 54, jump @0\n      : @66 [@dyn 27] (gas: 6)\n  2456: i32 a1 = a0 + 0\n  2458: a0 = 0x1\n  2461: a2 = s1\n  2463: ra = 0x38\n  2466: ecalli 9 // 'seal_return'\n  2468: fallthrough\n      : @67 [@dyn 28] (gas: 9)\n  2469: a2 = u64 [a1 + 0x18]\n  2472: a3 = u64 [a1 + 0x10]\n  2475: a4 = u64 [a1 + 0x8]\n  2478: a1 = u64 [a1]\n  2480: u64 [a0 + 0x18] = a2\n  2483: u64 [a0 + 0x10] = a3\n  2486: u64 [a0 + 0x8] = a4\n  2489: u64 [a0] = a1\n  2491: ret\n      : @68 [@dyn 29] (gas: 6)\n  2493: i32 a1 = a0 + 0\n  2495: a0 = 0x1\n  2498: a2 = 0\n  2500: ra = 0x3c\n  2503: ecalli 9 // 'seal_return'\n  2505: fallthrough\n      : @69 [@dyn 30] (gas: 18)\n  2506: a2 = u64 [a1]\n  2508: t0 = u64 [a1 + 0x18]\n  2511: a4 = u64 [a1 + 0x8]\n  2514: a1 = u64 [a1 + 0x10]\n  2517: a5 = a2 + 0x1f\n  2520: a2 = a5 <u a2\n  2523: a3 = a4 + a2\n  2526: a4 = a3 <u a4\n  2529: a4 = a2 if a2 == 0\n  2532: a4 = a4 + a1\n  2535: a1 = a4 <u a1\n  2538: a1 = a1 + t0\n  2541: a5 = a5 & 0xffffffffffffffe0\n  2544: u64 [a0] = a5\n  2546: u64 [a0 + 0x8] = a3\n  2549: u64 [a0 + 0x10] = a4\n  2552: u64 [a0 + 0x18] = a1\n  2555: ret\n      : @70 (gas: 17)\n  2557: sp = sp + 0xffffffffffffffa0\n  2560: u64 [sp + 0x58] = ra\n  2563: u64 [sp + 0x50] = s0\n  2566: u64 [sp + 0x48] = s1\n  2569: a3 = u64 [a1 + 0x18]\n  2572: a4 = u64 [a1 + 0x10]\n  2575: a5 = u64 [a1 + 0x8]\n  2578: s1 = u64 [a1]\n  2580: a1 = a5 | a3\n  2583: a2 = s1 | a4\n  2586: a2 = a2 | a1\n  2589: a2 = a2 >> 0x20\n  2592: a1 = a1 | a4\n  2595: a1 = a1 << 0x20\n  2598: a1 = a1 | a2\n  2601: u64 [sp + 0x28] = a0\n  2604: jump @77 if a1 != 0\n      : @71 (gas: 19)\n  2608: a0 = s1 + 0x20\n  2611: u64 [sp + 0x30] = a0\n  2614: a0 = a0 <u s1\n  2617: a1 = a5 + a0\n  2620: u64 [sp + 0x40] = a1\n  2623: u64 [sp + 0x8] = a5\n  2626: s0 = a1 <u a5\n  2629: s0 = a0 if a0 == 0\n  2632: s0 = s0 + a4\n  2635: u64 [sp + 0x10] = a4\n  2638: a0 = s0 <u a4\n  2641: u64 [sp + 0x18] = a3\n  2644: a0 = a0 + a3\n  2647: u64 [sp + 0x38] = a0\n  2650: u64 [sp] = s1\n  2652: i32 a0 = s1 + 0\n  2654: a1 = 0x20\n  2657: s1 = 0x20\n  2660: ra = 62, jump @0\n      : @72 [@dyn 31] (gas: 45)\n  2665: u8 [a0 + 0x1f] = s1\n  2668: a1 = u64 [sp + 0x30]\n  2671: s1 = a1\n  2673: a1 = a1 | s0\n  2676: a2 = u64 [sp + 0x40]\n  2679: a4 = u64 [sp + 0x38]\n  2682: a2 = a2 | a4\n  2685: a1 = a1 | a2\n  2688: a1 = a1 >> 0x20\n  2691: u64 [sp + 0x20] = s0\n  2694: a2 = a2 | s0\n  2697: a2 = a2 << 0x20\n  2700: a1 = a1 | a2\n  2703: u8 [a0 + 30] = 0\n  2706: u8 [a0 + 29] = 0\n  2709: u8 [a0 + 28] = 0\n  2712: u8 [a0 + 27] = 0\n  2715: u8 [a0 + 26] = 0\n  2718: u8 [a0 + 25] = 0\n  2721: u8 [a0 + 24] = 0\n  2724: u8 [a0 + 23] = 0\n  2727: u8 [a0 + 22] = 0\n  2730: u8 [a0 + 21] = 0\n  2733: u8 [a0 + 20] = 0\n  2736: u8 [a0 + 19] = 0\n  2739: u8 [a0 + 18] = 0\n  2742: u8 [a0 + 17] = 0\n  2745: u8 [a0 + 16] = 0\n  2748: u8 [a0 + 15] = 0\n  2751: u8 [a0 + 14] = 0\n  2754: u8 [a0 + 13] = 0\n  2757: u8 [a0 + 12] = 0\n  2760: u8 [a0 + 11] = 0\n  2763: u8 [a0 + 10] = 0\n  2766: u8 [a0 + 9] = 0\n  2769: u8 [a0 + 8] = 0\n  2772: u8 [a0 + 7] = 0\n  2775: u8 [a0 + 6] = 0\n  2778: u8 [a0 + 5] = 0\n  2781: u8 [a0 + 4] = 0\n  2784: u8 [a0 + 3] = 0\n  2787: u8 [a0 + 2] = 0\n  2790: u8 [a0 + 1] = 0\n  2793: u8 [a0 + 0] = 0\n  2795: jump @77 if a1 != 0\n      : @73 (gas: 4)\n  2799: i32 s0 = s1 + 0\n  2801: a1 = 0x20\n  2804: a0 = s0\n  2806: ra = 64, jump @0\n      : @74 [@dyn 32] (gas: 41)\n  2811: u8 [a0 + 31] = 0x1f\n  2815: u8 [a0 + 30] = 0\n  2818: u8 [a0 + 29] = 0\n  2821: u8 [a0 + 28] = 0\n  2824: u8 [a0 + 27] = 0\n  2827: u8 [a0 + 26] = 0\n  2830: u8 [a0 + 25] = 0\n  2833: u8 [a0 + 24] = 0\n  2836: u8 [a0 + 23] = 0\n  2839: u8 [a0 + 22] = 0\n  2842: u8 [a0 + 21] = 0\n  2845: u8 [a0 + 20] = 0\n  2848: u8 [a0 + 19] = 0\n  2851: u8 [a0 + 18] = 0\n  2854: u8 [a0 + 17] = 0\n  2857: u8 [a0 + 16] = 0\n  2860: u8 [a0 + 15] = 0\n  2863: u8 [a0 + 14] = 0\n  2866: u8 [a0 + 13] = 0\n  2869: u8 [a0 + 12] = 0\n  2872: u8 [a0 + 11] = 0\n  2875: u8 [a0 + 10] = 0\n  2878: u8 [a0 + 9] = 0\n  2881: u8 [a0 + 8] = 0\n  2884: u8 [a0 + 7] = 0\n  2887: u8 [a0 + 6] = 0\n  2890: u8 [a0 + 5] = 0\n  2893: u8 [a0 + 4] = 0\n  2896: u8 [a0 + 3] = 0\n  2899: u8 [a0 + 2] = 0\n  2902: u8 [a0 + 1] = 0\n  2905: a1 = u64 [sp + 0x20]\n  2908: a2 = u64 [sp + 0x38]\n  2911: a1 = a1 | a2\n  2914: a2 = 0xffffffe0\n  2924: a2 = s1 <u a2\n  2927: a3 = u64 [sp + 0x40]\n  2930: a2 = 0 if a3 != 0\n  2932: a2 = 0 if a1 != 0\n  2934: u8 [a0 + 0] = 0\n  2936: jump @77 if a2 == 0\n      : @75 (gas: 3)\n  2940: i32 a0 = s0 + 0x20\n  2943: a1 = 0x20\n  2946: ra = 66, jump @0\n      : @76 [@dyn 33] (gas: 55)\n  2951: u8 [a0 + 31] = 0\n  2954: u8 [a0 + 30] = 0x30\n  2958: u8 [a0 + 29] = 0x20\n  2962: u8 [a0 + 28] = 0x65\n  2966: u8 [a0 + 27] = 0x62\n  2970: u8 [a0 + 26] = 0x20\n  2974: u8 [a0 + 25] = 0x64\n  2978: u8 [a0 + 24] = 0x6c\n  2982: u8 [a0 + 23] = 0x75\n  2986: u8 [a0 + 22] = 0x6f\n  2990: u8 [a0 + 21] = 0x68\n  2994: a5 = 0x73\n  2997: u8 [a0 + 0x14] = a5\n  3000: u8 [a0 + 19] = 0x20\n  3004: u8 [a0 + 18] = 0x65\n  3008: u8 [a0 + 17] = 0x75\n  3012: u8 [a0 + 16] = 0x6c\n  3016: u8 [a0 + 15] = 0x61\n  3020: u8 [a0 + 14] = 0x76\n  3024: u8 [a0 + 13] = 0x20\n  3028: u8 [a0 + 12] = 0x6c\n  3032: u8 [a0 + 11] = 0x61\n  3036: u8 [a0 + 10] = 0x69\n  3040: u8 [a0 + 9] = 0x74\n  3044: u8 [a0 + 8] = 0x69\n  3048: u8 [a0 + 7] = 0x6e\n  3052: u8 [a0 + 6] = 0x69\n  3056: u8 [a0 + 5] = 0x20\n  3060: u8 [a0 + 4] = 0x63\n  3064: u8 [a0 + 3] = 0x69\n  3068: u8 [a0 + 2] = 0x67\n  3072: u8 [a0 + 1] = 0x6f\n  3076: u8 [a0 + 0] = 0x4c\n  3079: a1 = u64 [sp]\n  3081: a0 = a1 + 0x60\n  3084: a1 = a0 <u a1\n  3087: a3 = u64 [sp + 0x8]\n  3090: a2 = a3 + a1\n  3093: a3 = a2 <u a3\n  3096: a3 = a1 if a1 == 0\n  3099: a1 = u64 [sp + 0x10]\n  3102: a3 = a3 + a1\n  3105: a1 = a3 <u a1\n  3108: a4 = u64 [sp + 0x18]\n  3111: a1 = a1 + a4\n  3114: a4 = u64 [sp + 0x28]\n  3117: u64 [a4] = a0\n  3119: u64 [a4 + 0x8] = a2\n  3122: u64 [a4 + 0x10] = a3\n  3125: u64 [a4 + 0x18] = a1\n  3128: ra = u64 [sp + 0x58]\n  3131: s0 = u64 [sp + 0x50]\n  3134: s1 = u64 [sp + 0x48]\n  3137: sp = sp + 0x60\n  3140: ret\n      : @77 (gas: 1)\n  3142: trap\n      : @78 (gas: 17)\n  3143: sp = sp + 0xffffffffffffffa0\n  3146: u64 [sp + 0x58] = ra\n  3149: u64 [sp + 0x50] = s0\n  3152: u64 [sp + 0x48] = s1\n  3155: a3 = u64 [a1 + 0x18]\n  3158: a4 = u64 [a1 + 0x10]\n  3161: a5 = u64 [a1 + 0x8]\n  3164: s1 = u64 [a1]\n  3166: a1 = a5 | a3\n  3169: a2 = s1 | a4\n  3172: a2 = a2 | a1\n  3175: a2 = a2 >> 0x20\n  3178: a1 = a1 | a4\n  3181: a1 = a1 << 0x20\n  3184: a1 = a1 | a2\n  3187: u64 [sp + 0x28] = a0\n  3190: jump @85 if a1 != 0\n      : @79 (gas: 19)\n  3194: a0 = s1 + 0x20\n  3197: u64 [sp + 0x30] = a0\n  3200: a0 = a0 <u s1\n  3203: a1 = a5 + a0\n  3206: u64 [sp + 0x40] = a1\n  3209: u64 [sp + 0x8] = a5\n  3212: s0 = a1 <u a5\n  3215: s0 = a0 if a0 == 0\n  3218: s0 = s0 + a4\n  3221: u64 [sp + 0x10] = a4\n  3224: a0 = s0 <u a4\n  3227: u64 [sp + 0x18] = a3\n  3230: a0 = a0 + a3\n  3233: u64 [sp + 0x38] = a0\n  3236: u64 [sp] = s1\n  3238: i32 a0 = s1 + 0\n  3240: a1 = 0x20\n  3243: s1 = 0x20\n  3246: ra = 68, jump @0\n      : @80 [@dyn 34] (gas: 45)\n  3251: u8 [a0 + 0x1f] = s1\n  3254: a1 = u64 [sp + 0x30]\n  3257: s1 = a1\n  3259: a1 = a1 | s0\n  3262: a2 = u64 [sp + 0x40]\n  3265: a4 = u64 [sp + 0x38]\n  3268: a2 = a2 | a4\n  3271: a1 = a1 | a2\n  3274: a1 = a1 >> 0x20\n  3277: u64 [sp + 0x20] = s0\n  3280: a2 = a2 | s0\n  3283: a2 = a2 << 0x20\n  3286: a1 = a1 | a2\n  3289: u8 [a0 + 30] = 0\n  3292: u8 [a0 + 29] = 0\n  3295: u8 [a0 + 28] = 0\n  3298: u8 [a0 + 27] = 0\n  3301: u8 [a0 + 26] = 0\n  3304: u8 [a0 + 25] = 0\n  3307: u8 [a0 + 24] = 0\n  3310: u8 [a0 + 23] = 0\n  3313: u8 [a0 + 22] = 0\n  3316: u8 [a0 + 21] = 0\n  3319: u8 [a0 + 20] = 0\n  3322: u8 [a0 + 19] = 0\n  3325: u8 [a0 + 18] = 0\n  3328: u8 [a0 + 17] = 0\n  3331: u8 [a0 + 16] = 0\n  3334: u8 [a0 + 15] = 0\n  3337: u8 [a0 + 14] = 0\n  3340: u8 [a0 + 13] = 0\n  3343: u8 [a0 + 12] = 0\n  3346: u8 [a0 + 11] = 0\n  3349: u8 [a0 + 10] = 0\n  3352: u8 [a0 + 9] = 0\n  3355: u8 [a0 + 8] = 0\n  3358: u8 [a0 + 7] = 0\n  3361: u8 [a0 + 6] = 0\n  3364: u8 [a0 + 5] = 0\n  3367: u8 [a0 + 4] = 0\n  3370: u8 [a0 + 3] = 0\n  3373: u8 [a0 + 2] = 0\n  3376: u8 [a0 + 1] = 0\n  3379: u8 [a0 + 0] = 0\n  3381: jump @85 if a1 != 0\n      : @81 (gas: 4)\n  3385: i32 s0 = s1 + 0\n  3387: a1 = 0x20\n  3390: a0 = s0\n  3392: ra = 70, jump @0\n      : @82 [@dyn 35] (gas: 41)\n  3397: u8 [a0 + 31] = 0x1f\n  3401: u8 [a0 + 30] = 0\n  3404: u8 [a0 + 29] = 0\n  3407: u8 [a0 + 28] = 0\n  3410: u8 [a0 + 27] = 0\n  3413: u8 [a0 + 26] = 0\n  3416: u8 [a0 + 25] = 0\n  3419: u8 [a0 + 24] = 0\n  3422: u8 [a0 + 23] = 0\n  3425: u8 [a0 + 22] = 0\n  3428: u8 [a0 + 21] = 0\n  3431: u8 [a0 + 20] = 0\n  3434: u8 [a0 + 19] = 0\n  3437: u8 [a0 + 18] = 0\n  3440: u8 [a0 + 17] = 0\n  3443: u8 [a0 + 16] = 0\n  3446: u8 [a0 + 15] = 0\n  3449: u8 [a0 + 14] = 0\n  3452: u8 [a0 + 13] = 0\n  3455: u8 [a0 + 12] = 0\n  3458: u8 [a0 + 11] = 0\n  3461: u8 [a0 + 10] = 0\n  3464: u8 [a0 + 9] = 0\n  3467: u8 [a0 + 8] = 0\n  3470: u8 [a0 + 7] = 0\n  3473: u8 [a0 + 6] = 0\n  3476: u8 [a0 + 5] = 0\n  3479: u8 [a0 + 4] = 0\n  3482: u8 [a0 + 3] = 0\n  3485: u8 [a0 + 2] = 0\n  3488: u8 [a0 + 1] = 0\n  3491: a1 = u64 [sp + 0x20]\n  3494: a2 = u64 [sp + 0x38]\n  3497: a1 = a1 | a2\n  3500: a2 = 0xffffffe0\n  3510: a2 = s1 <u a2\n  3513: a3 = u64 [sp + 0x40]\n  3516: a2 = 0 if a3 != 0\n  3518: a2 = 0 if a1 != 0\n  3520: u8 [a0 + 0] = 0\n  3522: jump @85 if a2 == 0\n      : @83 (gas: 3)\n  3526: i32 a0 = s0 + 0x20\n  3529: a1 = 0x20\n  3532: ra = 72, jump @0\n      : @84 [@dyn 36] (gas: 55)\n  3537: u8 [a0 + 31] = 0\n  3540: u8 [a0 + 30] = 0x30\n  3544: u8 [a0 + 29] = 0x20\n  3548: u8 [a0 + 28] = 0x65\n  3552: u8 [a0 + 27] = 0x62\n  3556: u8 [a0 + 26] = 0x20\n  3560: u8 [a0 + 25] = 0x64\n  3564: u8 [a0 + 24] = 0x6c\n  3568: u8 [a0 + 23] = 0x75\n  3572: u8 [a0 + 22] = 0x6f\n  3576: u8 [a0 + 21] = 0x68\n  3580: a5 = 0x73\n  3583: u8 [a0 + 0x14] = a5\n  3586: u8 [a0 + 19] = 0x20\n  3590: u8 [a0 + 18] = 0x65\n  3594: u8 [a0 + 17] = 0x75\n  3598: u8 [a0 + 16] = 0x6c\n  3602: u8 [a0 + 15] = 0x61\n  3606: u8 [a0 + 14] = 0x76\n  3610: u8 [a0 + 13] = 0x20\n  3614: u8 [a0 + 12] = 0x6c\n  3618: u8 [a0 + 11] = 0x61\n  3622: u8 [a0 + 10] = 0x69\n  3626: u8 [a0 + 9] = 0x74\n  3630: u8 [a0 + 8] = 0x69\n  3634: u8 [a0 + 7] = 0x6e\n  3638: u8 [a0 + 6] = 0x69\n  3642: u8 [a0 + 5] = 0x20\n  3646: u8 [a0 + 4] = 0x79\n  3650: u8 [a0 + 3] = 0x78\n  3654: u8 [a0 + 2] = 0x6f\n  3658: u8 [a0 + 1] = 0x72\n  3662: u8 [a0 + 0] = 0x50\n  3665: a1 = u64 [sp]\n  3667: a0 = a1 + 0x60\n  3670: a1 = a0 <u a1\n  3673: a3 = u64 [sp + 0x8]\n  3676: a2 = a3 + a1\n  3679: a3 = a2 <u a3\n  3682: a3 = a1 if a1 == 0\n  3685: a1 = u64 [sp + 0x10]\n  3688: a3 = a3 + a1\n  3691: a1 = a3 <u a1\n  3694: a4 = u64 [sp + 0x18]\n  3697: a1 = a1 + a4\n  3700: a4 = u64 [sp + 0x28]\n  3703: u64 [a4] = a0\n  3705: u64 [a4 + 0x8] = a2\n  3708: u64 [a4 + 0x10] = a3\n  3711: u64 [a4 + 0x18] = a1\n  3714: ra = u64 [sp + 0x58]\n  3717: s0 = u64 [sp + 0x50]\n  3720: s1 = u64 [sp + 0x48]\n  3723: sp = sp + 0x60\n  3726: ret\n      : @85 (gas: 1)\n  3728: trap\n      : @86 (gas: 17)\n  3729: sp = sp + 0xffffffffffffffa0\n  3732: u64 [sp + 0x58] = ra\n  3735: u64 [sp + 0x50] = s0\n  3738: u64 [sp + 0x48] = s1\n  3741: a3 = u64 [a1 + 0x18]\n  3744: a4 = u64 [a1 + 0x10]\n  3747: a5 = u64 [a1 + 0x8]\n  3750: s1 = u64 [a1]\n  3752: a1 = a5 | a3\n  3755: a2 = s1 | a4\n  3758: a2 = a2 | a1\n  3761: a2 = a2 >> 0x20\n  3764: a1 = a1 | a4\n  3767: a1 = a1 << 0x20\n  3770: a1 = a1 | a2\n  3773: u64 [sp + 0x20] = a0\n  3776: jump @95 if a1 != 0\n      : @87 (gas: 19)\n  3780: a0 = s1 + 0x20\n  3783: u64 [sp + 0x38] = a0\n  3786: a0 = a0 <u s1\n  3789: a1 = a5 + a0\n  3792: u64 [sp + 0x40] = a1\n  3795: u64 [sp + 0x8] = a5\n  3798: s0 = a1 <u a5\n  3801: s0 = a0 if a0 == 0\n  3804: s0 = s0 + a4\n  3807: u64 [sp + 0x10] = a4\n  3810: a0 = s0 <u a4\n  3813: u64 [sp + 0x18] = a3\n  3816: a0 = a0 + a3\n  3819: u64 [sp + 0x30] = a0\n  3822: u64 [sp] = s1\n  3824: i32 a0 = s1 + 0\n  3826: a1 = 0x20\n  3829: s1 = 0x20\n  3832: ra = 74, jump @0\n      : @88 [@dyn 37] (gas: 43)\n  3837: u8 [a0 + 0x1f] = s1\n  3840: a1 = u64 [sp + 0x38]\n  3843: a1 = a1 | s0\n  3846: a2 = u64 [sp + 0x40]\n  3849: a3 = u64 [sp + 0x30]\n  3852: a2 = a2 | a3\n  3855: a1 = a1 | a2\n  3858: a1 = a1 >> 0x20\n  3861: a2 = a2 | s0\n  3864: a2 = a2 << 0x20\n  3867: a1 = a1 | a2\n  3870: u8 [a0 + 30] = 0\n  3873: u8 [a0 + 29] = 0\n  3876: u8 [a0 + 28] = 0\n  3879: u8 [a0 + 27] = 0\n  3882: u8 [a0 + 26] = 0\n  3885: u8 [a0 + 25] = 0\n  3888: u8 [a0 + 24] = 0\n  3891: u8 [a0 + 23] = 0\n  3894: u8 [a0 + 22] = 0\n  3897: u8 [a0 + 21] = 0\n  3900: u8 [a0 + 20] = 0\n  3903: u8 [a0 + 19] = 0\n  3906: u8 [a0 + 18] = 0\n  3909: u8 [a0 + 17] = 0\n  3912: u8 [a0 + 16] = 0\n  3915: u8 [a0 + 15] = 0\n  3918: u8 [a0 + 14] = 0\n  3921: u8 [a0 + 13] = 0\n  3924: u8 [a0 + 12] = 0\n  3927: u8 [a0 + 11] = 0\n  3930: u8 [a0 + 10] = 0\n  3933: u8 [a0 + 9] = 0\n  3936: u8 [a0 + 8] = 0\n  3939: u8 [a0 + 7] = 0\n  3942: u8 [a0 + 6] = 0\n  3945: u8 [a0 + 5] = 0\n  3948: u8 [a0 + 4] = 0\n  3951: u8 [a0 + 3] = 0\n  3954: u8 [a0 + 2] = 0\n  3957: u8 [a0 + 1] = 0\n  3960: u8 [a0 + 0] = 0\n  3962: jump @95 if a1 != 0\n      : @89 (gas: 5)\n  3966: s1 = u64 [sp + 0x38]\n  3969: i32 a0 = s1 + 0\n  3971: a1 = 0x20\n  3974: u64 [sp + 0x28] = a0\n  3977: ra = 76, jump @0\n      : @90 [@dyn 38] (gas: 42)\n  3982: u8 [a0 + 31] = 0x27\n  3986: u8 [a0 + 30] = 0\n  3989: u8 [a0 + 29] = 0\n  3992: u8 [a0 + 28] = 0\n  3995: u8 [a0 + 27] = 0\n  3998: u8 [a0 + 26] = 0\n  4001: u8 [a0 + 25] = 0\n  4004: u8 [a0 + 24] = 0\n  4007: u8 [a0 + 23] = 0\n  4010: u8 [a0 + 22] = 0\n  4013: u8 [a0 + 21] = 0\n  4016: u8 [a0 + 20] = 0\n  4019: u8 [a0 + 19] = 0\n  4022: u8 [a0 + 18] = 0\n  4025: u8 [a0 + 17] = 0\n  4028: u8 [a0 + 16] = 0\n  4031: u8 [a0 + 15] = 0\n  4034: u8 [a0 + 14] = 0\n  4037: u8 [a0 + 13] = 0\n  4040: u8 [a0 + 12] = 0\n  4043: u8 [a0 + 11] = 0\n  4046: u8 [a0 + 10] = 0\n  4049: u8 [a0 + 9] = 0\n  4052: u8 [a0 + 8] = 0\n  4055: u8 [a0 + 7] = 0\n  4058: u8 [a0 + 6] = 0\n  4061: u8 [a0 + 5] = 0\n  4064: u8 [a0 + 4] = 0\n  4067: u8 [a0 + 3] = 0\n  4070: u8 [a0 + 2] = 0\n  4073: u8 [a0 + 1] = 0\n  4076: a1 = u64 [sp + 0x30]\n  4079: a3 = s0 | a1\n  4082: s0 = 0x100000000\n  4092: a1 = 0xffffffe0\n  4102: a1 = s1 <u a1\n  4105: a2 = u64 [sp + 0x40]\n  4108: a1 = 0 if a2 != 0\n  4110: u64 [sp + 0x30] = a3\n  4113: a1 = 0 if a3 != 0\n  4115: u8 [a0 + 0] = 0\n  4117: jump @95 if a1 == 0\n      : @91 (gas: 4)\n  4121: a0 = u64 [sp + 0x28]\n  4124: i32 a0 = a0 + 0x20\n  4127: a1 = 0x20\n  4130: ra = 78, jump @0\n      : @92 [@dyn 39] (gas: 42)\n  4135: u8 [a0 + 25] = 0x66\n  4139: u8 [a0 + 22] = 0x31\n  4143: u8 [a0 + 19] = 0x62\n  4147: u8 [a0 + 17] = 0x64\n  4151: u8 [a0 + 13] = 0x68\n  4155: u8 [a0 + 12] = 0x73\n  4159: u8 [a0 + 15] = 0x75\n  4163: u8 [a0 + 9] = 0x75\n  4167: u8 [a0 + 16] = 0x6c\n  4171: u8 [a0 + 8] = 0x6c\n  4175: u8 [a0 + 24] = 0x61\n  4179: u8 [a0 + 7] = 0x61\n  4183: u8 [a0 + 6] = 0x76\n  4187: u8 [a0 + 31] = 0x6e\n  4191: u8 [a0 + 29] = 0x20\n  4195: u8 [a0 + 23] = 0x20\n  4199: u8 [a0 + 21] = 0x20\n  4203: u8 [a0 + 18] = 0x20\n  4207: u8 [a0 + 11] = 0x20\n  4211: u8 [a0 + 5] = 0x20\n  4215: u8 [a0 + 30] = 0x69\n  4219: u8 [a0 + 3] = 0x69\n  4223: u8 [a0 + 2] = 0x67\n  4227: u8 [a0 + 14] = 0x6f\n  4231: u8 [a0 + 1] = 0x6f\n  4235: u8 [a0 + 0] = 0x4c\n  4238: u8 [a0 + 28] = 0x72\n  4242: a1 = s0 + 0xffffffffffffffc0\n  4245: a2 = u64 [sp + 0x38]\n  4248: a1 = a2 <u a1\n  4251: s0 = 0x65\n  4254: u8 [a0 + 0x1b] = s0\n  4257: a2 = u64 [sp + 0x40]\n  4260: a1 = 0 if a2 != 0\n  4262: s1 = 0x74\n  4265: u8 [a0 + 0x1a] = s1\n  4268: u8 [a0 + 0x14] = s0\n  4271: u8 [a0 + 0xa] = s0\n  4274: a2 = u64 [sp + 0x30]\n  4277: a1 = 0 if a2 != 0\n  4279: u8 [a0 + 4] = 0x63\n  4283: jump @95 if a1 == 0\n      : @93 (gas: 4)\n  4287: a0 = u64 [sp + 0x28]\n  4290: i32 a0 = a0 + 0x40\n  4293: a1 = 0x20\n  4296: ra = 80, jump @0\n      : @94 [@dyn 40] (gas: 54)\n  4301: u8 [a0 + 31] = 0\n  4304: u8 [a0 + 30] = 0\n  4307: u8 [a0 + 29] = 0\n  4310: u8 [a0 + 28] = 0\n  4313: u8 [a0 + 27] = 0\n  4316: u8 [a0 + 26] = 0\n  4319: u8 [a0 + 25] = 0\n  4322: u8 [a0 + 24] = 0\n  4325: u8 [a0 + 23] = 0\n  4328: u8 [a0 + 22] = 0\n  4331: u8 [a0 + 21] = 0\n  4334: u8 [a0 + 20] = 0\n  4337: u8 [a0 + 19] = 0\n  4340: u8 [a0 + 18] = 0\n  4343: u8 [a0 + 17] = 0\n  4346: u8 [a0 + 16] = 0\n  4349: u8 [a0 + 15] = 0\n  4352: u8 [a0 + 14] = 0\n  4355: u8 [a0 + 13] = 0\n  4358: u8 [a0 + 12] = 0\n  4361: u8 [a0 + 11] = 0\n  4364: u8 [a0 + 10] = 0\n  4367: u8 [a0 + 9] = 0\n  4370: u8 [a0 + 8] = 0\n  4373: u8 [a0 + 7] = 0\n  4376: u8 [a0 + 0x6] = s1\n  4379: u8 [a0 + 5] = 0x6e\n  4383: u8 [a0 + 0x4] = s0\n  4386: u8 [a0 + 3] = 0x6d\n  4390: u8 [a0 + 0x2] = s0\n  4393: u8 [a0 + 1] = 0x72\n  4397: u8 [a0 + 0] = 0x63\n  4400: a1 = u64 [sp]\n  4402: a0 = a1 + 0x80\n  4406: a1 = a0 <u a1\n  4409: a3 = u64 [sp + 0x8]\n  4412: a2 = a3 + a1\n  4415: a3 = a2 <u a3\n  4418: a3 = a1 if a1 == 0\n  4421: a1 = u64 [sp + 0x10]\n  4424: a3 = a3 + a1\n  4427: a1 = a3 <u a1\n  4430: a4 = u64 [sp + 0x18]\n  4433: a1 = a1 + a4\n  4436: a4 = u64 [sp + 0x20]\n  4439: u64 [a4] = a0\n  4441: u64 [a4 + 0x8] = a2\n  4444: u64 [a4 + 0x10] = a3\n  4447: u64 [a4 + 0x18] = a1\n  4450: ra = u64 [sp + 0x58]\n  4453: s0 = u64 [sp + 0x50]\n  4456: s1 = u64 [sp + 0x48]\n  4459: sp = sp + 0x60\n  4462: ret\n      : @95 (gas: 1)\n  4464: trap\n      : @96 (gas: 17)\n  4465: sp = sp + 0xffffffffffffffa0\n  4468: u64 [sp + 0x58] = ra\n  4471: u64 [sp + 0x50] = s0\n  4474: u64 [sp + 0x48] = s1\n  4477: a3 = u64 [a1 + 0x18]\n  4480: a4 = u64 [a1 + 0x10]\n  4483: a5 = u64 [a1 + 0x8]\n  4486: s1 = u64 [a1]\n  4488: a1 = a5 | a3\n  4491: a2 = s1 | a4\n  4494: a2 = a2 | a1\n  4497: a2 = a2 >> 0x20\n  4500: a1 = a1 | a4\n  4503: a1 = a1 << 0x20\n  4506: a1 = a1 | a2\n  4509: u64 [sp + 0x28] = a0\n  4512: jump @103 if a1 != 0\n      : @97 (gas: 19)\n  4516: a0 = s1 + 0x20\n  4519: u64 [sp + 0x30] = a0\n  4522: a0 = a0 <u s1\n  4525: a1 = a5 + a0\n  4528: u64 [sp + 0x40] = a1\n  4531: u64 [sp + 0x8] = a5\n  4534: s0 = a1 <u a5\n  4537: s0 = a0 if a0 == 0\n  4540: s0 = s0 + a4\n  4543: u64 [sp + 0x10] = a4\n  4546: a0 = s0 <u a4\n  4549: u64 [sp + 0x18] = a3\n  4552: a0 = a0 + a3\n  4555: u64 [sp + 0x38] = a0\n  4558: u64 [sp] = s1\n  4560: i32 a0 = s1 + 0\n  4562: a1 = 0x20\n  4565: s1 = 0x20\n  4568: ra = 82, jump @0\n      : @98 [@dyn 41] (gas: 45)\n  4573: u8 [a0 + 0x1f] = s1\n  4576: a1 = u64 [sp + 0x30]\n  4579: s1 = a1\n  4581: a1 = a1 | s0\n  4584: a2 = u64 [sp + 0x40]\n  4587: a4 = u64 [sp + 0x38]\n  4590: a2 = a2 | a4\n  4593: a1 = a1 | a2\n  4596: a1 = a1 >> 0x20\n  4599: u64 [sp + 0x20] = s0\n  4602: a2 = a2 | s0\n  4605: a2 = a2 << 0x20\n  4608: a1 = a1 | a2\n  4611: u8 [a0 + 30] = 0\n  4614: u8 [a0 + 29] = 0\n  4617: u8 [a0 + 28] = 0\n  4620: u8 [a0 + 27] = 0\n  4623: u8 [a0 + 26] = 0\n  4626: u8 [a0 + 25] = 0\n  4629: u8 [a0 + 24] = 0\n  4632: u8 [a0 + 23] = 0\n  4635: u8 [a0 + 22] = 0\n  4638: u8 [a0 + 21] = 0\n  4641: u8 [a0 + 20] = 0\n  4644: u8 [a0 + 19] = 0\n  4647: u8 [a0 + 18] = 0\n  4650: u8 [a0 + 17] = 0\n  4653: u8 [a0 + 16] = 0\n  4656: u8 [a0 + 15] = 0\n  4659: u8 [a0 + 14] = 0\n  4662: u8 [a0 + 13] = 0\n  4665: u8 [a0 + 12] = 0\n  4668: u8 [a0 + 11] = 0\n  4671: u8 [a0 + 10] = 0\n  4674: u8 [a0 + 9] = 0\n  4677: u8 [a0 + 8] = 0\n  4680: u8 [a0 + 7] = 0\n  4683: u8 [a0 + 6] = 0\n  4686: u8 [a0 + 5] = 0\n  4689: u8 [a0 + 4] = 0\n  4692: u8 [a0 + 3] = 0\n  4695: u8 [a0 + 2] = 0\n  4698: u8 [a0 + 1] = 0\n  4701: u8 [a0 + 0] = 0\n  4703: jump @103 if a1 != 0\n      : @99 (gas: 4)\n  4707: i32 s0 = s1 + 0\n  4709: a1 = 0x20\n  4712: a0 = s0\n  4714: ra = 84, jump @0\n      : @100 [@dyn 42] (gas: 41)\n  4719: u8 [a0 + 31] = 0x1b\n  4723: u8 [a0 + 30] = 0\n  4726: u8 [a0 + 29] = 0\n  4729: u8 [a0 + 28] = 0\n  4732: u8 [a0 + 27] = 0\n  4735: u8 [a0 + 26] = 0\n  4738: u8 [a0 + 25] = 0\n  4741: u8 [a0 + 24] = 0\n  4744: u8 [a0 + 23] = 0\n  4747: u8 [a0 + 22] = 0\n  4750: u8 [a0 + 21] = 0\n  4753: u8 [a0 + 20] = 0\n  4756: u8 [a0 + 19] = 0\n  4759: u8 [a0 + 18] = 0\n  4762: u8 [a0 + 17] = 0\n  4765: u8 [a0 + 16] = 0\n  4768: u8 [a0 + 15] = 0\n  4771: u8 [a0 + 14] = 0\n  4774: u8 [a0 + 13] = 0\n  4777: u8 [a0 + 12] = 0\n  4780: u8 [a0 + 11] = 0\n  4783: u8 [a0 + 10] = 0\n  4786: u8 [a0 + 9] = 0\n  4789: u8 [a0 + 8] = 0\n  4792: u8 [a0 + 7] = 0\n  4795: u8 [a0 + 6] = 0\n  4798: u8 [a0 + 5] = 0\n  4801: u8 [a0 + 4] = 0\n  4804: u8 [a0 + 3] = 0\n  4807: u8 [a0 + 2] = 0\n  4810: u8 [a0 + 1] = 0\n  4813: a1 = u64 [sp + 0x20]\n  4816: a2 = u64 [sp + 0x38]\n  4819: a1 = a1 | a2\n  4822: a2 = 0xffffffe0\n  4832: a2 = s1 <u a2\n  4835: a3 = u64 [sp + 0x40]\n  4838: a2 = 0 if a3 != 0\n  4840: a2 = 0 if a1 != 0\n  4842: u8 [a0 + 0] = 0\n  4844: jump @103 if a2 == 0\n      : @101 (gas: 3)\n  4848: i32 a0 = s0 + 0x20\n  4851: a1 = 0x20\n  4854: ra = 86, jump @0\n      : @102 [@dyn 43] (gas: 54)\n  4859: u8 [a0 + 26] = 0x30\n  4863: u8 [a0 + 24] = 0x6e\n  4867: u8 [a0 + 23] = 0x69\n  4871: u8 [a0 + 21] = 0x6d\n  4875: u8 [a0 + 17] = 0x64\n  4879: u8 [a0 + 13] = 0x68\n  4883: u8 [a0 + 12] = 0x73\n  4887: u8 [a0 + 20] = 0x65\n  4891: u8 [a0 + 10] = 0x65\n  4895: u8 [a0 + 15] = 0x75\n  4899: u8 [a0 + 9] = 0x75\n  4903: u8 [a0 + 16] = 0x6c\n  4907: u8 [a0 + 8] = 0x6c\n  4911: u8 [a0 + 22] = 0x61\n  4915: u8 [a0 + 7] = 0x61\n  4919: u8 [a0 + 6] = 0x76\n  4923: u8 [a0 + 31] = 0\n  4926: u8 [a0 + 30] = 0\n  4929: u8 [a0 + 29] = 0\n  4932: u8 [a0 + 28] = 0\n  4935: u8 [a0 + 27] = 0\n  4938: u8 [a0 + 25] = 0x20\n  4942: u8 [a0 + 18] = 0x20\n  4946: u8 [a0 + 11] = 0x20\n  4950: u8 [a0 + 5] = 0x20\n  4954: u8 [a0 + 4] = 0x79\n  4958: u8 [a0 + 3] = 0x78\n  4962: u8 [a0 + 14] = 0x6f\n  4966: u8 [a0 + 2] = 0x6f\n  4970: u8 [a0 + 19] = 0x72\n  4974: u8 [a0 + 1] = 0x72\n  4978: u8 [a0 + 0] = 0x50\n  4981: a1 = u64 [sp]\n  4983: a0 = a1 + 0x60\n  4986: a1 = a0 <u a1\n  4989: a3 = u64 [sp + 0x8]\n  4992: a2 = a3 + a1\n  4995: a3 = a2 <u a3\n  4998: a3 = a1 if a1 == 0\n  5001: a1 = u64 [sp + 0x10]\n  5004: a3 = a3 + a1\n  5007: a1 = a3 <u a1\n  5010: a4 = u64 [sp + 0x18]\n  5013: a1 = a1 + a4\n  5016: a4 = u64 [sp + 0x28]\n  5019: u64 [a4] = a0\n  5021: u64 [a4 + 0x8] = a2\n  5024: u64 [a4 + 0x10] = a3\n  5027: u64 [a4 + 0x18] = a1\n  5030: ra = u64 [sp + 0x58]\n  5033: s0 = u64 [sp + 0x50]\n  5036: s1 = u64 [sp + 0x48]\n  5039: sp = sp + 0x60\n  5042: ret\n      : @103 (gas: 1)\n  5044: trap\n      : @104 (gas: 17)\n  5045: sp = sp + 0xffffffffffffffa0\n  5048: u64 [sp + 0x58] = ra\n  5051: u64 [sp + 0x50] = s0\n  5054: u64 [sp + 0x48] = s1\n  5057: a3 = u64 [a1 + 0x18]\n  5060: a4 = u64 [a1 + 0x10]\n  5063: a5 = u64 [a1 + 0x8]\n  5066: s1 = u64 [a1]\n  5068: a1 = a5 | a3\n  5071: a2 = s1 | a4\n  5074: a2 = a2 | a1\n  5077: a2 = a2 >> 0x20\n  5080: a1 = a1 | a4\n  5083: a1 = a1 << 0x20\n  5086: a1 = a1 | a2\n  5089: u64 [sp + 0x20] = a0\n  5092: jump @113 if a1 != 0\n      : @105 (gas: 19)\n  5096: a0 = s1 + 0x20\n  5099: u64 [sp + 0x38] = a0\n  5102: a0 = a0 <u s1\n  5105: a1 = a5 + a0\n  5108: u64 [sp + 0x40] = a1\n  5111: u64 [sp + 0x8] = a5\n  5114: s0 = a1 <u a5\n  5117: s0 = a0 if a0 == 0\n  5120: s0 = s0 + a4\n  5123: u64 [sp + 0x10] = a4\n  5126: a0 = s0 <u a4\n  5129: u64 [sp + 0x18] = a3\n  5132: a0 = a0 + a3\n  5135: u64 [sp + 0x30] = a0\n  5138: u64 [sp] = s1\n  5140: i32 a0 = s1 + 0\n  5142: a1 = 0x20\n  5145: s1 = 0x20\n  5148: ra = 88, jump @0\n      : @106 [@dyn 44] (gas: 43)\n  5153: u8 [a0 + 0x1f] = s1\n  5156: a1 = u64 [sp + 0x38]\n  5159: a1 = a1 | s0\n  5162: a2 = u64 [sp + 0x40]\n  5165: a3 = u64 [sp + 0x30]\n  5168: a2 = a2 | a3\n  5171: a1 = a1 | a2\n  5174: a1 = a1 >> 0x20\n  5177: a2 = a2 | s0\n  5180: a2 = a2 << 0x20\n  5183: a1 = a1 | a2\n  5186: u8 [a0 + 30] = 0\n  5189: u8 [a0 + 29] = 0\n  5192: u8 [a0 + 28] = 0\n  5195: u8 [a0 + 27] = 0\n  5198: u8 [a0 + 26] = 0\n  5201: u8 [a0 + 25] = 0\n  5204: u8 [a0 + 24] = 0\n  5207: u8 [a0 + 23] = 0\n  5210: u8 [a0 + 22] = 0\n  5213: u8 [a0 + 21] = 0\n  5216: u8 [a0 + 20] = 0\n  5219: u8 [a0 + 19] = 0\n  5222: u8 [a0 + 18] = 0\n  5225: u8 [a0 + 17] = 0\n  5228: u8 [a0 + 16] = 0\n  5231: u8 [a0 + 15] = 0\n  5234: u8 [a0 + 14] = 0\n  5237: u8 [a0 + 13] = 0\n  5240: u8 [a0 + 12] = 0\n  5243: u8 [a0 + 11] = 0\n  5246: u8 [a0 + 10] = 0\n  5249: u8 [a0 + 9] = 0\n  5252: u8 [a0 + 8] = 0\n  5255: u8 [a0 + 7] = 0\n  5258: u8 [a0 + 6] = 0\n  5261: u8 [a0 + 5] = 0\n  5264: u8 [a0 + 4] = 0\n  5267: u8 [a0 + 3] = 0\n  5270: u8 [a0 + 2] = 0\n  5273: u8 [a0 + 1] = 0\n  5276: u8 [a0 + 0] = 0\n  5278: jump @113 if a1 != 0\n      : @107 (gas: 5)\n  5282: s1 = u64 [sp + 0x38]\n  5285: i32 a0 = s1 + 0\n  5287: a1 = 0x20\n  5290: u64 [sp + 0x28] = a0\n  5293: ra = 90, jump @0\n      : @108 [@dyn 45] (gas: 42)\n  5298: u8 [a0 + 31] = 0x27\n  5302: u8 [a0 + 30] = 0\n  5305: u8 [a0 + 29] = 0\n  5308: u8 [a0 + 28] = 0\n  5311: u8 [a0 + 27] = 0\n  5314: u8 [a0 + 26] = 0\n  5317: u8 [a0 + 25] = 0\n  5320: u8 [a0 + 24] = 0\n  5323: u8 [a0 + 23] = 0\n  5326: u8 [a0 + 22] = 0\n  5329: u8 [a0 + 21] = 0\n  5332: u8 [a0 + 20] = 0\n  5335: u8 [a0 + 19] = 0\n  5338: u8 [a0 + 18] = 0\n  5341: u8 [a0 + 17] = 0\n  5344: u8 [a0 + 16] = 0\n  5347: u8 [a0 + 15] = 0\n  5350: u8 [a0 + 14] = 0\n  5353: u8 [a0 + 13] = 0\n  5356: u8 [a0 + 12] = 0\n  5359: u8 [a0 + 11] = 0\n  5362: u8 [a0 + 10] = 0\n  5365: u8 [a0 + 9] = 0\n  5368: u8 [a0 + 8] = 0\n  5371: u8 [a0 + 7] = 0\n  5374: u8 [a0 + 6] = 0\n  5377: u8 [a0 + 5] = 0\n  5380: u8 [a0 + 4] = 0\n  5383: u8 [a0 + 3] = 0\n  5386: u8 [a0 + 2] = 0\n  5389: u8 [a0 + 1] = 0\n  5392: a1 = u64 [sp + 0x30]\n  5395: a3 = s0 | a1\n  5398: s0 = 0x100000000\n  5408: a1 = 0xffffffe0\n  5418: a1 = s1 <u a1\n  5421: a2 = u64 [sp + 0x40]\n  5424: a1 = 0 if a2 != 0\n  5426: u64 [sp + 0x30] = a3\n  5429: a1 = 0 if a3 != 0\n  5431: u8 [a0 + 0] = 0\n  5433: jump @113 if a1 == 0\n      : @109 (gas: 4)\n  5437: a0 = u64 [sp + 0x28]\n  5440: i32 a0 = a0 + 0x20\n  5443: a1 = 0x20\n  5446: ra = 92, jump @0\n      : @110 [@dyn 46] (gas: 42)\n  5451: u8 [a0 + 30] = 0x69\n  5455: u8 [a0 + 25] = 0x66\n  5459: u8 [a0 + 22] = 0x31\n  5463: u8 [a0 + 19] = 0x62\n  5467: u8 [a0 + 17] = 0x64\n  5471: u8 [a0 + 13] = 0x68\n  5475: u8 [a0 + 12] = 0x73\n  5479: u8 [a0 + 15] = 0x75\n  5483: u8 [a0 + 9] = 0x75\n  5487: u8 [a0 + 16] = 0x6c\n  5491: u8 [a0 + 8] = 0x6c\n  5495: u8 [a0 + 24] = 0x61\n  5499: u8 [a0 + 7] = 0x61\n  5503: u8 [a0 + 6] = 0x76\n  5507: u8 [a0 + 29] = 0x20\n  5511: u8 [a0 + 23] = 0x20\n  5515: u8 [a0 + 21] = 0x20\n  5519: u8 [a0 + 18] = 0x20\n  5523: u8 [a0 + 11] = 0x20\n  5527: u8 [a0 + 5] = 0x20\n  5531: u8 [a0 + 4] = 0x79\n  5535: u8 [a0 + 3] = 0x78\n  5539: u8 [a0 + 14] = 0x6f\n  5543: u8 [a0 + 2] = 0x6f\n  5547: u8 [a0 + 0] = 0x50\n  5550: u8 [a0 + 31] = 0x6e\n  5554: a1 = s0 + 0xffffffffffffffc0\n  5557: a2 = u64 [sp + 0x38]\n  5560: a1 = a2 <u a1\n  5563: s0 = 0x72\n  5566: u8 [a0 + 0x1c] = s0\n  5569: a2 = u64 [sp + 0x40]\n  5572: a1 = 0 if a2 != 0\n  5574: s1 = 0x65\n  5577: u8 [a0 + 0x1b] = s1\n  5580: a2 = u64 [sp + 0x30]\n  5583: a1 = 0 if a2 != 0\n  5585: u8 [a0 + 26] = 0x74\n  5589: u8 [a0 + 0x14] = s1\n  5592: u8 [a0 + 0xa] = s1\n  5595: u8 [a0 + 0x1] = s0\n  5598: jump @113 if a1 == 0\n      : @111 (gas: 4)\n  5602: a0 = u64 [sp + 0x28]\n  5605: i32 a0 = a0 + 0x40\n  5608: a1 = 0x20\n  5611: ra = 94, jump @0\n      : @112 [@dyn 47] (gas: 54)\n  5616: u8 [a0 + 31] = 0\n  5619: u8 [a0 + 30] = 0\n  5622: u8 [a0 + 29] = 0\n  5625: u8 [a0 + 28] = 0\n  5628: u8 [a0 + 27] = 0\n  5631: u8 [a0 + 26] = 0\n  5634: u8 [a0 + 25] = 0\n  5637: u8 [a0 + 24] = 0\n  5640: u8 [a0 + 23] = 0\n  5643: u8 [a0 + 22] = 0\n  5646: u8 [a0 + 21] = 0\n  5649: u8 [a0 + 20] = 0\n  5652: u8 [a0 + 19] = 0\n  5655: u8 [a0 + 18] = 0\n  5658: u8 [a0 + 17] = 0\n  5661: u8 [a0 + 16] = 0\n  5664: u8 [a0 + 15] = 0\n  5667: u8 [a0 + 14] = 0\n  5670: u8 [a0 + 13] = 0\n  5673: u8 [a0 + 12] = 0\n  5676: u8 [a0 + 11] = 0\n  5679: u8 [a0 + 10] = 0\n  5682: u8 [a0 + 9] = 0\n  5685: u8 [a0 + 8] = 0\n  5688: u8 [a0 + 7] = 0\n  5691: u8 [a0 + 6] = 0x74\n  5695: u8 [a0 + 5] = 0x6e\n  5699: u8 [a0 + 0x4] = s1\n  5702: u8 [a0 + 3] = 0x6d\n  5706: u8 [a0 + 0x2] = s1\n  5709: u8 [a0 + 0x1] = s0\n  5712: u8 [a0 + 0] = 0x63\n  5715: a1 = u64 [sp]\n  5717: a0 = a1 + 0x80\n  5721: a1 = a0 <u a1\n  5724: a3 = u64 [sp + 0x8]\n  5727: a2 = a3 + a1\n  5730: a3 = a2 <u a3\n  5733: a3 = a1 if a1 == 0\n  5736: a1 = u64 [sp + 0x10]\n  5739: a3 = a3 + a1\n  5742: a1 = a3 <u a1\n  5745: a4 = u64 [sp + 0x18]\n  5748: a1 = a1 + a4\n  5751: a4 = u64 [sp + 0x20]\n  5754: u64 [a4] = a0\n  5756: u64 [a4 + 0x8] = a2\n  5759: u64 [a4 + 0x10] = a3\n  5762: u64 [a4 + 0x18] = a1\n  5765: ra = u64 [sp + 0x58]\n  5768: s0 = u64 [sp + 0x50]\n  5771: s1 = u64 [sp + 0x48]\n  5774: sp = sp + 0x60\n  5777: ret\n      : @113 (gas: 1)\n  5779: trap\n      : @114 (gas: 17)\n  5780: sp = sp + 0xffffffffffffffa0\n  5783: u64 [sp + 0x58] = ra\n  5786: u64 [sp + 0x50] = s0\n  5789: u64 [sp + 0x48] = s1\n  5792: a3 = u64 [a1 + 0x18]\n  5795: a4 = u64 [a1 + 0x10]\n  5798: a5 = u64 [a1 + 0x8]\n  5801: s1 = u64 [a1]\n  5803: a1 = a5 | a3\n  5806: a2 = s1 | a4\n  5809: a2 = a2 | a1\n  5812: a2 = a2 >> 0x20\n  5815: a1 = a1 | a4\n  5818: a1 = a1 << 0x20\n  5821: a1 = a1 | a2\n  5824: u64 [sp + 0x28] = a0\n  5827: jump @121 if a1 != 0\n      : @115 (gas: 19)\n  5831: a0 = s1 + 0x20\n  5834: u64 [sp + 0x30] = a0\n  5837: a0 = a0 <u s1\n  5840: a1 = a5 + a0\n  5843: u64 [sp + 0x40] = a1\n  5846: u64 [sp + 0x8] = a5\n  5849: s0 = a1 <u a5\n  5852: s0 = a0 if a0 == 0\n  5855: s0 = s0 + a4\n  5858: u64 [sp + 0x10] = a4\n  5861: a0 = s0 <u a4\n  5864: u64 [sp + 0x18] = a3\n  5867: a0 = a0 + a3\n  5870: u64 [sp + 0x38] = a0\n  5873: u64 [sp] = s1\n  5875: i32 a0 = s1 + 0\n  5877: a1 = 0x20\n  5880: s1 = 0x20\n  5883: ra = 96, jump @0\n      : @116 [@dyn 48] (gas: 45)\n  5888: u8 [a0 + 0x1f] = s1\n  5891: a1 = u64 [sp + 0x30]\n  5894: s1 = a1\n  5896: a1 = a1 | s0\n  5899: a2 = u64 [sp + 0x40]\n  5902: a4 = u64 [sp + 0x38]\n  5905: a2 = a2 | a4\n  5908: a1 = a1 | a2\n  5911: a1 = a1 >> 0x20\n  5914: u64 [sp + 0x20] = s0\n  5917: a2 = a2 | s0\n  5920: a2 = a2 << 0x20\n  5923: a1 = a1 | a2\n  5926: u8 [a0 + 30] = 0\n  5929: u8 [a0 + 29] = 0\n  5932: u8 [a0 + 28] = 0\n  5935: u8 [a0 + 27] = 0\n  5938: u8 [a0 + 26] = 0\n  5941: u8 [a0 + 25] = 0\n  5944: u8 [a0 + 24] = 0\n  5947: u8 [a0 + 23] = 0\n  5950: u8 [a0 + 22] = 0\n  5953: u8 [a0 + 21] = 0\n  5956: u8 [a0 + 20] = 0\n  5959: u8 [a0 + 19] = 0\n  5962: u8 [a0 + 18] = 0\n  5965: u8 [a0 + 17] = 0\n  5968: u8 [a0 + 16] = 0\n  5971: u8 [a0 + 15] = 0\n  5974: u8 [a0 + 14] = 0\n  5977: u8 [a0 + 13] = 0\n  5980: u8 [a0 + 12] = 0\n  5983: u8 [a0 + 11] = 0\n  5986: u8 [a0 + 10] = 0\n  5989: u8 [a0 + 9] = 0\n  5992: u8 [a0 + 8] = 0\n  5995: u8 [a0 + 7] = 0\n  5998: u8 [a0 + 6] = 0\n  6001: u8 [a0 + 5] = 0\n  6004: u8 [a0 + 4] = 0\n  6007: u8 [a0 + 3] = 0\n  6010: u8 [a0 + 2] = 0\n  6013: u8 [a0 + 1] = 0\n  6016: u8 [a0 + 0] = 0\n  6018: jump @121 if a1 != 0\n      : @117 (gas: 4)\n  6022: i32 s0 = s1 + 0\n  6024: a1 = 0x20\n  6027: a0 = s0\n  6029: ra = 98, jump @0\n      : @118 [@dyn 49] (gas: 41)\n  6034: u8 [a0 + 31] = 0x1b\n  6038: u8 [a0 + 30] = 0\n  6041: u8 [a0 + 29] = 0\n  6044: u8 [a0 + 28] = 0\n  6047: u8 [a0 + 27] = 0\n  6050: u8 [a0 + 26] = 0\n  6053: u8 [a0 + 25] = 0\n  6056: u8 [a0 + 24] = 0\n  6059: u8 [a0 + 23] = 0\n  6062: u8 [a0 + 22] = 0\n  6065: u8 [a0 + 21] = 0\n  6068: u8 [a0 + 20] = 0\n  6071: u8 [a0 + 19] = 0\n  6074: u8 [a0 + 18] = 0\n  6077: u8 [a0 + 17] = 0\n  6080: u8 [a0 + 16] = 0\n  6083: u8 [a0 + 15] = 0\n  6086: u8 [a0 + 14] = 0\n  6089: u8 [a0 + 13] = 0\n  6092: u8 [a0 + 12] = 0\n  6095: u8 [a0 + 11] = 0\n  6098: u8 [a0 + 10] = 0\n  6101: u8 [a0 + 9] = 0\n  6104: u8 [a0 + 8] = 0\n  6107: u8 [a0 + 7] = 0\n  6110: u8 [a0 + 6] = 0\n  6113: u8 [a0 + 5] = 0\n  6116: u8 [a0 + 4] = 0\n  6119: u8 [a0 + 3] = 0\n  6122: u8 [a0 + 2] = 0\n  6125: u8 [a0 + 1] = 0\n  6128: a1 = u64 [sp + 0x20]\n  6131: a2 = u64 [sp + 0x38]\n  6134: a1 = a1 | a2\n  6137: a2 = 0xffffffe0\n  6147: a2 = s1 <u a2\n  6150: a3 = u64 [sp + 0x40]\n  6153: a2 = 0 if a3 != 0\n  6155: a2 = 0 if a1 != 0\n  6157: u8 [a0 + 0] = 0\n  6159: jump @121 if a2 == 0\n      : @119 (gas: 3)\n  6163: i32 a0 = s0 + 0x20\n  6166: a1 = 0x20\n  6169: ra = 100, jump @0\n      : @120 [@dyn 50] (gas: 54)\n  6174: u8 [a0 + 26] = 0x31\n  6178: u8 [a0 + 24] = 0x6e\n  6182: u8 [a0 + 21] = 0x6d\n  6186: u8 [a0 + 19] = 0x72\n  6190: u8 [a0 + 17] = 0x64\n  6194: u8 [a0 + 13] = 0x68\n  6198: u8 [a0 + 12] = 0x73\n  6202: u8 [a0 + 20] = 0x65\n  6206: u8 [a0 + 10] = 0x65\n  6210: u8 [a0 + 15] = 0x75\n  6214: u8 [a0 + 9] = 0x75\n  6218: u8 [a0 + 16] = 0x6c\n  6222: u8 [a0 + 8] = 0x6c\n  6226: u8 [a0 + 22] = 0x61\n  6230: u8 [a0 + 7] = 0x61\n  6234: u8 [a0 + 6] = 0x76\n  6238: u8 [a0 + 31] = 0\n  6241: u8 [a0 + 30] = 0\n  6244: u8 [a0 + 29] = 0\n  6247: u8 [a0 + 28] = 0\n  6250: u8 [a0 + 27] = 0\n  6253: u8 [a0 + 25] = 0x20\n  6257: u8 [a0 + 18] = 0x20\n  6261: u8 [a0 + 11] = 0x20\n  6265: u8 [a0 + 5] = 0x20\n  6269: u8 [a0 + 4] = 0x63\n  6273: u8 [a0 + 23] = 0x69\n  6277: u8 [a0 + 3] = 0x69\n  6281: u8 [a0 + 2] = 0x67\n  6285: u8 [a0 + 14] = 0x6f\n  6289: u8 [a0 + 1] = 0x6f\n  6293: u8 [a0 + 0] = 0x4c\n  6296: a1 = u64 [sp]\n  6298: a0 = a1 + 0x60\n  6301: a1 = a0 <u a1\n  6304: a3 = u64 [sp + 0x8]\n  6307: a2 = a3 + a1\n  6310: a3 = a2 <u a3\n  6313: a3 = a1 if a1 == 0\n  6316: a1 = u64 [sp + 0x10]\n  6319: a3 = a3 + a1\n  6322: a1 = a3 <u a1\n  6325: a4 = u64 [sp + 0x18]\n  6328: a1 = a1 + a4\n  6331: a4 = u64 [sp + 0x28]\n  6334: u64 [a4] = a0\n  6336: u64 [a4 + 0x8] = a2\n  6339: u64 [a4 + 0x10] = a3\n  6342: u64 [a4 + 0x18] = a1\n  6345: ra = u64 [sp + 0x58]\n  6348: s0 = u64 [sp + 0x50]\n  6351: s1 = u64 [sp + 0x48]\n  6354: sp = sp + 0x60\n  6357: ret\n      : @121 (gas: 1)\n  6359: trap\n      : @122 (gas: 17)\n  6360: sp = sp + 0xffffffffffffffa0\n  6363: u64 [sp + 0x58] = ra\n  6366: u64 [sp + 0x50] = s0\n  6369: u64 [sp + 0x48] = s1\n  6372: a3 = u64 [a1 + 0x18]\n  6375: a4 = u64 [a1 + 0x10]\n  6378: a5 = u64 [a1 + 0x8]\n  6381: s1 = u64 [a1]\n  6383: a1 = a5 | a3\n  6386: a2 = s1 | a4\n  6389: a2 = a2 | a1\n  6392: a2 = a2 >> 0x20\n  6395: a1 = a1 | a4\n  6398: a1 = a1 << 0x20\n  6401: a1 = a1 | a2\n  6404: u64 [sp + 0x28] = a0\n  6407: jump @129 if a1 != 0\n      : @123 (gas: 19)\n  6411: a0 = s1 + 0x20\n  6414: u64 [sp + 0x30] = a0\n  6417: a0 = a0 <u s1\n  6420: a1 = a5 + a0\n  6423: u64 [sp + 0x40] = a1\n  6426: u64 [sp + 0x8] = a5\n  6429: s0 = a1 <u a5\n  6432: s0 = a0 if a0 == 0\n  6435: s0 = s0 + a4\n  6438: u64 [sp + 0x10] = a4\n  6441: a0 = s0 <u a4\n  6444: u64 [sp + 0x18] = a3\n  6447: a0 = a0 + a3\n  6450: u64 [sp + 0x38] = a0\n  6453: u64 [sp] = s1\n  6455: i32 a0 = s1 + 0\n  6457: a1 = 0x20\n  6460: s1 = 0x20\n  6463: ra = 102, jump @0\n      : @124 [@dyn 51] (gas: 45)\n  6468: u8 [a0 + 0x1f] = s1\n  6471: a1 = u64 [sp + 0x30]\n  6474: s1 = a1\n  6476: a1 = a1 | s0\n  6479: a2 = u64 [sp + 0x40]\n  6482: a4 = u64 [sp + 0x38]\n  6485: a2 = a2 | a4\n  6488: a1 = a1 | a2\n  6491: a1 = a1 >> 0x20\n  6494: u64 [sp + 0x20] = s0\n  6497: a2 = a2 | s0\n  6500: a2 = a2 << 0x20\n  6503: a1 = a1 | a2\n  6506: u8 [a0 + 30] = 0\n  6509: u8 [a0 + 29] = 0\n  6512: u8 [a0 + 28] = 0\n  6515: u8 [a0 + 27] = 0\n  6518: u8 [a0 + 26] = 0\n  6521: u8 [a0 + 25] = 0\n  6524: u8 [a0 + 24] = 0\n  6527: u8 [a0 + 23] = 0\n  6530: u8 [a0 + 22] = 0\n  6533: u8 [a0 + 21] = 0\n  6536: u8 [a0 + 20] = 0\n  6539: u8 [a0 + 19] = 0\n  6542: u8 [a0 + 18] = 0\n  6545: u8 [a0 + 17] = 0\n  6548: u8 [a0 + 16] = 0\n  6551: u8 [a0 + 15] = 0\n  6554: u8 [a0 + 14] = 0\n  6557: u8 [a0 + 13] = 0\n  6560: u8 [a0 + 12] = 0\n  6563: u8 [a0 + 11] = 0\n  6566: u8 [a0 + 10] = 0\n  6569: u8 [a0 + 9] = 0\n  6572: u8 [a0 + 8] = 0\n  6575: u8 [a0 + 7] = 0\n  6578: u8 [a0 + 6] = 0\n  6581: u8 [a0 + 5] = 0\n  6584: u8 [a0 + 4] = 0\n  6587: u8 [a0 + 3] = 0\n  6590: u8 [a0 + 2] = 0\n  6593: u8 [a0 + 1] = 0\n  6596: u8 [a0 + 0] = 0\n  6598: jump @129 if a1 != 0\n      : @125 (gas: 4)\n  6602: i32 s0 = s1 + 0\n  6604: a1 = 0x20\n  6607: a0 = s0\n  6609: ra = 104, jump @0\n      : @126 [@dyn 52] (gas: 41)\n  6614: u8 [a0 + 31] = 0x18\n  6618: u8 [a0 + 30] = 0\n  6621: u8 [a0 + 29] = 0\n  6624: u8 [a0 + 28] = 0\n  6627: u8 [a0 + 27] = 0\n  6630: u8 [a0 + 26] = 0\n  6633: u8 [a0 + 25] = 0\n  6636: u8 [a0 + 24] = 0\n  6639: u8 [a0 + 23] = 0\n  6642: u8 [a0 + 22] = 0\n  6645: u8 [a0 + 21] = 0\n  6648: u8 [a0 + 20] = 0\n  6651: u8 [a0 + 19] = 0\n  6654: u8 [a0 + 18] = 0\n  6657: u8 [a0 + 17] = 0\n  6660: u8 [a0 + 16] = 0\n  6663: u8 [a0 + 15] = 0\n  6666: u8 [a0 + 14] = 0\n  6669: u8 [a0 + 13] = 0\n  6672: u8 [a0 + 12] = 0\n  6675: u8 [a0 + 11] = 0\n  6678: u8 [a0 + 10] = 0\n  6681: u8 [a0 + 9] = 0\n  6684: u8 [a0 + 8] = 0\n  6687: u8 [a0 + 7] = 0\n  6690: u8 [a0 + 6] = 0\n  6693: u8 [a0 + 5] = 0\n  6696: u8 [a0 + 4] = 0\n  6699: u8 [a0 + 3] = 0\n  6702: u8 [a0 + 2] = 0\n  6705: u8 [a0 + 1] = 0\n  6708: a1 = u64 [sp + 0x20]\n  6711: a2 = u64 [sp + 0x38]\n  6714: a1 = a1 | a2\n  6717: a2 = 0xffffffe0\n  6727: a2 = s1 <u a2\n  6730: a3 = u64 [sp + 0x40]\n  6733: a2 = 0 if a3 != 0\n  6735: a2 = 0 if a1 != 0\n  6737: u8 [a0 + 0] = 0\n  6739: jump @129 if a2 == 0\n      : @127 (gas: 3)\n  6743: i32 a0 = s0 + 0x20\n  6746: a1 = 0x20\n  6749: ra = 106, jump @0\n      : @128 [@dyn 53] (gas: 55)\n  6754: u8 [a0 + 31] = 0\n  6757: u8 [a0 + 30] = 0\n  6760: u8 [a0 + 29] = 0\n  6763: u8 [a0 + 28] = 0\n  6766: u8 [a0 + 27] = 0\n  6769: u8 [a0 + 26] = 0\n  6772: u8 [a0 + 25] = 0\n  6775: u8 [a0 + 24] = 0\n  6778: u8 [a0 + 23] = 0x30\n  6782: u8 [a0 + 22] = 0x31\n  6786: u8 [a0 + 21] = 0x20\n  6790: u8 [a0 + 20] = 0x65\n  6794: u8 [a0 + 19] = 0x62\n  6798: u8 [a0 + 18] = 0x20\n  6802: u8 [a0 + 17] = 0x64\n  6806: u8 [a0 + 16] = 0x6c\n  6810: u8 [a0 + 15] = 0x75\n  6814: u8 [a0 + 14] = 0x6f\n  6818: u8 [a0 + 13] = 0x68\n  6822: a5 = 0x73\n  6825: u8 [a0 + 0xc] = a5\n  6828: u8 [a0 + 11] = 0x20\n  6832: u8 [a0 + 10] = 0x65\n  6836: u8 [a0 + 9] = 0x75\n  6840: u8 [a0 + 8] = 0x6c\n  6844: u8 [a0 + 7] = 0x61\n  6848: u8 [a0 + 6] = 0x76\n  6852: u8 [a0 + 5] = 0x20\n  6856: u8 [a0 + 4] = 0x79\n  6860: u8 [a0 + 3] = 0x78\n  6864: u8 [a0 + 2] = 0x6f\n  6868: u8 [a0 + 1] = 0x72\n  6872: u8 [a0 + 0] = 0x50\n  6875: a1 = u64 [sp]\n  6877: a0 = a1 + 0x60\n  6880: a1 = a0 <u a1\n  6883: a3 = u64 [sp + 0x8]\n  6886: a2 = a3 + a1\n  6889: a3 = a2 <u a3\n  6892: a3 = a1 if a1 == 0\n  6895: a1 = u64 [sp + 0x10]\n  6898: a3 = a3 + a1\n  6901: a1 = a3 <u a1\n  6904: a4 = u64 [sp + 0x18]\n  6907: a1 = a1 + a4\n  6910: a4 = u64 [sp + 0x28]\n  6913: u64 [a4] = a0\n  6915: u64 [a4 + 0x8] = a2\n  6918: u64 [a4 + 0x10] = a3\n  6921: u64 [a4 + 0x18] = a1\n  6924: ra = u64 [sp + 0x58]\n  6927: s0 = u64 [sp + 0x50]\n  6930: s1 = u64 [sp + 0x48]\n  6933: sp = sp + 0x60\n  6936: ret\n      : @129 (gas: 1)\n  6938: trap\n      : @130 [@dyn 54] (gas: 97)\n  6939: a1 = u8 [a0 + 0x9]\n  6942: a2 = u8 [a0 + 0x8]\n  6945: a3 = u8 [a0 + 0xa]\n  6948: a4 = u8 [a0 + 0xb]\n  6951: a1 = a1 << 0x8\n  6954: a1 = a1 | a2\n  6957: a3 = a3 << 0x10\n  6960: a4 = a4 << 0x18\n  6963: a3 = a3 | a4\n  6966: a1 = a1 | a3\n  6969: a2 = u8 [a0 + 0xd]\n  6972: a3 = u8 [a0 + 0xc]\n  6975: a4 = u8 [a0 + 0xe]\n  6978: a5 = u8 [a0 + 0xf]\n  6981: a2 = a2 << 0x8\n  6984: a2 = a2 | a3\n  6987: a4 = a4 << 0x10\n  6990: a5 = a5 << 0x18\n  6993: a4 = a4 | a5\n  6996: a2 = a2 | a4\n  6999: a2 = a2 << 0x20\n  7002: t0 = a2 | a1\n  7005: a2 = u8 [a0 + 0x1]\n  7008: a3 = u8 [a0]\n  7010: a4 = u8 [a0 + 0x2]\n  7013: a5 = u8 [a0 + 0x3]\n  7016: a2 = a2 << 0x8\n  7019: a2 = a2 | a3\n  7022: a4 = a4 << 0x10\n  7025: a5 = a5 << 0x18\n  7028: a4 = a4 | a5\n  7031: a2 = a2 | a4\n  7034: a3 = u8 [a0 + 0x5]\n  7037: a4 = u8 [a0 + 0x4]\n  7040: a5 = u8 [a0 + 0x6]\n  7043: s1 = u8 [a0 + 0x7]\n  7046: a3 = a3 << 0x8\n  7049: a3 = a3 | a4\n  7052: a5 = a5 << 0x10\n  7055: s1 = s1 << 0x18\n  7058: a5 = a5 | s1\n  7061: a3 = a3 | a5\n  7064: a3 = a3 << 0x20\n  7067: a2 = a2 | a3\n  7070: a3 = u8 [a0 + 0x19]\n  7073: a4 = u8 [a0 + 0x18]\n  7076: a5 = u8 [a0 + 0x1a]\n  7079: s1 = u8 [a0 + 0x1b]\n  7082: a3 = a3 << 0x8\n  7085: a3 = a3 | a4\n  7088: a5 = a5 << 0x10\n  7091: s1 = s1 << 0x18\n  7094: a5 = a5 | s1\n  7097: a3 = a3 | a5\n  7100: a4 = u8 [a0 + 0x1d]\n  7103: a5 = u8 [a0 + 0x1c]\n  7106: s1 = u8 [a0 + 0x1e]\n  7109: a1 = u8 [a0 + 0x1f]\n  7112: a4 = a4 << 0x8\n  7115: a4 = a4 | a5\n  7118: s1 = s1 << 0x10\n  7121: a1 = a1 << 0x18\n  7124: a1 = a1 | s1\n  7127: a1 = a1 | a4\n  7130: a1 = a1 << 0x20\n  7133: a3 = a3 | a1\n  7136: a1 = u8 [a0 + 0x11]\n  7139: a4 = u8 [a0 + 0x10]\n  7142: a5 = u8 [a0 + 0x12]\n  7145: s1 = u8 [a0 + 0x13]\n  7148: a1 = a1 << 0x8\n  7151: a1 = a1 | a4\n  7154: a5 = a5 << 0x10\n  7157: s1 = s1 << 0x18\n  7160: a5 = a5 | s1\n  7163: a1 = a1 | a5\n  7166: a4 = u8 [a0 + 0x15]\n  7169: a5 = u8 [a0 + 0x14]\n  7172: s1 = u8 [a0 + 0x16]\n  7175: a0 = u8 [a0 + 0x17]\n  7178: a4 = a4 << 0x8\n  7181: a4 = a4 | a5\n  7184: s1 = s1 << 0x10\n  7187: a0 = a0 << 0x18\n  7190: a0 = a0 | s1\n  7193: a0 = a0 | a4\n  7196: a0 = a0 << 0x20\n  7199: a0 = a0 | a1\n  7202: a0 = reverse a0\n  7204: s1 = reverse a3\n  7206: a2 = reverse a2\n  7208: a1 = reverse t0\n  7210: a3 = a1 | a2\n  7213: a4 = s1 <u 0xffffffffffffffe0\n  7216: a4 = 0 if a0 != 0\n  7218: a4 = 0 if a3 != 0\n  7220: jump @132 if a4 != 0\n      : @131 (gas: 1)\n  7223: jump @405\n      : @132 (gas: 8)\n  7226: a3 = s1 | a1\n  7229: a0 = a0 | a2\n  7232: a3 = a3 | a0\n  7235: a3 = a3 >> 0x20\n  7238: a0 = a0 | a1\n  7241: a0 = a0 << 0x20\n  7244: a0 = a0 | a3\n  7247: jump @134 if a0 == 0\n      : @133 (gas: 1)\n  7250: jump @401\n      : @134 (gas: 6)\n  7253: a0 = 0xffffffff\n  7263: u64 [sp + 0x98] = a0\n  7267: i32 s1 = s1 + 0\n  7269: a1 = 0x20\n  7272: a0 = s1\n  7274: ra = 110, jump @0\n      : @135 [@dyn 55] (gas: 35)\n  7279: u8 [a0 + 31] = 0x5a\n  7283: u8 [a0 + 30] = 0x22\n  7287: u8 [a0 + 29] = 0x4\n  7291: u8 [a0 + 28] = 0x50\n  7295: u8 [a0 + 27] = 0x60\n  7299: u8 [a0 + 26] = 0x72\n  7303: u8 [a0 + 25] = 0xa5\n  7308: u8 [a0 + 24] = 0x16\n  7312: u8 [a0 + 23] = 0x8\n  7316: u8 [a0 + 22] = 0xc7\n  7321: u8 [a0 + 21] = 0x77\n  7325: u8 [a0 + 20] = 0x80\n  7330: u8 [a0 + 19] = 0xd6\n  7335: u8 [a0 + 18] = 0x47\n  7339: u8 [a0 + 17] = 0xe4\n  7344: u8 [a0 + 16] = 0x6c\n  7348: u8 [a0 + 15] = 0x49\n  7352: u8 [a0 + 14] = 0xe\n  7356: u8 [a0 + 13] = 0x6d\n  7360: u8 [a0 + 12] = 0x3a\n  7364: u8 [a0 + 11] = 0xa4\n  7369: u8 [a0 + 10] = 0xdb\n  7374: u8 [a0 + 9] = 0xcf\n  7379: u8 [a0 + 8] = 0x9c\n  7384: u8 [a0 + 7] = 0xa7\n  7389: u8 [a0 + 6] = 0x21\n  7393: u8 [a0 + 5] = 0x37\n  7397: u8 [a0 + 4] = 0xb\n  7401: u8 [a0 + 3] = 0x9d\n  7406: u8 [a0 + 2] = 0x1a\n  7410: u8 [a0 + 1] = 0x9\n  7414: u8 [a0 + 0] = 0xa1\n  7418: a1 = 0x20\n  7421: a0 = s1\n  7423: ra = 112, jump @0\n      : @136 [@dyn 56] (gas: 31)\n  7428: u64 [sp + 1464] = 0\n  7432: u64 [sp + 1456] = 0\n  7436: u64 [sp + 1448] = 0\n  7440: u64 [sp + 1440] = 0\n  7444: u64 [sp + 1496] = 0\n  7448: u64 [sp + 1488] = 0\n  7452: u64 [sp + 1480] = 0\n  7456: u64 [sp + 1472] = 0\n  7460: u64 [sp + 1528] = 0xffffffffffffffff\n  7465: u64 [sp + 1520] = 0xffffffffffffffff\n  7470: u64 [sp + 1512] = 0xffffffffffffffff\n  7475: u64 [sp + 1504] = 0xffffffffffffffff\n  7480: a1 = sp + 0x5a0\n  7484: a1 = a1 << 0x20\n  7487: a1 = a1 >> 0x20\n  7490: a2 = sp + 0x5e0\n  7494: a2 = a2 << 0x20\n  7497: a2 = a2 | a1\n  7500: a0 = a0 << 0x20\n  7503: a0 = a0 >> 0x20\n  7506: a1 = 0x2000000000\n  7516: a3 = a0 | a1\n  7519: a0 = sp + 0x5c0\n  7523: a0 = a0 << 0x20\n  7526: a5 = u64 [sp + 0x98]\n  7530: a5 = a5 | a0\n  7533: a0 = 0xffffffffffffffff\n  7536: a1 = 0xffffffffffffffff\n  7539: a4 = 0xffffffffffffffff\n  7542: ecalli 5 // 'instantiate'\n  7544: fallthrough\n      : @137 (gas: 9)\n  7545: a0 = u32 [sp + 0x5d0]\n  7549: a1 = u64 [sp + 0x5c0]\n  7553: a2 = u64 [sp + 0x5c8]\n  7557: u64 [sp + 0x88] = a0\n  7561: u64 [sp + 0x80] = a1\n  7565: a0 = a0 | a1\n  7568: u64 [sp + 0x78] = a2\n  7571: a0 = a0 | a2\n  7574: jump @139 if a0 != 0\n      : @138 (gas: 1)\n  7577: jump @362\n      : @139 (gas: 3)\n  7580: a0 = 0x40\n  7583: a1 = 0x20\n  7586: ra = 114, jump @0\n      : @140 [@dyn 57] (gas: 97)\n  7591: a1 = u8 [a0 + 0x19]\n  7594: a2 = u8 [a0 + 0x18]\n  7597: a3 = u8 [a0 + 0x1a]\n  7600: a4 = u8 [a0 + 0x1b]\n  7603: a1 = a1 << 0x8\n  7606: a1 = a1 | a2\n  7609: a3 = a3 << 0x10\n  7612: a4 = a4 << 0x18\n  7615: a3 = a3 | a4\n  7618: a1 = a1 | a3\n  7621: a2 = u8 [a0 + 0x1d]\n  7624: a3 = u8 [a0 + 0x1c]\n  7627: a4 = u8 [a0 + 0x1e]\n  7630: a5 = u8 [a0 + 0x1f]\n  7633: a2 = a2 << 0x8\n  7636: a2 = a2 | a3\n  7639: a4 = a4 << 0x10\n  7642: a5 = a5 << 0x18\n  7645: a4 = a4 | a5\n  7648: a2 = a2 | a4\n  7651: a2 = a2 << 0x20\n  7654: t0 = a2 | a1\n  7657: a2 = u8 [a0 + 0x11]\n  7660: a3 = u8 [a0 + 0x10]\n  7663: a4 = u8 [a0 + 0x12]\n  7666: a5 = u8 [a0 + 0x13]\n  7669: a2 = a2 << 0x8\n  7672: a2 = a2 | a3\n  7675: a4 = a4 << 0x10\n  7678: a5 = a5 << 0x18\n  7681: a4 = a4 | a5\n  7684: a2 = a2 | a4\n  7687: a3 = u8 [a0 + 0x15]\n  7690: a4 = u8 [a0 + 0x14]\n  7693: a5 = u8 [a0 + 0x16]\n  7696: s1 = u8 [a0 + 0x17]\n  7699: a3 = a3 << 0x8\n  7702: a3 = a3 | a4\n  7705: a5 = a5 << 0x10\n  7708: s1 = s1 << 0x18\n  7711: a5 = a5 | s1\n  7714: a3 = a3 | a5\n  7717: a3 = a3 << 0x20\n  7720: a2 = a2 | a3\n  7723: a3 = u8 [a0 + 0x9]\n  7726: a4 = u8 [a0 + 0x8]\n  7729: a5 = u8 [a0 + 0xa]\n  7732: s1 = u8 [a0 + 0xb]\n  7735: a3 = a3 << 0x8\n  7738: a3 = a3 | a4\n  7741: a5 = a5 << 0x10\n  7744: s1 = s1 << 0x18\n  7747: a5 = a5 | s1\n  7750: a3 = a3 | a5\n  7753: a4 = u8 [a0 + 0xd]\n  7756: a5 = u8 [a0 + 0xc]\n  7759: s1 = u8 [a0 + 0xe]\n  7762: a1 = u8 [a0 + 0xf]\n  7765: a4 = a4 << 0x8\n  7768: a4 = a4 | a5\n  7771: s1 = s1 << 0x10\n  7774: a1 = a1 << 0x18\n  7777: a1 = a1 | s1\n  7780: a1 = a1 | a4\n  7783: a1 = a1 << 0x20\n  7786: a3 = a3 | a1\n  7789: a1 = u8 [a0 + 0x1]\n  7792: a4 = u8 [a0]\n  7794: a5 = u8 [a0 + 0x2]\n  7797: s1 = u8 [a0 + 0x3]\n  7800: a1 = a1 << 0x8\n  7803: a1 = a1 | a4\n  7806: a5 = a5 << 0x10\n  7809: s1 = s1 << 0x18\n  7812: a5 = a5 | s1\n  7815: a1 = a1 | a5\n  7818: a4 = u8 [a0 + 0x5]\n  7821: a5 = u8 [a0 + 0x4]\n  7824: s1 = u8 [a0 + 0x6]\n  7827: a0 = u8 [a0 + 0x7]\n  7830: a4 = a4 << 0x8\n  7833: a4 = a4 | a5\n  7836: s1 = s1 << 0x10\n  7839: a0 = a0 << 0x18\n  7842: a0 = a0 | s1\n  7845: a0 = a0 | a4\n  7848: a0 = a0 << 0x20\n  7851: a0 = a0 | a1\n  7854: a0 = reverse a0\n  7856: a3 = reverse a3\n  7858: a2 = reverse a2\n  7860: a1 = reverse t0\n  7862: a4 = a3 | a0\n  7865: a5 = a1 <u 0xffffffffffffffe0\n  7868: a5 = 0 if a2 != 0\n  7870: a5 = 0 if a4 != 0\n  7872: jump @142 if a5 != 0\n      : @141 (gas: 1)\n  7875: jump @407\n      : @142 (gas: 8)\n  7878: a4 = a1 | a3\n  7881: a5 = a2 | a0\n  7884: a4 = a4 | a5\n  7887: a4 = a4 >> 0x20\n  7890: a5 = a5 | a3\n  7893: a5 = a5 << 0x20\n  7896: a4 = a4 | a5\n  7899: jump @144 if a4 == 0\n      : @143 (gas: 1)\n  7902: jump @401\n      : @144 (gas: 15)\n  7905: a4 = a1 + 0x20\n  7908: u64 [sp + 0x68] = a4\n  7911: a4 = a4 <u a1\n  7914: a5 = a2 + a4\n  7917: u64 [sp + 0x90] = a5\n  7921: s1 = a5 <u a2\n  7924: s1 = a4 if a4 == 0\n  7927: s1 = s1 + a3\n  7930: a2 = s1 <u a3\n  7933: a0 = a0 + a2\n  7936: u64 [sp + 0x70] = a0\n  7939: i32 a0 = a1 + 0\n  7941: a1 = 0x20\n  7944: u64 [sp + 0x60] = a0\n  7947: ra = 116, jump @0\n      : @145 [@dyn 58] (gas: 43)\n  7952: a4 = u64 [sp + 0x68]\n  7955: u8 [a0 + 31] = 0x42\n  7959: u8 [a0 + 30] = 0xfb\n  7964: u8 [a0 + 29] = 0\n  7967: u8 [a0 + 28] = 0x4d\n  7971: u8 [a0 + 27] = 0xb7\n  7976: u8 [a0 + 26] = 0xb1\n  7981: u8 [a0 + 25] = 0xb6\n  7986: u8 [a0 + 24] = 0xf2\n  7991: u8 [a0 + 23] = 0xa5\n  7996: u8 [a0 + 22] = 0x50\n  8000: u8 [a0 + 21] = 0x58\n  8004: u8 [a0 + 20] = 0xa9\n  8009: u8 [a0 + 19] = 0xbe\n  8014: u8 [a0 + 18] = 0xb0\n  8019: u8 [a0 + 17] = 0xd7\n  8024: u8 [a0 + 16] = 0xfc\n  8029: u8 [a0 + 15] = 0xe2\n  8034: u8 [a0 + 14] = 0xc1\n  8039: u8 [a0 + 13] = 0x30\n  8043: u8 [a0 + 12] = 0x54\n  8047: u8 [a0 + 11] = 0x68\n  8051: u8 [a0 + 10] = 0xb\n  8055: u8 [a0 + 9] = 0xac\n  8060: u8 [a0 + 8] = 0x30\n  8064: u8 [a0 + 7] = 0x50\n  8068: u8 [a0 + 6] = 0x6c\n  8072: u8 [a0 + 5] = 0x4f\n  8076: u8 [a0 + 4] = 0xdb\n  8081: u8 [a0 + 3] = 0x46\n  8085: u8 [a0 + 2] = 0x5d\n  8089: u8 [a0 + 1] = 0x52\n  8093: a2 = a4 | s1\n  8096: a3 = u64 [sp + 0x90]\n  8100: a5 = u64 [sp + 0x70]\n  8103: a3 = a3 | a5\n  8106: a2 = a2 | a3\n  8109: a2 = a2 >> 0x20\n  8112: a3 = a3 | s1\n  8115: a3 = a3 << 0x20\n  8118: a2 = a2 | a3\n  8121: u8 [a0 + 0] = 0xc2\n  8125: jump @147 if a2 == 0\n      : @146 (gas: 1)\n  8128: jump @401\n      : @147 (gas: 18)\n  8131: a0 = u64 [sp + 0x78]\n  8134: a0 = reverse a0\n  8136: a1 = a0 >> 0x20\n  8139: a2 = u64 [sp + 0x80]\n  8143: a2 = reverse a2\n  8145: a3 = a2 << 0x20\n  8148: a1 = a1 | a3\n  8151: u64 [sp + 0x90] = a1\n  8155: a0 = a0 << 0x20\n  8158: a1 = u64 [sp + 0x88]\n  8162: a1 = reverse a1\n  8164: a1 = a1 >> 0x20\n  8167: a0 = a0 | a1\n  8170: u64 [sp + 0x70] = a0\n  8173: s1 = a2 >> 0x20\n  8176: i32 a0 = a4 + 0\n  8178: a1 = 0x20\n  8181: ra = 118, jump @0\n      : @148 [@dyn 59] (gas: 58)\n  8186: a1 = reverse s1\n  8188: a2 = u64 [sp + 0x90]\n  8192: a2 = reverse a2\n  8194: a3 = u64 [sp + 0x70]\n  8197: a3 = reverse a3\n  8199: a4 = a3 >> 0x38\n  8202: u8 [a0 + 0x1f] = a4\n  8205: a4 = a3 >> 0x30\n  8208: u8 [a0 + 0x1e] = a4\n  8211: a4 = a3 >> 0x28\n  8214: u8 [a0 + 0x1d] = a4\n  8217: a4 = a3 >> 0x20\n  8220: u8 [a0 + 0x1c] = a4\n  8223: a4 = a3 >> 0x18\n  8226: u8 [a0 + 0x1b] = a4\n  8229: a4 = a3 >> 0x10\n  8232: u8 [a0 + 0x1a] = a4\n  8235: a4 = a3 >> 0x8\n  8238: u8 [a0 + 0x19] = a4\n  8241: u8 [a0 + 0x18] = a3\n  8244: u8 [a0 + 0x10] = a2\n  8247: u8 [a0 + 11] = 0\n  8250: u8 [a0 + 10] = 0\n  8253: u8 [a0 + 9] = 0\n  8256: u8 [a0 + 7] = 0\n  8259: u8 [a0 + 6] = 0\n  8262: u8 [a0 + 5] = 0\n  8265: u8 [a0 + 4] = 0\n  8268: u8 [a0 + 3] = 0\n  8271: u8 [a0 + 2] = 0\n  8274: u8 [a0 + 1] = 0\n  8277: u8 [a0 + 0] = 0\n  8279: a3 = a2 >> 0x38\n  8282: u8 [a0 + 0x17] = a3\n  8285: a3 = a2 >> 0x30\n  8288: u8 [a0 + 0x16] = a3\n  8291: a3 = a2 >> 0x28\n  8294: u8 [a0 + 0x15] = a3\n  8297: a3 = a2 >> 0x20\n  8300: u8 [a0 + 0x14] = a3\n  8303: a3 = a2 >> 0x18\n  8306: u8 [a0 + 0x13] = a3\n  8309: a3 = a2 >> 0x10\n  8312: u8 [a0 + 0x12] = a3\n  8315: a2 = a2 >> 0x8\n  8318: u8 [a0 + 0x11] = a2\n  8321: u8 [a0 + 0x8] = a1\n  8324: a2 = a1 >> 0x38\n  8327: u8 [a0 + 0xf] = a2\n  8330: a2 = a1 >> 0x30\n  8333: u8 [a0 + 0xe] = a2\n  8336: a2 = a1 >> 0x28\n  8339: u8 [a0 + 0xd] = a2\n  8342: a1 = a1 >> 0x20\n  8345: u8 [a0 + 0xc] = a1\n  8348: a1 = 0x40\n  8351: a0 = u64 [sp + 0x60]\n  8354: ra = 120, jump @0\n      : @149 [@dyn 60] (gas: 31)\n  8359: u64 [sp + 1560] = 0\n  8363: u64 [sp + 1552] = 0\n  8367: u64 [sp + 1544] = 0\n  8371: u64 [sp + 1536] = 0\n  8375: u64 [sp + 1592] = 0\n  8379: u64 [sp + 1584] = 0\n  8383: u64 [sp + 1576] = 0\n  8387: u64 [sp + 1568] = 0\n  8391: u64 [sp + 1624] = 0xffffffffffffffff\n  8396: u64 [sp + 1616] = 0xffffffffffffffff\n  8401: u64 [sp + 1608] = 0xffffffffffffffff\n  8406: u64 [sp + 1600] = 0xffffffffffffffff\n  8411: a1 = sp + 0x600\n  8415: a1 = a1 << 0x20\n  8418: a1 = a1 >> 0x20\n  8421: a2 = sp + 0x640\n  8425: a2 = a2 << 0x20\n  8428: a2 = a2 | a1\n  8431: a0 = a0 << 0x20\n  8434: a0 = a0 >> 0x20\n  8437: a1 = 0x4000000000\n  8447: a3 = a0 | a1\n  8450: a0 = sp + 0x620\n  8454: a0 = a0 << 0x20\n  8457: a5 = u64 [sp + 0x98]\n  8461: a5 = a5 | a0\n  8464: a0 = 0xffffffffffffffff\n  8467: a1 = 0xffffffffffffffff\n  8470: a4 = 0xffffffffffffffff\n  8473: ecalli 5 // 'instantiate'\n  8475: fallthrough\n      : @150 (gas: 9)\n  8476: a0 = u32 [sp + 0x630]\n  8480: a1 = u64 [sp + 0x620]\n  8484: a2 = u64 [sp + 0x628]\n  8488: u64 [sp + 0x70] = a0\n  8491: u64 [sp + 0x68] = a1\n  8494: a0 = a0 | a1\n  8497: u64 [sp + 0x60] = a2\n  8500: a0 = a0 | a2\n  8503: jump @152 if a0 != 0\n      : @151 (gas: 1)\n  8506: jump @362\n      : @152 (gas: 3)\n  8509: a0 = 0x40\n  8512: a1 = 0x20\n  8515: ra = 122, jump @0\n      : @153 [@dyn 61] (gas: 103)\n  8520: a1 = u8 [a0 + 0x11]\n  8523: a2 = u8 [a0 + 0x10]\n  8526: a3 = u8 [a0 + 0x12]\n  8529: a4 = u8 [a0 + 0x13]\n  8532: a1 = a1 << 0x8\n  8535: a1 = a1 | a2\n  8538: a3 = a3 << 0x10\n  8541: a4 = a4 << 0x18\n  8544: a3 = a3 | a4\n  8547: a1 = a1 | a3\n  8550: a2 = u8 [a0 + 0x15]\n  8553: a3 = u8 [a0 + 0x14]\n  8556: a4 = u8 [a0 + 0x16]\n  8559: a5 = u8 [a0 + 0x17]\n  8562: a2 = a2 << 0x8\n  8565: a2 = a2 | a3\n  8568: a4 = a4 << 0x10\n  8571: a5 = a5 << 0x18\n  8574: a4 = a4 | a5\n  8577: a2 = a2 | a4\n  8580: a2 = a2 << 0x20\n  8583: t0 = a2 | a1\n  8586: a2 = u8 [a0 + 0x1]\n  8589: a3 = u8 [a0]\n  8591: a4 = u8 [a0 + 0x2]\n  8594: a5 = u8 [a0 + 0x3]\n  8597: a2 = a2 << 0x8\n  8600: a2 = a2 | a3\n  8603: a4 = a4 << 0x10\n  8606: a5 = a5 << 0x18\n  8609: a4 = a4 | a5\n  8612: a2 = a2 | a4\n  8615: a3 = u8 [a0 + 0x5]\n  8618: a4 = u8 [a0 + 0x4]\n  8621: a5 = u8 [a0 + 0x6]\n  8624: s1 = u8 [a0 + 0x7]\n  8627: a3 = a3 << 0x8\n  8630: a3 = a3 | a4\n  8633: a5 = a5 << 0x10\n  8636: s1 = s1 << 0x18\n  8639: a5 = a5 | s1\n  8642: a3 = a3 | a5\n  8645: a3 = a3 << 0x20\n  8648: a2 = a2 | a3\n  8651: a3 = u8 [a0 + 0x19]\n  8654: a4 = u8 [a0 + 0x18]\n  8657: a5 = u8 [a0 + 0x1a]\n  8660: s1 = u8 [a0 + 0x1b]\n  8663: a3 = a3 << 0x8\n  8666: a3 = a3 | a4\n  8669: a5 = a5 << 0x10\n  8672: s1 = s1 << 0x18\n  8675: a5 = a5 | s1\n  8678: a3 = a3 | a5\n  8681: a4 = u8 [a0 + 0x1d]\n  8684: a5 = u8 [a0 + 0x1c]\n  8687: s1 = u8 [a0 + 0x1e]\n  8690: a1 = u8 [a0 + 0x1f]\n  8693: a4 = a4 << 0x8\n  8696: a4 = a4 | a5\n  8699: s1 = s1 << 0x10\n  8702: a1 = a1 << 0x18\n  8705: a1 = a1 | s1\n  8708: a1 = a1 | a4\n  8711: a1 = a1 << 0x20\n  8714: a3 = a3 | a1\n  8717: a1 = u8 [a0 + 0x9]\n  8720: a4 = u8 [a0 + 0x8]\n  8723: a5 = u8 [a0 + 0xa]\n  8726: s1 = u8 [a0 + 0xb]\n  8729: a1 = a1 << 0x8\n  8732: a1 = a1 | a4\n  8735: a5 = a5 << 0x10\n  8738: s1 = s1 << 0x18\n  8741: a5 = a5 | s1\n  8744: a1 = a1 | a5\n  8747: a4 = u8 [a0 + 0xd]\n  8750: a5 = u8 [a0 + 0xc]\n  8753: s1 = u8 [a0 + 0xe]\n  8756: a0 = u8 [a0 + 0xf]\n  8759: a4 = a4 << 0x8\n  8762: a4 = a4 | a5\n  8765: s1 = s1 << 0x10\n  8768: a0 = a0 << 0x18\n  8771: a0 = a0 | s1\n  8774: a0 = a0 | a4\n  8777: a0 = a0 << 0x20\n  8780: a0 = a0 | a1\n  8783: a4 = reverse a0\n  8785: a3 = reverse a3\n  8787: a0 = reverse a2\n  8789: a1 = reverse t0\n  8791: u64 [sp + 0x50] = a0\n  8794: u64 [sp + 0x48] = a1\n  8797: a0 = a0 | a1\n  8800: a1 = a3 | a4\n  8803: a1 = a1 | a0\n  8806: a1 = a1 >> 0x20\n  8809: u64 [sp + 0x58] = a4\n  8812: a0 = a0 | a4\n  8815: a0 = a0 << 0x20\n  8818: a0 = a0 | a1\n  8821: jump @155 if a0 == 0\n      : @154 (gas: 1)\n  8824: jump @401\n      : @155 (gas: 9)\n  8827: a0 = 0x1800000000\n  8837: u64 [sp + 0x90] = a0\n  8841: a0 = 0x400000000\n  8851: u64 [sp + 0x98] = a0\n  8855: u64 [sp + 0x30] = a3\n  8858: i32 s1 = a3 + 0\n  8860: a1 = 0x20\n  8863: a0 = s1\n  8865: ra = 124, jump @0\n      : @156 [@dyn 62] (gas: 46)\n  8870: u8 [a0 + 31] = 0\n  8873: u8 [a0 + 30] = 0\n  8876: u8 [a0 + 29] = 0\n  8879: u8 [a0 + 28] = 0\n  8882: u8 [a0 + 27] = 0\n  8885: u8 [a0 + 26] = 0\n  8888: u8 [a0 + 25] = 0\n  8891: u8 [a0 + 24] = 0\n  8894: u8 [a0 + 23] = 0\n  8897: u8 [a0 + 22] = 0\n  8900: u8 [a0 + 21] = 0\n  8903: u8 [a0 + 20] = 0\n  8906: u8 [a0 + 19] = 0\n  8909: u8 [a0 + 18] = 0\n  8912: u8 [a0 + 17] = 0\n  8915: u8 [a0 + 16] = 0\n  8918: u8 [a0 + 15] = 0\n  8921: u8 [a0 + 14] = 0\n  8924: u8 [a0 + 13] = 0\n  8927: u8 [a0 + 12] = 0\n  8930: u8 [a0 + 11] = 0\n  8933: u8 [a0 + 10] = 0\n  8936: u8 [a0 + 9] = 0\n  8939: u8 [a0 + 8] = 0\n  8942: u8 [a0 + 7] = 0\n  8945: u8 [a0 + 6] = 0\n  8948: u8 [a0 + 5] = 0\n  8951: u8 [a0 + 4] = 0\n  8954: u8 [a0 + 3] = 0x45\n  8958: u8 [a0 + 2] = 0xf2\n  8963: u8 [a0 + 1] = 0xa4\n  8968: u8 [a0 + 0] = 0x3f\n  8971: ecalli 6 // 'ref_time_left'\n  8973: a0 = u64 [sp + 0x78]\n  8976: u64 [sp + 0x668] = a0\n  8980: a0 = u64 [sp + 0x80]\n  8984: u64 [sp + 0x660] = a0\n  8988: a0 = u64 [sp + 0x88]\n  8992: u32 [sp + 0x670] = a0\n  8996: u64 [sp + 1688] = 0\n  9000: u64 [sp + 1680] = 0\n  9004: u64 [sp + 1672] = 0\n  9008: u64 [sp + 1664] = 0\n  9012: a1 = 0x4\n  9015: a0 = s1\n  9017: ra = 126, jump @0\n      : @157 [@dyn 63] (gas: 5)\n  9022: u64 [sp + 0x40] = a0\n  9025: a1 = 0x20\n  9028: u64 [sp + 0x38] = s1\n  9031: a0 = s1\n  9033: ra = 128, jump @0\n      : @158 [@dyn 64] (gas: 31)\n  9039: u32 [sp + 1696] = 0x20\n  9044: u64 [sp + 1752] = 0\n  9048: u64 [sp + 1744] = 0\n  9052: u64 [sp + 1736] = 0\n  9056: u64 [sp + 1728] = 0\n  9060: a1 = sp + 0x660\n  9064: a1 = a1 << 0x20\n  9067: a1 = a1 >> 0x20\n  9070: s1 = u64 [sp + 0x90]\n  9074: s1 = s1 | a1\n  9077: a1 = sp + 0x680\n  9081: a1 = a1 << 0x20\n  9084: a1 = a1 >> 0x20\n  9087: a2 = sp + 0x6c0\n  9091: a2 = a2 << 0x20\n  9094: a3 = a2 | a1\n  9097: a1 = u64 [sp + 0x40]\n  9100: a1 = a1 << 0x20\n  9103: a1 = a1 >> 0x20\n  9106: a4 = u64 [sp + 0x98]\n  9110: a4 = a4 | a1\n  9113: a0 = a0 << 0x20\n  9116: a0 = a0 >> 0x20\n  9119: a1 = sp + 0x6a0\n  9123: a1 = a1 << 0x20\n  9126: a5 = a1 | a0\n  9129: a1 = 0xffffffffffffffff\n  9132: a2 = 0xffffffffffffffff\n  9135: a0 = s1\n  9137: ecalli 0 // 'call'\n  9138: fallthrough\n      : @159 (gas: 1)\n  9139: jump @161 if a0 == 0\n      : @160 (gas: 1)\n  9142: jump @362\n      : @161 (gas: 2)\n  9145: ecalli 8 // 'return_data_size'\n  9147: fallthrough\n      : @162 (gas: 2)\n  9148: a1 = 0x20\n  9151: jump @164 if a0 >=u a1\n      : @163 (gas: 3)\n  9154: ecalli 8 // 'return_data_size'\n  9156: a1 = a0\n  9158: fallthrough\n      : @164 (gas: 28)\n  9159: a5 = 0\n  9161: a3 = u64 [sp + 0x58]\n  9164: a4 = u64 [sp + 0x50]\n  9167: a2 = u64 [sp + 0x30]\n  9170: s1 = u64 [sp + 0x48]\n  9173: a0 = a1 + 0x1f\n  9176: u64 [sp + 0x50] = a1\n  9179: a1 = a0 <u a1\n  9182: u64 [sp + 88] = 0\n  9185: a1 = a1 & 0x1\n  9188: a0 = a0 & 0xffffffffffffffe0\n  9191: a2 = a2 + a0\n  9194: u64 [sp + 0x48] = a2\n  9197: a0 = a2 <u a0\n  9200: s1 = s1 + a1\n  9203: s1 = s1 + a0\n  9206: a2 = s1 ^ a1\n  9209: a1 = s1 <u a1\n  9212: a1 = a0 if a2 == 0\n  9215: a1 = a1 + a3\n  9218: a0 = a1 <u a3\n  9221: a0 = a0 + a4\n  9224: u64 [sp + 0x40] = a1\n  9227: u64 [sp + 0x30] = a0\n  9230: a0 = a0 | a1\n  9233: a1 = s1 <u 0x1\n  9236: a1 = 0 if a0 != 0\n  9238: jump @166 if a1 != 0\n      : @165 (gas: 1)\n  9241: jump @409\n      : @166 (gas: 3)\n  9244: a0 = 0x40\n  9247: a1 = 0x20\n  9250: ra = 130, jump @0\n      : @167 [@dyn 65] (gas: 79)\n  9256: a1 = u64 [sp + 0x30]\n  9259: a1 = reverse a1\n  9261: a2 = u64 [sp + 0x40]\n  9264: a2 = reverse a2\n  9266: a3 = reverse s1\n  9268: a4 = u64 [sp + 0x48]\n  9271: a4 = reverse a4\n  9273: u8 [a0 + 0x18] = a4\n  9276: a5 = a4 >> 0x38\n  9279: u8 [a0 + 0x1f] = a5\n  9282: a5 = a4 >> 0x30\n  9285: u8 [a0 + 0x1e] = a5\n  9288: a5 = a4 >> 0x28\n  9291: u8 [a0 + 0x1d] = a5\n  9294: a5 = a4 >> 0x20\n  9297: u8 [a0 + 0x1c] = a5\n  9300: a5 = a4 >> 0x18\n  9303: u8 [a0 + 0x1b] = a5\n  9306: a5 = a4 >> 0x10\n  9309: u8 [a0 + 0x1a] = a5\n  9312: a4 = a4 >> 0x8\n  9315: u8 [a0 + 0x19] = a4\n  9318: u8 [a0 + 0x10] = a3\n  9321: a4 = a3 >> 0x38\n  9324: u8 [a0 + 0x17] = a4\n  9327: a4 = a3 >> 0x30\n  9330: u8 [a0 + 0x16] = a4\n  9333: a4 = a3 >> 0x28\n  9336: u8 [a0 + 0x15] = a4\n  9339: a4 = a3 >> 0x20\n  9342: u8 [a0 + 0x14] = a4\n  9345: a4 = a3 >> 0x18\n  9348: u8 [a0 + 0x13] = a4\n  9351: a4 = a3 >> 0x10\n  9354: u8 [a0 + 0x12] = a4\n  9357: a3 = a3 >> 0x8\n  9360: u8 [a0 + 0x11] = a3\n  9363: u8 [a0 + 0x8] = a2\n  9366: a3 = a2 >> 0x38\n  9369: u8 [a0 + 0xf] = a3\n  9372: a3 = a2 >> 0x30\n  9375: u8 [a0 + 0xe] = a3\n  9378: a3 = a2 >> 0x28\n  9381: u8 [a0 + 0xd] = a3\n  9384: a3 = a2 >> 0x20\n  9387: u8 [a0 + 0xc] = a3\n  9390: a3 = a2 >> 0x18\n  9393: u8 [a0 + 0xb] = a3\n  9396: a3 = a2 >> 0x10\n  9399: u8 [a0 + 0xa] = a3\n  9402: a2 = a2 >> 0x8\n  9405: u8 [a0 + 0x9] = a2\n  9408: u8 [a0] = a1\n  9410: a2 = a1 >> 0x38\n  9413: u8 [a0 + 0x7] = a2\n  9416: a2 = a1 >> 0x30\n  9419: u8 [a0 + 0x6] = a2\n  9422: a2 = a1 >> 0x28\n  9425: u8 [a0 + 0x5] = a2\n  9428: a2 = a1 >> 0x20\n  9431: u8 [a0 + 0x4] = a2\n  9434: a2 = a1 >> 0x18\n  9437: u8 [a0 + 0x3] = a2\n  9440: a2 = a1 >> 0x10\n  9443: u8 [a0 + 0x2] = a2\n  9446: a1 = a1 >> 0x8\n  9449: a5 = u64 [sp + 0x58]\n  9452: a2 = a5 >u 0\n  9454: a3 = u64 [sp + 0x50]\n  9457: a3 = a3 <u 0x20\n  9460: a3 = a3 ^ 0x1\n  9463: a3 = a2 if a5 != 0\n  9466: a2 = a5 >u 0\n  9468: a4 = a5 >u 0\n  9470: a4 = a2 if a5 == 0\n  9473: a2 = a5 | a5\n  9476: a4 = a3 if a2 == 0\n  9479: u8 [a0 + 0x1] = a1\n  9482: jump @169 if a4 != 0\n      : @168 (gas: 1)\n  9485: jump @402\n      : @169 (gas: 3)\n  9488: a1 = 0x20\n  9491: a0 = u64 [sp + 0x38]\n  9494: ra = 132, jump @0\n      : @170 [@dyn 66] (gas: 93)\n  9500: a1 = u8 [a0 + 0x11]\n  9503: a2 = u8 [a0 + 0x10]\n  9506: a3 = u8 [a0 + 0x12]\n  9509: a4 = u8 [a0 + 0x13]\n  9512: a1 = a1 << 0x8\n  9515: a1 = a1 | a2\n  9518: a3 = a3 << 0x10\n  9521: a4 = a4 << 0x18\n  9524: a3 = a3 | a4\n  9527: t0 = a3 | a1\n  9530: a2 = u8 [a0 + 0x1]\n  9533: a3 = u8 [a0]\n  9535: a4 = u8 [a0 + 0x2]\n  9538: a5 = u8 [a0 + 0x3]\n  9541: a2 = a2 << 0x8\n  9544: a2 = a2 | a3\n  9547: a4 = a4 << 0x10\n  9550: a5 = a5 << 0x18\n  9553: a4 = a4 | a5\n  9556: t1 = a4 | a2\n  9559: a3 = u8 [a0 + 0x15]\n  9562: a4 = u8 [a0 + 0x14]\n  9565: a5 = u8 [a0 + 0x16]\n  9568: s1 = u8 [a0 + 0x17]\n  9571: a3 = a3 << 0x8\n  9574: a3 = a3 | a4\n  9577: a5 = a5 << 0x10\n  9580: s1 = s1 << 0x18\n  9583: a5 = a5 | s1\n  9586: t2 = a5 | a3\n  9589: a4 = u8 [a0 + 0x5]\n  9592: a5 = u8 [a0 + 0x4]\n  9595: s1 = u8 [a0 + 0x6]\n  9598: a1 = u8 [a0 + 0x7]\n  9601: a4 = a4 << 0x8\n  9604: a4 = a4 | a5\n  9607: s1 = s1 << 0x10\n  9610: a1 = a1 << 0x18\n  9613: a1 = a1 | s1\n  9616: ra = a1 | a4\n  9619: a1 = u8 [a0 + 0x19]\n  9622: a5 = u8 [a0 + 0x18]\n  9625: s1 = u8 [a0 + 0x1a]\n  9628: a2 = u8 [a0 + 0x1b]\n  9631: a1 = a1 << 0x8\n  9634: a1 = a1 | a5\n  9637: s1 = s1 << 0x10\n  9640: a2 = a2 << 0x18\n  9643: a2 = a2 | s1\n  9646: a5 = a2 | a1\n  9649: a1 = u8 [a0 + 0x9]\n  9652: a2 = u8 [a0 + 0x8]\n  9655: s1 = u8 [a0 + 0xa]\n  9658: a3 = u8 [a0 + 0xb]\n  9661: a1 = a1 << 0x8\n  9664: a1 = a1 | a2\n  9667: s1 = s1 << 0x10\n  9670: a3 = a3 << 0x18\n  9673: a3 = a3 | s1\n  9676: s1 = a3 | a1\n  9679: a1 = u8 [a0 + 0x1d]\n  9682: a2 = u8 [a0 + 0x1c]\n  9685: a3 = u8 [a0 + 0x1e]\n  9688: a4 = u8 [a0 + 0x1f]\n  9691: a1 = a1 << 0x8\n  9694: a1 = a1 | a2\n  9697: a3 = a3 << 0x10\n  9700: a4 = a4 << 0x18\n  9703: a3 = a3 | a4\n  9706: a1 = a1 | a3\n  9709: a2 = u8 [a0 + 0xd]\n  9712: a3 = u8 [a0 + 0xc]\n  9715: a4 = u8 [a0 + 0xe]\n  9718: a0 = u8 [a0 + 0xf]\n  9721: a2 = a2 << 0x8\n  9724: a2 = a2 | a3\n  9727: a4 = a4 << 0x10\n  9730: a0 = a0 << 0x18\n  9733: a0 = a0 | a4\n  9736: a0 = a0 | a2\n  9739: a0 = a0 | a1\n  9742: a0 = a0 << 0x20\n  9745: a5 = a5 | s1\n  9748: a0 = a0 | a5\n  9751: a1 = ra | t2\n  9754: a1 = a1 << 0x20\n  9757: a2 = t1 | t0\n  9760: a1 = a1 | a2\n  9763: a0 = a0 | a1\n  9766: u64 [sp + 0x58] = a0\n  9769: a0 = 0x40\n  9772: a1 = 0x20\n  9775: ra = 134, jump @0\n      : @171 [@dyn 67] (gas: 105)\n  9781: a1 = u8 [a0 + 0x19]\n  9784: a2 = u8 [a0 + 0x18]\n  9787: a3 = u8 [a0 + 0x1a]\n  9790: a4 = u8 [a0 + 0x1b]\n  9793: a1 = a1 << 0x8\n  9796: a1 = a1 | a2\n  9799: a3 = a3 << 0x10\n  9802: a4 = a4 << 0x18\n  9805: a3 = a3 | a4\n  9808: a1 = a1 | a3\n  9811: a2 = u8 [a0 + 0x1d]\n  9814: a3 = u8 [a0 + 0x1c]\n  9817: a4 = u8 [a0 + 0x1e]\n  9820: a5 = u8 [a0 + 0x1f]\n  9823: a2 = a2 << 0x8\n  9826: a2 = a2 | a3\n  9829: a4 = a4 << 0x10\n  9832: a5 = a5 << 0x18\n  9835: a4 = a4 | a5\n  9838: a2 = a2 | a4\n  9841: a2 = a2 << 0x20\n  9844: t0 = a2 | a1\n  9847: a2 = u8 [a0 + 0x11]\n  9850: a3 = u8 [a0 + 0x10]\n  9853: a4 = u8 [a0 + 0x12]\n  9856: a5 = u8 [a0 + 0x13]\n  9859: a2 = a2 << 0x8\n  9862: a2 = a2 | a3\n  9865: a4 = a4 << 0x10\n  9868: a5 = a5 << 0x18\n  9871: a4 = a4 | a5\n  9874: a2 = a2 | a4\n  9877: a3 = u8 [a0 + 0x15]\n  9880: a4 = u8 [a0 + 0x14]\n  9883: a5 = u8 [a0 + 0x16]\n  9886: s1 = u8 [a0 + 0x17]\n  9889: a3 = a3 << 0x8\n  9892: a3 = a3 | a4\n  9895: a5 = a5 << 0x10\n  9898: s1 = s1 << 0x18\n  9901: a5 = a5 | s1\n  9904: a3 = a3 | a5\n  9907: a3 = a3 << 0x20\n  9910: a2 = a2 | a3\n  9913: a3 = u8 [a0 + 0x9]\n  9916: a4 = u8 [a0 + 0x8]\n  9919: a5 = u8 [a0 + 0xa]\n  9922: s1 = u8 [a0 + 0xb]\n  9925: a3 = a3 << 0x8\n  9928: a3 = a3 | a4\n  9931: a5 = a5 << 0x10\n  9934: s1 = s1 << 0x18\n  9937: a5 = a5 | s1\n  9940: a3 = a3 | a5\n  9943: a4 = u8 [a0 + 0xd]\n  9946: a5 = u8 [a0 + 0xc]\n  9949: s1 = u8 [a0 + 0xe]\n  9952: a1 = u8 [a0 + 0xf]\n  9955: a4 = a4 << 0x8\n  9958: a4 = a4 | a5\n  9961: s1 = s1 << 0x10\n  9964: a1 = a1 << 0x18\n  9967: a1 = a1 | s1\n  9970: a1 = a1 | a4\n  9973: a1 = a1 << 0x20\n  9976: a3 = a3 | a1\n  9979: a1 = u8 [a0 + 0x1]\n  9982: a4 = u8 [a0]\n  9984: a5 = u8 [a0 + 0x2]\n  9987: s1 = u8 [a0 + 0x3]\n  9990: a1 = a1 << 0x8\n  9993: a1 = a1 | a4\n  9996: a5 = a5 << 0x10\n  9999: s1 = s1 << 0x18\n 10002: a5 = a5 | s1\n 10005: a1 = a1 | a5\n 10008: a4 = u8 [a0 + 0x5]\n 10011: a5 = u8 [a0 + 0x4]\n 10014: s1 = u8 [a0 + 0x6]\n 10017: a0 = u8 [a0 + 0x7]\n 10020: a4 = a4 << 0x8\n 10023: a4 = a4 | a5\n 10026: s1 = s1 << 0x10\n 10029: a0 = a0 << 0x18\n 10032: a0 = a0 | s1\n 10035: a0 = a0 | a4\n 10038: a0 = a0 << 0x20\n 10041: a0 = a0 | a1\n 10044: a0 = reverse a0\n 10046: a3 = reverse a3\n 10048: a2 = reverse a2\n 10050: a4 = reverse t0\n 10052: a1 = a4 | a3\n 10055: u64 [sp + 0x50] = a0\n 10058: u64 [sp + 0x40] = a2\n 10061: a0 = a0 | a2\n 10064: a2 = u64 [sp + 0x58]\n 10067: u64 [sp + 0x48] = a3\n 10070: u64 [sp + 0x38] = a4\n 10073: a1 = a1 | a0\n 10076: a1 = a1 >> 0x20\n 10079: a0 = a0 | a3\n 10082: a0 = a0 << 0x20\n 10085: a0 = a0 | a1\n 10088: jump @173 if a2 == 0\n      : @172 (gas: 1)\n 10091: jump @363\n      : @173 (gas: 1)\n 10094: jump @175 if a0 == 0\n      : @174 (gas: 1)\n 10097: jump @401\n      : @175 (gas: 4)\n 10100: i32 s1 = a4 + 0\n 10102: a1 = 0x20\n 10105: a0 = s1\n 10107: ra = 136, jump @0\n      : @176 [@dyn 68] (gas: 46)\n 10113: u8 [a0 + 31] = 0\n 10116: u8 [a0 + 30] = 0\n 10119: u8 [a0 + 29] = 0\n 10122: u8 [a0 + 28] = 0\n 10125: u8 [a0 + 27] = 0\n 10128: u8 [a0 + 26] = 0\n 10131: u8 [a0 + 25] = 0\n 10134: u8 [a0 + 24] = 0\n 10137: u8 [a0 + 23] = 0\n 10140: u8 [a0 + 22] = 0\n 10143: u8 [a0 + 21] = 0\n 10146: u8 [a0 + 20] = 0\n 10149: u8 [a0 + 19] = 0\n 10152: u8 [a0 + 18] = 0\n 10155: u8 [a0 + 17] = 0\n 10158: u8 [a0 + 16] = 0\n 10161: u8 [a0 + 15] = 0\n 10164: u8 [a0 + 14] = 0\n 10167: u8 [a0 + 13] = 0\n 10170: u8 [a0 + 12] = 0\n 10173: u8 [a0 + 11] = 0\n 10176: u8 [a0 + 10] = 0\n 10179: u8 [a0 + 9] = 0\n 10182: u8 [a0 + 8] = 0\n 10185: u8 [a0 + 7] = 0\n 10188: u8 [a0 + 6] = 0\n 10191: u8 [a0 + 5] = 0\n 10194: u8 [a0 + 4] = 0\n 10197: u8 [a0 + 3] = 0x45\n 10201: u8 [a0 + 2] = 0xf2\n 10206: u8 [a0 + 1] = 0xa4\n 10211: u8 [a0 + 0] = 0x3f\n 10214: ecalli 6 // 'ref_time_left'\n 10216: a0 = u64 [sp + 0x60]\n 10219: u64 [sp + 0x6e8] = a0\n 10223: a0 = u64 [sp + 0x68]\n 10226: u64 [sp + 0x6e0] = a0\n 10230: a0 = u64 [sp + 0x70]\n 10233: u32 [sp + 0x6f0] = a0\n 10237: u64 [sp + 1816] = 0\n 10241: u64 [sp + 1808] = 0\n 10245: u64 [sp + 1800] = 0\n 10249: u64 [sp + 1792] = 0\n 10253: a1 = 0x4\n 10256: a0 = s1\n 10258: ra = 138, jump @0\n      : @177 [@dyn 69] (gas: 5)\n 10264: u64 [sp + 0x58] = a0\n 10267: a1 = 0x20\n 10270: u64 [sp + 0x30] = s1\n 10273: a0 = s1\n 10275: ra = 140, jump @0\n      : @178 [@dyn 70] (gas: 31)\n 10281: u32 [sp + 1824] = 0x20\n 10286: u64 [sp + 1880] = 0\n 10290: u64 [sp + 1872] = 0\n 10294: u64 [sp + 1864] = 0\n 10298: u64 [sp + 1856] = 0\n 10302: a1 = sp + 0x6e0\n 10306: a1 = a1 << 0x20\n 10309: a1 = a1 >> 0x20\n 10312: s1 = u64 [sp + 0x90]\n 10316: s1 = s1 | a1\n 10319: a1 = sp + 0x700\n 10323: a1 = a1 << 0x20\n 10326: a1 = a1 >> 0x20\n 10329: a2 = sp + 0x740\n 10333: a2 = a2 << 0x20\n 10336: a3 = a2 | a1\n 10339: a1 = u64 [sp + 0x58]\n 10342: a1 = a1 << 0x20\n 10345: a1 = a1 >> 0x20\n 10348: a4 = u64 [sp + 0x98]\n 10352: a4 = a4 | a1\n 10355: a0 = a0 << 0x20\n 10358: a0 = a0 >> 0x20\n 10361: a1 = sp + 0x720\n 10365: a1 = a1 << 0x20\n 10368: a5 = a1 | a0\n 10371: a1 = 0xffffffffffffffff\n 10374: a2 = 0xffffffffffffffff\n 10377: a0 = s1\n 10379: ecalli 0 // 'call'\n 10380: fallthrough\n      : @179 (gas: 1)\n 10381: jump @181 if a0 == 0\n      : @180 (gas: 1)\n 10384: jump @362\n      : @181 (gas: 2)\n 10387: ecalli 8 // 'return_data_size'\n 10389: fallthrough\n      : @182 (gas: 2)\n 10390: a1 = 0x20\n 10393: jump @184 if a0 >=u a1\n      : @183 (gas: 3)\n 10396: ecalli 8 // 'return_data_size'\n 10398: a1 = a0\n 10400: fallthrough\n      : @184 (gas: 27)\n 10401: a3 = u64 [sp + 0x48]\n 10404: a4 = u64 [sp + 0x38]\n 10407: a0 = a1 + 0x1f\n 10410: u64 [sp + 0x28] = a1\n 10413: a1 = a0 <u a1\n 10416: u64 [sp + 88] = 0\n 10419: a1 = a1 & 0x1\n 10422: a0 = a0 & 0xffffffffffffffe0\n 10425: a4 = a4 + a0\n 10428: u64 [sp + 0x38] = a4\n 10431: a0 = a4 <u a0\n 10434: s1 = u64 [sp + 0x40]\n 10437: s1 = s1 + a1\n 10440: s1 = s1 + a0\n 10443: a2 = s1 ^ a1\n 10446: a1 = s1 <u a1\n 10449: a1 = a0 if a2 == 0\n 10452: a2 = a3 + a1\n 10455: a0 = a2 <u a3\n 10458: a1 = u64 [sp + 0x50]\n 10461: a0 = a0 + a1\n 10464: u64 [sp + 0x50] = a2\n 10467: u64 [sp + 0x48] = a0\n 10470: a0 = a0 | a2\n 10473: a1 = s1 <u 0x1\n 10476: a1 = 0 if a0 != 0\n 10478: jump @186 if a1 != 0\n      : @185 (gas: 1)\n 10481: jump @411\n      : @186 (gas: 3)\n 10484: a0 = 0x40\n 10487: a1 = 0x20\n 10490: ra = 142, jump @0\n      : @187 [@dyn 71] (gas: 79)\n 10496: a1 = u64 [sp + 0x48]\n 10499: a1 = reverse a1\n 10501: a2 = u64 [sp + 0x50]\n 10504: a2 = reverse a2\n 10506: a3 = reverse s1\n 10508: a4 = u64 [sp + 0x38]\n 10511: a4 = reverse a4\n 10513: u8 [a0 + 0x18] = a4\n 10516: a5 = a4 >> 0x38\n 10519: u8 [a0 + 0x1f] = a5\n 10522: a5 = a4 >> 0x30\n 10525: u8 [a0 + 0x1e] = a5\n 10528: a5 = a4 >> 0x28\n 10531: u8 [a0 + 0x1d] = a5\n 10534: a5 = a4 >> 0x20\n 10537: u8 [a0 + 0x1c] = a5\n 10540: a5 = a4 >> 0x18\n 10543: u8 [a0 + 0x1b] = a5\n 10546: a5 = a4 >> 0x10\n 10549: u8 [a0 + 0x1a] = a5\n 10552: a4 = a4 >> 0x8\n 10555: u8 [a0 + 0x19] = a4\n 10558: u8 [a0 + 0x10] = a3\n 10561: a4 = a3 >> 0x38\n 10564: u8 [a0 + 0x17] = a4\n 10567: a4 = a3 >> 0x30\n 10570: u8 [a0 + 0x16] = a4\n 10573: a4 = a3 >> 0x28\n 10576: u8 [a0 + 0x15] = a4\n 10579: a4 = a3 >> 0x20\n 10582: u8 [a0 + 0x14] = a4\n 10585: a4 = a3 >> 0x18\n 10588: u8 [a0 + 0x13] = a4\n 10591: a4 = a3 >> 0x10\n 10594: u8 [a0 + 0x12] = a4\n 10597: a3 = a3 >> 0x8\n 10600: u8 [a0 + 0x11] = a3\n 10603: u8 [a0 + 0x8] = a2\n 10606: a3 = a2 >> 0x38\n 10609: u8 [a0 + 0xf] = a3\n 10612: a3 = a2 >> 0x30\n 10615: u8 [a0 + 0xe] = a3\n 10618: a3 = a2 >> 0x28\n 10621: u8 [a0 + 0xd] = a3\n 10624: a3 = a2 >> 0x20\n 10627: u8 [a0 + 0xc] = a3\n 10630: a3 = a2 >> 0x18\n 10633: u8 [a0 + 0xb] = a3\n 10636: a3 = a2 >> 0x10\n 10639: u8 [a0 + 0xa] = a3\n 10642: a2 = a2 >> 0x8\n 10645: u8 [a0 + 0x9] = a2\n 10648: u8 [a0] = a1\n 10650: a2 = a1 >> 0x38\n 10653: u8 [a0 + 0x7] = a2\n 10656: a2 = a1 >> 0x30\n 10659: u8 [a0 + 0x6] = a2\n 10662: a2 = a1 >> 0x28\n 10665: u8 [a0 + 0x5] = a2\n 10668: a2 = a1 >> 0x20\n 10671: u8 [a0 + 0x4] = a2\n 10674: a2 = a1 >> 0x18\n 10677: u8 [a0 + 0x3] = a2\n 10680: a2 = a1 >> 0x10\n 10683: u8 [a0 + 0x2] = a2\n 10686: a1 = a1 >> 0x8\n 10689: a5 = u64 [sp + 0x58]\n 10692: a2 = a5 >u 0\n 10694: a3 = u64 [sp + 0x28]\n 10697: a3 = a3 <u 0x20\n 10700: a3 = a3 ^ 0x1\n 10703: a3 = a2 if a5 != 0\n 10706: a2 = a5 >u 0\n 10708: a4 = a5 >u 0\n 10710: a4 = a2 if a5 == 0\n 10713: a2 = a5 | a5\n 10716: a4 = a3 if a2 == 0\n 10719: u8 [a0 + 0x1] = a1\n 10722: jump @189 if a4 != 0\n      : @188 (gas: 1)\n 10725: jump @402\n      : @189 (gas: 3)\n 10728: a1 = 0x20\n 10731: a0 = u64 [sp + 0x30]\n 10734: ra = 144, jump @0\n      : @190 [@dyn 72] (gas: 90)\n 10740: a1 = u8 [a0 + 0x11]\n 10743: a2 = u8 [a0 + 0x10]\n 10746: a3 = u8 [a0 + 0x12]\n 10749: a4 = u8 [a0 + 0x13]\n 10752: a1 = a1 << 0x8\n 10755: a1 = a1 | a2\n 10758: a3 = a3 << 0x10\n 10761: a4 = a4 << 0x18\n 10764: a3 = a3 | a4\n 10767: t0 = a3 | a1\n 10770: a2 = u8 [a0 + 0x1]\n 10773: a3 = u8 [a0]\n 10775: a4 = u8 [a0 + 0x2]\n 10778: a5 = u8 [a0 + 0x3]\n 10781: a2 = a2 << 0x8\n 10784: a2 = a2 | a3\n 10787: a4 = a4 << 0x10\n 10790: a5 = a5 << 0x18\n 10793: a4 = a4 | a5\n 10796: t1 = a4 | a2\n 10799: a3 = u8 [a0 + 0x15]\n 10802: a4 = u8 [a0 + 0x14]\n 10805: a5 = u8 [a0 + 0x16]\n 10808: s1 = u8 [a0 + 0x17]\n 10811: a3 = a3 << 0x8\n 10814: a3 = a3 | a4\n 10817: a5 = a5 << 0x10\n 10820: s1 = s1 << 0x18\n 10823: a5 = a5 | s1\n 10826: t2 = a5 | a3\n 10829: a4 = u8 [a0 + 0x5]\n 10832: a5 = u8 [a0 + 0x4]\n 10835: s1 = u8 [a0 + 0x6]\n 10838: a1 = u8 [a0 + 0x7]\n 10841: a4 = a4 << 0x8\n 10844: a4 = a4 | a5\n 10847: s1 = s1 << 0x10\n 10850: a1 = a1 << 0x18\n 10853: a1 = a1 | s1\n 10856: ra = a1 | a4\n 10859: a1 = u8 [a0 + 0x19]\n 10862: a5 = u8 [a0 + 0x18]\n 10865: s1 = u8 [a0 + 0x1a]\n 10868: a2 = u8 [a0 + 0x1b]\n 10871: a1 = a1 << 0x8\n 10874: a1 = a1 | a5\n 10877: s1 = s1 << 0x10\n 10880: a2 = a2 << 0x18\n 10883: a2 = a2 | s1\n 10886: a5 = a2 | a1\n 10889: a1 = u8 [a0 + 0x9]\n 10892: a2 = u8 [a0 + 0x8]\n 10895: s1 = u8 [a0 + 0xa]\n 10898: a3 = u8 [a0 + 0xb]\n 10901: a1 = a1 << 0x8\n 10904: a1 = a1 | a2\n 10907: s1 = s1 << 0x10\n 10910: a3 = a3 << 0x18\n 10913: a3 = a3 | s1\n 10916: s1 = a3 | a1\n 10919: a1 = u8 [a0 + 0x1d]\n 10922: a2 = u8 [a0 + 0x1c]\n 10925: a3 = u8 [a0 + 0x1e]\n 10928: a4 = u8 [a0 + 0x1f]\n 10931: a1 = a1 << 0x8\n 10934: a1 = a1 | a2\n 10937: a3 = a3 << 0x10\n 10940: a4 = a4 << 0x18\n 10943: a3 = a3 | a4\n 10946: a1 = a1 | a3\n 10949: a2 = u8 [a0 + 0xd]\n 10952: a3 = u8 [a0 + 0xc]\n 10955: a4 = u8 [a0 + 0xe]\n 10958: a0 = u8 [a0 + 0xf]\n 10961: a2 = a2 << 0x8\n 10964: a2 = a2 | a3\n 10967: a4 = a4 << 0x10\n 10970: a0 = a0 << 0x18\n 10973: a0 = a0 | a4\n 10976: a0 = a0 | a2\n 10979: a0 = a0 | a1\n 10982: a0 = a0 << 0x20\n 10985: a5 = a5 | s1\n 10988: a0 = a0 | a5\n 10991: a1 = ra | t2\n 10994: a1 = a1 << 0x20\n 10997: a2 = t1 | t0\n 11000: a1 = a1 | a2\n 11003: a0 = a0 | a1\n 11006: jump @192 if a0 == 0\n      : @191 (gas: 1)\n 11009: jump @367\n      : @192 (gas: 9)\n 11012: a0 = u64 [sp + 0x80]\n 11016: u64 [sp + 0x760] = a0\n 11020: a0 = u64 [sp + 0x78]\n 11023: u64 [sp + 0x768] = a0\n 11027: a0 = u64 [sp + 0x88]\n 11031: u32 [sp + 0x770] = a0\n 11035: i32 a0 = sp + 0x760\n 11039: ecalli 4 // 'code_size'\n 11041: fallthrough\n      : @193 (gas: 1)\n 11042: jump @195 if a0 != 0\n      : @194 (gas: 1)\n 11045: jump @403\n      : @195 (gas: 3)\n 11048: a0 = 0x40\n 11051: a1 = 0x20\n 11054: ra = 146, jump @0\n      : @196 [@dyn 73] (gas: 104)\n 11060: a1 = u8 [a0 + 0x11]\n 11063: a2 = u8 [a0 + 0x10]\n 11066: a3 = u8 [a0 + 0x12]\n 11069: a4 = u8 [a0 + 0x13]\n 11072: a1 = a1 << 0x8\n 11075: a1 = a1 | a2\n 11078: a3 = a3 << 0x10\n 11081: a4 = a4 << 0x18\n 11084: a3 = a3 | a4\n 11087: a1 = a1 | a3\n 11090: a2 = u8 [a0 + 0x15]\n 11093: a3 = u8 [a0 + 0x14]\n 11096: a4 = u8 [a0 + 0x16]\n 11099: a5 = u8 [a0 + 0x17]\n 11102: a2 = a2 << 0x8\n 11105: a2 = a2 | a3\n 11108: a4 = a4 << 0x10\n 11111: a5 = a5 << 0x18\n 11114: a4 = a4 | a5\n 11117: a2 = a2 | a4\n 11120: a2 = a2 << 0x20\n 11123: t1 = a2 | a1\n 11126: a1 = u8 [a0 + 0x1]\n 11129: a2 = u8 [a0]\n 11131: a3 = u8 [a0 + 0x2]\n 11134: a4 = u8 [a0 + 0x3]\n 11137: a1 = a1 << 0x8\n 11140: a1 = a1 | a2\n 11143: a3 = a3 << 0x10\n 11146: a4 = a4 << 0x18\n 11149: a3 = a3 | a4\n 11152: a1 = a1 | a3\n 11155: a2 = u8 [a0 + 0x5]\n 11158: a3 = u8 [a0 + 0x4]\n 11161: a4 = u8 [a0 + 0x6]\n 11164: a5 = u8 [a0 + 0x7]\n 11167: a2 = a2 << 0x8\n 11170: a2 = a2 | a3\n 11173: a4 = a4 << 0x10\n 11176: a5 = a5 << 0x18\n 11179: a4 = a4 | a5\n 11182: a2 = a2 | a4\n 11185: a2 = a2 << 0x20\n 11188: t0 = a2 | a1\n 11191: a1 = u8 [a0 + 0x19]\n 11194: a2 = u8 [a0 + 0x18]\n 11197: a3 = u8 [a0 + 0x1a]\n 11200: a4 = u8 [a0 + 0x1b]\n 11203: a1 = a1 << 0x8\n 11206: a1 = a1 | a2\n 11209: a3 = a3 << 0x10\n 11212: a4 = a4 << 0x18\n 11215: a3 = a3 | a4\n 11218: a1 = a1 | a3\n 11221: a2 = u8 [a0 + 0x1d]\n 11224: a3 = u8 [a0 + 0x1c]\n 11227: a4 = u8 [a0 + 0x1e]\n 11230: a5 = u8 [a0 + 0x1f]\n 11233: a2 = a2 << 0x8\n 11236: a2 = a2 | a3\n 11239: a4 = a4 << 0x10\n 11242: a5 = a5 << 0x18\n 11245: a4 = a4 | a5\n 11248: a2 = a2 | a4\n 11251: a2 = a2 << 0x20\n 11254: a5 = a2 | a1\n 11257: a1 = u8 [a0 + 0x9]\n 11260: a2 = u8 [a0 + 0x8]\n 11263: a3 = u8 [a0 + 0xa]\n 11266: a4 = u8 [a0 + 0xb]\n 11269: a1 = a1 << 0x8\n 11272: a1 = a1 | a2\n 11275: a3 = a3 << 0x10\n 11278: a4 = a4 << 0x18\n 11281: a3 = a3 | a4\n 11284: a1 = a1 | a3\n 11287: a2 = u8 [a0 + 0xd]\n 11290: a3 = u8 [a0 + 0xc]\n 11293: a4 = u8 [a0 + 0xe]\n 11296: a0 = u8 [a0 + 0xf]\n 11299: a2 = a2 << 0x8\n 11302: a2 = a2 | a3\n 11305: a4 = a4 << 0x10\n 11308: a0 = a0 << 0x18\n 11311: a0 = a0 | a4\n 11314: a0 = a0 | a2\n 11317: a0 = a0 << 0x20\n 11320: a0 = a0 | a1\n 11323: u64 [sp + 0x38] = a0\n 11326: a1 = reverse a0\n 11328: u64 [sp + 0x40] = a5\n 11331: a0 = reverse a5\n 11333: u64 [sp + 0x58] = t0\n 11336: a2 = reverse t0\n 11338: u64 [sp + 0x48] = t1\n 11341: a3 = reverse t1\n 11343: a2 = a2 | a3\n 11346: a3 = a0 | a1\n 11349: a3 = a3 | a2\n 11352: a3 = a3 >> 0x20\n 11355: a1 = a1 | a2\n 11358: a1 = a1 << 0x20\n 11361: a1 = a1 | a3\n 11364: jump @198 if a1 == 0\n      : @197 (gas: 1)\n 11367: jump @401\n      : @198 (gas: 6)\n 11370: a1 = 0x800000000\n 11380: u64 [sp + 0x50] = a1\n 11383: i32 s1 = a0 + 0\n 11385: a1 = 0x20\n 11388: a0 = s1\n 11390: ra = 148, jump @0\n      : @199 [@dyn 74] (gas: 46)\n 11396: u8 [a0 + 31] = 0\n 11399: u8 [a0 + 30] = 0\n 11402: u8 [a0 + 29] = 0\n 11405: u8 [a0 + 28] = 0\n 11408: u8 [a0 + 27] = 0\n 11411: u8 [a0 + 26] = 0\n 11414: u8 [a0 + 25] = 0\n 11417: u8 [a0 + 24] = 0\n 11420: u8 [a0 + 23] = 0\n 11423: u8 [a0 + 22] = 0\n 11426: u8 [a0 + 21] = 0\n 11429: u8 [a0 + 20] = 0\n 11432: u8 [a0 + 19] = 0\n 11435: u8 [a0 + 18] = 0\n 11438: u8 [a0 + 17] = 0\n 11441: u8 [a0 + 16] = 0\n 11444: u8 [a0 + 15] = 0\n 11447: u8 [a0 + 14] = 0\n 11450: u8 [a0 + 13] = 0\n 11453: u8 [a0 + 12] = 0\n 11456: u8 [a0 + 11] = 0\n 11459: u8 [a0 + 10] = 0\n 11462: u8 [a0 + 9] = 0\n 11465: u8 [a0 + 8] = 0\n 11468: u8 [a0 + 7] = 0\n 11471: u8 [a0 + 6] = 0\n 11474: u8 [a0 + 5] = 0\n 11477: u8 [a0 + 4] = 0\n 11480: u8 [a0 + 3] = 0x8a\n 11485: u8 [a0 + 2] = 0xe0\n 11490: u8 [a0 + 1] = 0x9d\n 11495: u8 [a0 + 0] = 0xd0\n 11499: ecalli 6 // 'ref_time_left'\n 11501: a0 = u64 [sp + 0x78]\n 11504: u64 [sp + 0x788] = a0\n 11508: a0 = u64 [sp + 0x80]\n 11512: u64 [sp + 0x780] = a0\n 11516: a0 = u64 [sp + 0x88]\n 11520: u32 [sp + 0x790] = a0\n 11524: u64 [sp + 1976] = 0\n 11528: u64 [sp + 1968] = 0\n 11532: u64 [sp + 1960] = 0\n 11536: u64 [sp + 1952] = 0\n 11540: a1 = 0x4\n 11543: a0 = s1\n 11545: ra = 150, jump @0\n      : @200 [@dyn 75] (gas: 4)\n 11551: u64 [sp + 0x30] = a0\n 11554: a0 = s1\n 11556: a1 = 0\n 11558: ra = 152, jump @0\n      : @201 [@dyn 76] (gas: 31)\n 11564: u32 [sp + 1984] = 0\n 11568: u64 [sp + 2040] = 0xffffffffffffffff\n 11573: u64 [sp + 2032] = 0xffffffffffffffff\n 11578: u64 [sp + 2024] = 0xffffffffffffffff\n 11583: u64 [sp + 2016] = 0xffffffffffffffff\n 11588: a1 = sp + 0x780\n 11592: a1 = a1 << 0x20\n 11595: a1 = a1 >> 0x20\n 11598: a2 = u64 [sp + 0x50]\n 11601: t0 = a1 | a2\n 11604: a1 = sp + 0x7a0\n 11608: a1 = a1 << 0x20\n 11611: a1 = a1 >> 0x20\n 11614: a2 = sp + 0x7e0\n 11618: a2 = a2 << 0x20\n 11621: a3 = a2 | a1\n 11624: a1 = u64 [sp + 0x30]\n 11627: a1 = a1 << 0x20\n 11630: a1 = a1 >> 0x20\n 11633: a4 = u64 [sp + 0x98]\n 11637: a4 = a4 | a1\n 11640: a0 = a0 << 0x20\n 11643: a0 = a0 >> 0x20\n 11646: a1 = sp + 0x7c0\n 11650: a1 = a1 << 0x20\n 11653: a5 = a1 | a0\n 11656: a1 = 0xffffffffffffffff\n 11659: a2 = 0xffffffffffffffff\n 11662: a0 = t0\n 11664: ecalli 0 // 'call'\n 11665: fallthrough\n      : @202 (gas: 1)\n 11666: jump @204 if a0 == 0\n      : @203 (gas: 1)\n 11669: jump @362\n      : @204 (gas: 4)\n 11672: ecalli 8 // 'return_data_size'\n 11674: a0 = 0x40\n 11677: a1 = 0x20\n 11680: ra = 154, jump @0\n      : @205 [@dyn 77] (gas: 67)\n 11686: a3 = u64 [sp + 0x40]\n 11689: u8 [a0 + 0x18] = a3\n 11692: a2 = u64 [sp + 0x48]\n 11695: a1 = a2 >> 0x38\n 11698: u8 [a0 + 0x17] = a1\n 11701: a1 = a2 >> 0x30\n 11704: u8 [a0 + 0x16] = a1\n 11707: a1 = a2 >> 0x28\n 11710: u8 [a0 + 0x15] = a1\n 11713: a1 = a2 >> 0x20\n 11716: u8 [a0 + 0x14] = a1\n 11719: a1 = a2 >> 0x18\n 11722: u8 [a0 + 0x13] = a1\n 11725: a1 = a2 >> 0x10\n 11728: u8 [a0 + 0x12] = a1\n 11731: a1 = a2 >> 0x8\n 11734: u8 [a0 + 0x11] = a1\n 11737: u8 [a0 + 0x10] = a2\n 11740: a2 = u64 [sp + 0x38]\n 11743: a1 = a2 >> 0x38\n 11746: u8 [a0 + 0xf] = a1\n 11749: a1 = a2 >> 0x30\n 11752: u8 [a0 + 0xe] = a1\n 11755: a1 = a2 >> 0x28\n 11758: u8 [a0 + 0xd] = a1\n 11761: a1 = a2 >> 0x20\n 11764: u8 [a0 + 0xc] = a1\n 11767: a1 = a2 >> 0x18\n 11770: u8 [a0 + 0xb] = a1\n 11773: a1 = a2 >> 0x10\n 11776: u8 [a0 + 0xa] = a1\n 11779: a1 = a2 >> 0x8\n 11782: u8 [a0 + 0x9] = a1\n 11785: u8 [a0 + 0x8] = a2\n 11788: a2 = u64 [sp + 0x58]\n 11791: a1 = a2 >> 0x38\n 11794: u8 [a0 + 0x7] = a1\n 11797: a1 = a2 >> 0x30\n 11800: u8 [a0 + 0x6] = a1\n 11803: a1 = a2 >> 0x28\n 11806: u8 [a0 + 0x5] = a1\n 11809: a1 = a2 >> 0x20\n 11812: u8 [a0 + 0x4] = a1\n 11815: a1 = a2 >> 0x18\n 11818: u8 [a0 + 0x3] = a1\n 11821: a1 = a2 >> 0x10\n 11824: u8 [a0 + 0x2] = a1\n 11827: a1 = a2 >> 0x8\n 11830: u8 [a0 + 0x1] = a1\n 11833: u8 [a0] = a2\n 11835: a1 = a3 >> 0x38\n 11838: u8 [a0 + 0x1f] = a1\n 11841: a1 = a3 >> 0x30\n 11844: u8 [a0 + 0x1e] = a1\n 11847: a1 = a3 >> 0x28\n 11850: u8 [a0 + 0x1d] = a1\n 11853: a1 = a3 >> 0x20\n 11856: u8 [a0 + 0x1c] = a1\n 11859: a1 = a3 >> 0x18\n 11862: u8 [a0 + 0x1b] = a1\n 11865: a1 = a3 >> 0x10\n 11868: u8 [a0 + 0x1a] = a1\n 11871: a1 = a3 >> 0x8\n 11874: u8 [a0 + 0x19] = a1\n 11877: a0 = 0x40\n 11880: a1 = 0x20\n 11883: ra = 156, jump @0\n      : @206 [@dyn 78] (gas: 103)\n 11889: a1 = u8 [a0 + 0x11]\n 11892: a2 = u8 [a0 + 0x10]\n 11895: a3 = u8 [a0 + 0x12]\n 11898: a4 = u8 [a0 + 0x13]\n 11901: a1 = a1 << 0x8\n 11904: a1 = a1 | a2\n 11907: a3 = a3 << 0x10\n 11910: a4 = a4 << 0x18\n 11913: a3 = a3 | a4\n 11916: a1 = a1 | a3\n 11919: a2 = u8 [a0 + 0x15]\n 11922: a3 = u8 [a0 + 0x14]\n 11925: a4 = u8 [a0 + 0x16]\n 11928: a5 = u8 [a0 + 0x17]\n 11931: a2 = a2 << 0x8\n 11934: a2 = a2 | a3\n 11937: a4 = a4 << 0x10\n 11940: a5 = a5 << 0x18\n 11943: a4 = a4 | a5\n 11946: a2 = a2 | a4\n 11949: a2 = a2 << 0x20\n 11952: t0 = a2 | a1\n 11955: a2 = u8 [a0 + 0x1]\n 11958: a3 = u8 [a0]\n 11960: a4 = u8 [a0 + 0x2]\n 11963: a5 = u8 [a0 + 0x3]\n 11966: a2 = a2 << 0x8\n 11969: a2 = a2 | a3\n 11972: a4 = a4 << 0x10\n 11975: a5 = a5 << 0x18\n 11978: a4 = a4 | a5\n 11981: a2 = a2 | a4\n 11984: a3 = u8 [a0 + 0x5]\n 11987: a4 = u8 [a0 + 0x4]\n 11990: a5 = u8 [a0 + 0x6]\n 11993: s1 = u8 [a0 + 0x7]\n 11996: a3 = a3 << 0x8\n 11999: a3 = a3 | a4\n 12002: a5 = a5 << 0x10\n 12005: s1 = s1 << 0x18\n 12008: a5 = a5 | s1\n 12011: a3 = a3 | a5\n 12014: a3 = a3 << 0x20\n 12017: a2 = a2 | a3\n 12020: a3 = u8 [a0 + 0x19]\n 12023: a4 = u8 [a0 + 0x18]\n 12026: a5 = u8 [a0 + 0x1a]\n 12029: s1 = u8 [a0 + 0x1b]\n 12032: a3 = a3 << 0x8\n 12035: a3 = a3 | a4\n 12038: a5 = a5 << 0x10\n 12041: s1 = s1 << 0x18\n 12044: a5 = a5 | s1\n 12047: a3 = a3 | a5\n 12050: a4 = u8 [a0 + 0x1d]\n 12053: a5 = u8 [a0 + 0x1c]\n 12056: s1 = u8 [a0 + 0x1e]\n 12059: a1 = u8 [a0 + 0x1f]\n 12062: a4 = a4 << 0x8\n 12065: a4 = a4 | a5\n 12068: s1 = s1 << 0x10\n 12071: a1 = a1 << 0x18\n 12074: a1 = a1 | s1\n 12077: a1 = a1 | a4\n 12080: a1 = a1 << 0x20\n 12083: a3 = a3 | a1\n 12086: a1 = u8 [a0 + 0x9]\n 12089: a4 = u8 [a0 + 0x8]\n 12092: a5 = u8 [a0 + 0xa]\n 12095: s1 = u8 [a0 + 0xb]\n 12098: a1 = a1 << 0x8\n 12101: a1 = a1 | a4\n 12104: a5 = a5 << 0x10\n 12107: s1 = s1 << 0x18\n 12110: a5 = a5 | s1\n 12113: a1 = a1 | a5\n 12116: a4 = u8 [a0 + 0xd]\n 12119: a5 = u8 [a0 + 0xc]\n 12122: s1 = u8 [a0 + 0xe]\n 12125: a0 = u8 [a0 + 0xf]\n 12128: a4 = a4 << 0x8\n 12131: a4 = a4 | a5\n 12134: s1 = s1 << 0x10\n 12137: a0 = a0 << 0x18\n 12140: a0 = a0 | s1\n 12143: a0 = a0 | a4\n 12146: a0 = a0 << 0x20\n 12149: a0 = a0 | a1\n 12152: a4 = reverse a0\n 12154: a3 = reverse a3\n 12156: a0 = reverse a2\n 12158: a1 = reverse t0\n 12160: u64 [sp + 0x40] = a0\n 12163: u64 [sp + 0x38] = a1\n 12166: a0 = a0 | a1\n 12169: a1 = a3 | a4\n 12172: a1 = a1 | a0\n 12175: a1 = a1 >> 0x20\n 12178: u64 [sp + 0x48] = a4\n 12181: a0 = a0 | a4\n 12184: a0 = a0 << 0x20\n 12187: a0 = a0 | a1\n 12190: jump @208 if a0 == 0\n      : @207 (gas: 1)\n 12193: jump @401\n      : @208 (gas: 7)\n 12196: s1 = sp + 0x7ff\n 12200: s1 = s1 + 0x11\n 12203: u64 [sp + 0x28] = a3\n 12206: i32 a0 = a3 + 0\n 12208: u64 [sp + 0x58] = a0\n 12211: a1 = 0x20\n 12214: ra = 158, jump @0\n      : @209 [@dyn 79] (gas: 49)\n 12220: u8 [a0 + 31] = 0\n 12223: u8 [a0 + 30] = 0\n 12226: u8 [a0 + 29] = 0\n 12229: u8 [a0 + 28] = 0\n 12232: u8 [a0 + 27] = 0\n 12235: u8 [a0 + 26] = 0\n 12238: u8 [a0 + 25] = 0\n 12241: u8 [a0 + 24] = 0\n 12244: u8 [a0 + 23] = 0\n 12247: u8 [a0 + 22] = 0\n 12250: u8 [a0 + 21] = 0\n 12253: u8 [a0 + 20] = 0\n 12256: u8 [a0 + 19] = 0\n 12259: u8 [a0 + 18] = 0\n 12262: u8 [a0 + 17] = 0\n 12265: u8 [a0 + 16] = 0\n 12268: u8 [a0 + 15] = 0\n 12271: u8 [a0 + 14] = 0\n 12274: u8 [a0 + 13] = 0\n 12277: u8 [a0 + 12] = 0\n 12280: u8 [a0 + 11] = 0\n 12283: u8 [a0 + 10] = 0\n 12286: u8 [a0 + 9] = 0\n 12289: u8 [a0 + 8] = 0\n 12292: u8 [a0 + 7] = 0\n 12295: u8 [a0 + 6] = 0\n 12298: u8 [a0 + 5] = 0\n 12301: u8 [a0 + 4] = 0\n 12304: u8 [a0 + 3] = 0x45\n 12308: u8 [a0 + 2] = 0xf2\n 12313: u8 [a0 + 1] = 0xa4\n 12318: u8 [a0 + 0] = 0x3f\n 12321: ecalli 6 // 'ref_time_left'\n 12323: a0 = u64 [sp + 0x78]\n 12326: a1 = sp + 0x1000\n 12330: u64 [a1 + 0xfffffffffffff808] = a0\n 12334: a0 = u64 [sp + 0x80]\n 12338: a1 = sp + 0x1000\n 12342: u64 [a1 + 0xfffffffffffff800] = a0\n 12346: a0 = u64 [sp + 0x88]\n 12350: u32 [s1] = a0\n 12352: u64 [s1 + 40] = 0\n 12355: u64 [s1 + 32] = 0\n 12358: u64 [s1 + 24] = 0\n 12361: u64 [s1 + 16] = 0\n 12364: a1 = 0x4\n 12367: s1 = u64 [sp + 0x58]\n 12370: a0 = s1\n 12372: ra = 160, jump @0\n      : @210 [@dyn 80] (gas: 4)\n 12378: u64 [sp + 0x30] = a0\n 12381: a1 = 0x20\n 12384: a0 = s1\n 12386: ra = 162, jump @0\n      : @211 [@dyn 81] (gas: 37)\n 12392: a2 = sp + 0x7ff\n 12396: a2 = a2 + 0x11\n 12399: u32 [a2 + 48] = 0x20\n 12403: u64 [a2 + 104] = 0\n 12406: u64 [a2 + 96] = 0\n 12409: u64 [a2 + 88] = 0\n 12412: u64 [a2 + 80] = 0\n 12415: a1 = sp + 0x7ff\n 12419: a1 = a1 + 0x1\n 12422: a1 = a1 << 0x20\n 12425: a1 = a1 >> 0x20\n 12428: s1 = u64 [sp + 0x90]\n 12432: s1 = s1 | a1\n 12435: a1 = sp + 0x7ff\n 12439: a1 = a1 + 0x21\n 12442: a1 = a1 << 0x20\n 12445: a1 = a1 >> 0x20\n 12448: a2 = sp + 0x7ff\n 12452: a2 = a2 + 0x61\n 12455: a2 = a2 << 0x20\n 12458: a3 = a2 | a1\n 12461: a1 = u64 [sp + 0x30]\n 12464: a1 = a1 << 0x20\n 12467: a1 = a1 >> 0x20\n 12470: a4 = u64 [sp + 0x98]\n 12474: a4 = a4 | a1\n 12477: a0 = a0 << 0x20\n 12480: a0 = a0 >> 0x20\n 12483: a1 = sp + 0x7ff\n 12487: a1 = a1 + 0x41\n 12490: a1 = a1 << 0x20\n 12493: a5 = a1 | a0\n 12496: a1 = 0xffffffffffffffff\n 12499: a2 = 0xffffffffffffffff\n 12502: a0 = s1\n 12504: ecalli 0 // 'call'\n 12505: fallthrough\n      : @212 (gas: 1)\n 12506: jump @214 if a0 == 0\n      : @213 (gas: 1)\n 12509: jump @362\n      : @214 (gas: 2)\n 12512: ecalli 8 // 'return_data_size'\n 12514: fallthrough\n      : @215 (gas: 2)\n 12515: a1 = 0x20\n 12518: jump @217 if a0 >=u a1\n      : @216 (gas: 3)\n 12521: ecalli 8 // 'return_data_size'\n 12523: a1 = a0\n 12525: fallthrough\n      : @217 (gas: 27)\n 12526: a3 = u64 [sp + 0x28]\n 12529: a0 = a1 + 0x1f\n 12532: u64 [sp + 0x28] = a1\n 12535: a1 = a0 <u a1\n 12538: u64 [sp + 48] = 0\n 12541: a1 = a1 & 0x1\n 12544: a0 = a0 & 0xffffffffffffffe0\n 12547: a3 = a3 + a0\n 12550: u64 [sp + 0x20] = a3\n 12553: a0 = a3 <u a0\n 12556: s1 = u64 [sp + 0x38]\n 12559: s1 = s1 + a1\n 12562: s1 = s1 + a0\n 12565: a2 = s1 ^ a1\n 12568: a1 = s1 <u a1\n 12571: a1 = a0 if a2 == 0\n 12574: a0 = u64 [sp + 0x48]\n 12577: a2 = a0 + a1\n 12580: a0 = a2 <u a0\n 12583: a1 = u64 [sp + 0x40]\n 12586: a0 = a0 + a1\n 12589: u64 [sp + 0x48] = a2\n 12592: u64 [sp + 0x40] = a0\n 12595: a0 = a0 | a2\n 12598: a1 = s1 <u 0x1\n 12601: a1 = 0 if a0 != 0\n 12603: jump @219 if a1 != 0\n      : @218 (gas: 1)\n 12606: jump @413\n      : @219 (gas: 3)\n 12609: a0 = 0x40\n 12612: a1 = 0x20\n 12615: ra = 164, jump @0\n      : @220 [@dyn 82] (gas: 79)\n 12621: a1 = u64 [sp + 0x40]\n 12624: a1 = reverse a1\n 12626: a2 = u64 [sp + 0x48]\n 12629: a2 = reverse a2\n 12631: a3 = reverse s1\n 12633: a4 = u64 [sp + 0x20]\n 12636: a4 = reverse a4\n 12638: u8 [a0 + 0x18] = a4\n 12641: a5 = a4 >> 0x38\n 12644: u8 [a0 + 0x1f] = a5\n 12647: a5 = a4 >> 0x30\n 12650: u8 [a0 + 0x1e] = a5\n 12653: a5 = a4 >> 0x28\n 12656: u8 [a0 + 0x1d] = a5\n 12659: a5 = a4 >> 0x20\n 12662: u8 [a0 + 0x1c] = a5\n 12665: a5 = a4 >> 0x18\n 12668: u8 [a0 + 0x1b] = a5\n 12671: a5 = a4 >> 0x10\n 12674: u8 [a0 + 0x1a] = a5\n 12677: a4 = a4 >> 0x8\n 12680: u8 [a0 + 0x19] = a4\n 12683: u8 [a0 + 0x10] = a3\n 12686: a4 = a3 >> 0x38\n 12689: u8 [a0 + 0x17] = a4\n 12692: a4 = a3 >> 0x30\n 12695: u8 [a0 + 0x16] = a4\n 12698: a4 = a3 >> 0x28\n 12701: u8 [a0 + 0x15] = a4\n 12704: a4 = a3 >> 0x20\n 12707: u8 [a0 + 0x14] = a4\n 12710: a4 = a3 >> 0x18\n 12713: u8 [a0 + 0x13] = a4\n 12716: a4 = a3 >> 0x10\n 12719: u8 [a0 + 0x12] = a4\n 12722: a3 = a3 >> 0x8\n 12725: u8 [a0 + 0x11] = a3\n 12728: u8 [a0 + 0x8] = a2\n 12731: a3 = a2 >> 0x38\n 12734: u8 [a0 + 0xf] = a3\n 12737: a3 = a2 >> 0x30\n 12740: u8 [a0 + 0xe] = a3\n 12743: a3 = a2 >> 0x28\n 12746: u8 [a0 + 0xd] = a3\n 12749: a3 = a2 >> 0x20\n 12752: u8 [a0 + 0xc] = a3\n 12755: a3 = a2 >> 0x18\n 12758: u8 [a0 + 0xb] = a3\n 12761: a3 = a2 >> 0x10\n 12764: u8 [a0 + 0xa] = a3\n 12767: a2 = a2 >> 0x8\n 12770: u8 [a0 + 0x9] = a2\n 12773: u8 [a0] = a1\n 12775: a2 = a1 >> 0x38\n 12778: u8 [a0 + 0x7] = a2\n 12781: a2 = a1 >> 0x30\n 12784: u8 [a0 + 0x6] = a2\n 12787: a2 = a1 >> 0x28\n 12790: u8 [a0 + 0x5] = a2\n 12793: a2 = a1 >> 0x20\n 12796: u8 [a0 + 0x4] = a2\n 12799: a2 = a1 >> 0x18\n 12802: u8 [a0 + 0x3] = a2\n 12805: a2 = a1 >> 0x10\n 12808: u8 [a0 + 0x2] = a2\n 12811: a1 = a1 >> 0x8\n 12814: a5 = u64 [sp + 0x30]\n 12817: a2 = a5 >u 0\n 12819: a3 = u64 [sp + 0x28]\n 12822: a3 = a3 <u 0x20\n 12825: a3 = a3 ^ 0x1\n 12828: a3 = a2 if a5 != 0\n 12831: a2 = a5 >u 0\n 12833: a4 = a5 >u 0\n 12835: a4 = a2 if a5 == 0\n 12838: a2 = a5 | a5\n 12841: a4 = a3 if a2 == 0\n 12844: u8 [a0 + 0x1] = a1\n 12847: jump @222 if a4 != 0\n      : @221 (gas: 1)\n 12850: jump @402\n      : @222 (gas: 3)\n 12853: a1 = 0x20\n 12856: a0 = u64 [sp + 0x58]\n 12859: ra = 166, jump @0\n      : @223 [@dyn 83] (gas: 96)\n 12865: a1 = u8 [a0 + 0x9]\n 12868: a2 = u8 [a0 + 0x8]\n 12871: a3 = u8 [a0 + 0xa]\n 12874: a4 = u8 [a0 + 0xb]\n 12877: a1 = a1 << 0x8\n 12880: a1 = a1 | a2\n 12883: a3 = a3 << 0x10\n 12886: a4 = a4 << 0x18\n 12889: a3 = a3 | a4\n 12892: a1 = a1 | a3\n 12895: a2 = u8 [a0 + 0xd]\n 12898: a3 = u8 [a0 + 0xc]\n 12901: a4 = u8 [a0 + 0xe]\n 12904: a5 = u8 [a0 + 0xf]\n 12907: a2 = a2 << 0x8\n 12910: a2 = a2 | a3\n 12913: a4 = a4 << 0x10\n 12916: a5 = a5 << 0x18\n 12919: a4 = a4 | a5\n 12922: a2 = a2 | a4\n 12925: a2 = a2 << 0x20\n 12928: t0 = a2 | a1\n 12931: a2 = u8 [a0 + 0x19]\n 12934: a3 = u8 [a0 + 0x18]\n 12937: a4 = u8 [a0 + 0x1a]\n 12940: a5 = u8 [a0 + 0x1b]\n 12943: a2 = a2 << 0x8\n 12946: a2 = a2 | a3\n 12949: a4 = a4 << 0x10\n 12952: a5 = a5 << 0x18\n 12955: a4 = a4 | a5\n 12958: a2 = a2 | a4\n 12961: a3 = u8 [a0 + 0x1d]\n 12964: a4 = u8 [a0 + 0x1c]\n 12967: a5 = u8 [a0 + 0x1e]\n 12970: s1 = u8 [a0 + 0x1f]\n 12973: a3 = a3 << 0x8\n 12976: a3 = a3 | a4\n 12979: a5 = a5 << 0x10\n 12982: s1 = s1 << 0x18\n 12985: a5 = a5 | s1\n 12988: a3 = a3 | a5\n 12991: a3 = a3 << 0x20\n 12994: t1 = a3 | a2\n 12997: a3 = u8 [a0 + 0x11]\n 13000: a4 = u8 [a0 + 0x10]\n 13003: a5 = u8 [a0 + 0x12]\n 13006: s1 = u8 [a0 + 0x13]\n 13009: a3 = a3 << 0x8\n 13012: a3 = a3 | a4\n 13015: a5 = a5 << 0x10\n 13018: s1 = s1 << 0x18\n 13021: a5 = a5 | s1\n 13024: a3 = a3 | a5\n 13027: a4 = u8 [a0 + 0x1]\n 13030: a5 = u8 [a0]\n 13032: s1 = u8 [a0 + 0x2]\n 13035: a1 = u8 [a0 + 0x3]\n 13038: a4 = a4 << 0x8\n 13041: a4 = a4 | a5\n 13044: s1 = s1 << 0x10\n 13047: a1 = a1 << 0x18\n 13050: a1 = a1 | s1\n 13053: a4 = a4 | a1\n 13056: a1 = u8 [a0 + 0x15]\n 13059: a5 = u8 [a0 + 0x14]\n 13062: s1 = u8 [a0 + 0x16]\n 13065: a2 = u8 [a0 + 0x17]\n 13068: a1 = a1 << 0x8\n 13071: a1 = a1 | a5\n 13074: s1 = s1 << 0x10\n 13077: a2 = a2 << 0x18\n 13080: a2 = a2 | s1\n 13083: a1 = a1 | a2\n 13086: a2 = u8 [a0 + 0x5]\n 13089: a5 = u8 [a0 + 0x4]\n 13092: s1 = u8 [a0 + 0x6]\n 13095: a0 = u8 [a0 + 0x7]\n 13098: a2 = a2 << 0x8\n 13101: a2 = a2 | a5\n 13104: s1 = s1 << 0x10\n 13107: a0 = a0 << 0x18\n 13110: a0 = a0 | s1\n 13113: a0 = a0 | a2\n 13116: a2 = 0x100000000000000\n 13126: a2 = t1 ^ a2\n 13129: a2 = t0 | a2\n 13132: a0 = a0 | a1\n 13135: a0 = a0 << 0x20\n 13138: a3 = a3 | a4\n 13141: a0 = a0 | a3\n 13144: a0 = a0 | a2\n 13147: u64 [sp + 0x58] = a0\n 13150: a0 = 0x40\n 13153: a1 = 0x20\n 13156: ra = 168, jump @0\n      : @224 [@dyn 84] (gas: 98)\n 13162: a1 = u8 [a0 + 0x19]\n 13165: a2 = u8 [a0 + 0x18]\n 13168: a3 = u8 [a0 + 0x1a]\n 13171: a4 = u8 [a0 + 0x1b]\n 13174: a1 = a1 << 0x8\n 13177: a1 = a1 | a2\n 13180: a3 = a3 << 0x10\n 13183: a4 = a4 << 0x18\n 13186: a3 = a3 | a4\n 13189: a1 = a1 | a3\n 13192: a2 = u8 [a0 + 0x1d]\n 13195: a3 = u8 [a0 + 0x1c]\n 13198: a4 = u8 [a0 + 0x1e]\n 13201: a5 = u8 [a0 + 0x1f]\n 13204: a2 = a2 << 0x8\n 13207: a2 = a2 | a3\n 13210: a4 = a4 << 0x10\n 13213: a5 = a5 << 0x18\n 13216: a4 = a4 | a5\n 13219: a2 = a2 | a4\n 13222: a2 = a2 << 0x20\n 13225: t0 = a2 | a1\n 13228: a2 = u8 [a0 + 0x11]\n 13231: a3 = u8 [a0 + 0x10]\n 13234: a4 = u8 [a0 + 0x12]\n 13237: a5 = u8 [a0 + 0x13]\n 13240: a2 = a2 << 0x8\n 13243: a2 = a2 | a3\n 13246: a4 = a4 << 0x10\n 13249: a5 = a5 << 0x18\n 13252: a4 = a4 | a5\n 13255: a2 = a2 | a4\n 13258: a3 = u8 [a0 + 0x15]\n 13261: a4 = u8 [a0 + 0x14]\n 13264: a5 = u8 [a0 + 0x16]\n 13267: s1 = u8 [a0 + 0x17]\n 13270: a3 = a3 << 0x8\n 13273: a3 = a3 | a4\n 13276: a5 = a5 << 0x10\n 13279: s1 = s1 << 0x18\n 13282: a5 = a5 | s1\n 13285: a3 = a3 | a5\n 13288: a3 = a3 << 0x20\n 13291: a2 = a2 | a3\n 13294: a3 = u8 [a0 + 0x9]\n 13297: a4 = u8 [a0 + 0x8]\n 13300: a5 = u8 [a0 + 0xa]\n 13303: s1 = u8 [a0 + 0xb]\n 13306: a3 = a3 << 0x8\n 13309: a3 = a3 | a4\n 13312: a5 = a5 << 0x10\n 13315: s1 = s1 << 0x18\n 13318: a5 = a5 | s1\n 13321: a3 = a3 | a5\n 13324: a4 = u8 [a0 + 0xd]\n 13327: a5 = u8 [a0 + 0xc]\n 13330: s1 = u8 [a0 + 0xe]\n 13333: a1 = u8 [a0 + 0xf]\n 13336: a4 = a4 << 0x8\n 13339: a4 = a4 | a5\n 13342: s1 = s1 << 0x10\n 13345: a1 = a1 << 0x18\n 13348: a1 = a1 | s1\n 13351: a1 = a1 | a4\n 13354: a1 = a1 << 0x20\n 13357: a3 = a3 | a1\n 13360: a1 = u8 [a0 + 0x1]\n 13363: a4 = u8 [a0]\n 13365: a5 = u8 [a0 + 0x2]\n 13368: s1 = u8 [a0 + 0x3]\n 13371: a1 = a1 << 0x8\n 13374: a1 = a1 | a4\n 13377: a5 = a5 << 0x10\n 13380: s1 = s1 << 0x18\n 13383: a5 = a5 | s1\n 13386: a1 = a1 | a5\n 13389: a4 = u8 [a0 + 0x5]\n 13392: a5 = u8 [a0 + 0x4]\n 13395: s1 = u8 [a0 + 0x6]\n 13398: a0 = u8 [a0 + 0x7]\n 13401: a4 = a4 << 0x8\n 13404: a4 = a4 | a5\n 13407: s1 = s1 << 0x10\n 13410: a0 = a0 << 0x18\n 13413: a0 = a0 | s1\n 13416: a0 = a0 | a4\n 13419: a0 = a0 << 0x20\n 13422: a0 = a0 | a1\n 13425: a1 = reverse a0\n 13427: a3 = reverse a3\n 13429: a2 = reverse a2\n 13431: a4 = reverse t0\n 13433: a0 = u64 [sp + 0x58]\n 13436: u64 [sp + 0x48] = a1\n 13439: u64 [sp + 0x40] = a3\n 13442: u64 [sp + 0x38] = a2\n 13445: u64 [sp + 0x30] = a4\n 13448: jump @226 if a0 == 0\n      : @225 (gas: 1)\n 13451: jump @372\n      : @226 (gas: 8)\n 13454: a0 = a4 | a3\n 13457: a1 = a1 | a2\n 13460: a0 = a0 | a1\n 13463: a0 = a0 >> 0x20\n 13466: a1 = a1 | a3\n 13469: a1 = a1 << 0x20\n 13472: a0 = a0 | a1\n 13475: jump @228 if a0 == 0\n      : @227 (gas: 1)\n 13478: jump @401\n      : @228 (gas: 4)\n 13481: i32 a0 = a4 + 0\n 13483: u64 [sp + 0x58] = a0\n 13486: a1 = 0x20\n 13489: ra = 170, jump @0\n      : @229 [@dyn 85] (gas: 48)\n 13495: u8 [a0 + 31] = 0\n 13498: u8 [a0 + 30] = 0\n 13501: u8 [a0 + 29] = 0\n 13504: u8 [a0 + 28] = 0\n 13507: u8 [a0 + 27] = 0\n 13510: u8 [a0 + 26] = 0\n 13513: u8 [a0 + 25] = 0\n 13516: u8 [a0 + 24] = 0\n 13519: u8 [a0 + 23] = 0\n 13522: u8 [a0 + 22] = 0\n 13525: u8 [a0 + 21] = 0\n 13528: u8 [a0 + 20] = 0\n 13531: u8 [a0 + 19] = 0\n 13534: u8 [a0 + 18] = 0\n 13537: u8 [a0 + 17] = 0\n 13540: u8 [a0 + 16] = 0\n 13543: u8 [a0 + 15] = 0\n 13546: u8 [a0 + 14] = 0\n 13549: u8 [a0 + 13] = 0\n 13552: u8 [a0 + 12] = 0\n 13555: u8 [a0 + 11] = 0\n 13558: u8 [a0 + 10] = 0\n 13561: u8 [a0 + 9] = 0\n 13564: u8 [a0 + 8] = 0\n 13567: u8 [a0 + 7] = 0\n 13570: u8 [a0 + 6] = 0\n 13573: u8 [a0 + 5] = 0\n 13576: u8 [a0 + 4] = 0\n 13579: u8 [a0 + 3] = 0x45\n 13583: u8 [a0 + 2] = 0xf2\n 13588: u8 [a0 + 1] = 0xa4\n 13593: u8 [a0 + 0] = 0x3f\n 13596: ecalli 6 // 'ref_time_left'\n 13598: a0 = u64 [sp + 0x60]\n 13601: s1 = sp + 0x7ff\n 13605: s1 = s1 + 0x11\n 13608: u64 [s1 + 0x78] = a0\n 13611: a0 = u64 [sp + 0x68]\n 13614: u64 [s1 + 0x70] = a0\n 13617: a0 = u64 [sp + 0x70]\n 13620: u32 [s1 + 0x80] = a0\n 13624: u64 [s1 + 168] = 0\n 13628: u64 [s1 + 160] = 0\n 13632: u64 [s1 + 152] = 0\n 13636: u64 [s1 + 144] = 0\n 13640: a1 = 0x4\n 13643: a0 = u64 [sp + 0x58]\n 13646: ra = 172, jump @0\n      : @230 [@dyn 86] (gas: 4)\n 13652: u64 [sp + 0x28] = a0\n 13655: a1 = 0x20\n 13658: a0 = u64 [sp + 0x58]\n 13661: ra = 174, jump @0\n      : @231 [@dyn 87] (gas: 35)\n 13667: u32 [s1 + 176] = 0x20\n 13672: u64 [s1 + 232] = 0\n 13676: u64 [s1 + 224] = 0\n 13680: u64 [s1 + 216] = 0\n 13684: u64 [s1 + 208] = 0\n 13688: a1 = sp + 0x7ff\n 13692: a1 = a1 + 0x81\n 13696: a1 = a1 << 0x20\n 13699: a1 = a1 >> 0x20\n 13702: s1 = u64 [sp + 0x90]\n 13706: s1 = s1 | a1\n 13709: a1 = sp + 0x7ff\n 13713: a1 = a1 + 0xa1\n 13717: a1 = a1 << 0x20\n 13720: a1 = a1 >> 0x20\n 13723: a2 = sp + 0x7ff\n 13727: a2 = a2 + 0xe1\n 13731: a2 = a2 << 0x20\n 13734: a3 = a2 | a1\n 13737: a1 = u64 [sp + 0x28]\n 13740: a1 = a1 << 0x20\n 13743: a1 = a1 >> 0x20\n 13746: a4 = u64 [sp + 0x98]\n 13750: a4 = a4 | a1\n 13753: a0 = a0 << 0x20\n 13756: a0 = a0 >> 0x20\n 13759: a1 = sp + 0x7ff\n 13763: a1 = a1 + 0xc1\n 13767: a1 = a1 << 0x20\n 13770: a5 = a1 | a0\n 13773: a1 = 0xffffffffffffffff\n 13776: a2 = 0xffffffffffffffff\n 13779: a0 = s1\n 13781: ecalli 0 // 'call'\n 13782: fallthrough\n      : @232 (gas: 1)\n 13783: jump @234 if a0 == 0\n      : @233 (gas: 1)\n 13786: jump @362\n      : @234 (gas: 2)\n 13789: ecalli 8 // 'return_data_size'\n 13791: fallthrough\n      : @235 (gas: 2)\n 13792: a1 = 0x20\n 13795: jump @237 if a0 >=u a1\n      : @236 (gas: 3)\n 13798: ecalli 8 // 'return_data_size'\n 13800: a1 = a0\n 13802: fallthrough\n      : @237 (gas: 27)\n 13803: a3 = u64 [sp + 0x48]\n 13806: a4 = u64 [sp + 0x40]\n 13809: s1 = u64 [sp + 0x38]\n 13812: a0 = a1 + 0x1f\n 13815: u64 [sp + 0x20] = a1\n 13818: a1 = a0 <u a1\n 13821: u64 [sp + 40] = 0\n 13824: a1 = a1 & 0x1\n 13827: a0 = a0 & 0xffffffffffffffe0\n 13830: a2 = u64 [sp + 0x30]\n 13833: a2 = a2 + a0\n 13836: u64 [sp + 0x30] = a2\n 13839: a0 = a2 <u a0\n 13842: s1 = s1 + a1\n 13845: s1 = s1 + a0\n 13848: a2 = s1 ^ a1\n 13851: a1 = s1 <u a1\n 13854: a1 = a0 if a2 == 0\n 13857: a1 = a1 + a4\n 13860: a0 = a1 <u a4\n 13863: a0 = a0 + a3\n 13866: u64 [sp + 0x48] = a1\n 13869: u64 [sp + 0x40] = a0\n 13872: a0 = a0 | a1\n 13875: a1 = s1 <u 0x1\n 13878: a1 = 0 if a0 != 0\n 13880: jump @239 if a1 != 0\n      : @238 (gas: 1)\n 13883: jump @415\n      : @239 (gas: 3)\n 13886: a0 = 0x40\n 13889: a1 = 0x20\n 13892: ra = 176, jump @0\n      : @240 [@dyn 88] (gas: 79)\n 13898: a1 = u64 [sp + 0x40]\n 13901: a1 = reverse a1\n 13903: a2 = u64 [sp + 0x48]\n 13906: a2 = reverse a2\n 13908: a3 = reverse s1\n 13910: a4 = u64 [sp + 0x30]\n 13913: a4 = reverse a4\n 13915: u8 [a0 + 0x18] = a4\n 13918: a5 = a4 >> 0x38\n 13921: u8 [a0 + 0x1f] = a5\n 13924: a5 = a4 >> 0x30\n 13927: u8 [a0 + 0x1e] = a5\n 13930: a5 = a4 >> 0x28\n 13933: u8 [a0 + 0x1d] = a5\n 13936: a5 = a4 >> 0x20\n 13939: u8 [a0 + 0x1c] = a5\n 13942: a5 = a4 >> 0x18\n 13945: u8 [a0 + 0x1b] = a5\n 13948: a5 = a4 >> 0x10\n 13951: u8 [a0 + 0x1a] = a5\n 13954: a4 = a4 >> 0x8\n 13957: u8 [a0 + 0x19] = a4\n 13960: u8 [a0 + 0x10] = a3\n 13963: a4 = a3 >> 0x38\n 13966: u8 [a0 + 0x17] = a4\n 13969: a4 = a3 >> 0x30\n 13972: u8 [a0 + 0x16] = a4\n 13975: a4 = a3 >> 0x28\n 13978: u8 [a0 + 0x15] = a4\n 13981: a4 = a3 >> 0x20\n 13984: u8 [a0 + 0x14] = a4\n 13987: a4 = a3 >> 0x18\n 13990: u8 [a0 + 0x13] = a4\n 13993: a4 = a3 >> 0x10\n 13996: u8 [a0 + 0x12] = a4\n 13999: a3 = a3 >> 0x8\n 14002: u8 [a0 + 0x11] = a3\n 14005: u8 [a0 + 0x8] = a2\n 14008: a3 = a2 >> 0x38\n 14011: u8 [a0 + 0xf] = a3\n 14014: a3 = a2 >> 0x30\n 14017: u8 [a0 + 0xe] = a3\n 14020: a3 = a2 >> 0x28\n 14023: u8 [a0 + 0xd] = a3\n 14026: a3 = a2 >> 0x20\n 14029: u8 [a0 + 0xc] = a3\n 14032: a3 = a2 >> 0x18\n 14035: u8 [a0 + 0xb] = a3\n 14038: a3 = a2 >> 0x10\n 14041: u8 [a0 + 0xa] = a3\n 14044: a2 = a2 >> 0x8\n 14047: u8 [a0 + 0x9] = a2\n 14050: u8 [a0] = a1\n 14052: a2 = a1 >> 0x38\n 14055: u8 [a0 + 0x7] = a2\n 14058: a2 = a1 >> 0x30\n 14061: u8 [a0 + 0x6] = a2\n 14064: a2 = a1 >> 0x28\n 14067: u8 [a0 + 0x5] = a2\n 14070: a2 = a1 >> 0x20\n 14073: u8 [a0 + 0x4] = a2\n 14076: a2 = a1 >> 0x18\n 14079: u8 [a0 + 0x3] = a2\n 14082: a2 = a1 >> 0x10\n 14085: u8 [a0 + 0x2] = a2\n 14088: a1 = a1 >> 0x8\n 14091: a5 = u64 [sp + 0x28]\n 14094: a2 = a5 >u 0\n 14096: a3 = u64 [sp + 0x20]\n 14099: a3 = a3 <u 0x20\n 14102: a3 = a3 ^ 0x1\n 14105: a3 = a2 if a5 != 0\n 14108: a2 = a5 >u 0\n 14110: a4 = a5 >u 0\n 14112: a4 = a2 if a5 == 0\n 14115: a2 = a5 | a5\n 14118: a4 = a3 if a2 == 0\n 14121: u8 [a0 + 0x1] = a1\n 14124: jump @242 if a4 != 0\n      : @241 (gas: 1)\n 14127: jump @402\n      : @242 (gas: 3)\n 14130: a1 = 0x20\n 14133: a0 = u64 [sp + 0x58]\n 14136: ra = 178, jump @0\n      : @243 [@dyn 89] (gas: 93)\n 14142: a1 = u8 [a0 + 0x11]\n 14145: a2 = u8 [a0 + 0x10]\n 14148: a3 = u8 [a0 + 0x12]\n 14151: a4 = u8 [a0 + 0x13]\n 14154: a1 = a1 << 0x8\n 14157: a1 = a1 | a2\n 14160: a3 = a3 << 0x10\n 14163: a4 = a4 << 0x18\n 14166: a3 = a3 | a4\n 14169: t0 = a3 | a1\n 14172: a2 = u8 [a0 + 0x1]\n 14175: a3 = u8 [a0]\n 14177: a4 = u8 [a0 + 0x2]\n 14180: a5 = u8 [a0 + 0x3]\n 14183: a2 = a2 << 0x8\n 14186: a2 = a2 | a3\n 14189: a4 = a4 << 0x10\n 14192: a5 = a5 << 0x18\n 14195: a4 = a4 | a5\n 14198: t1 = a4 | a2\n 14201: a3 = u8 [a0 + 0x15]\n 14204: a4 = u8 [a0 + 0x14]\n 14207: a5 = u8 [a0 + 0x16]\n 14210: s1 = u8 [a0 + 0x17]\n 14213: a3 = a3 << 0x8\n 14216: a3 = a3 | a4\n 14219: a5 = a5 << 0x10\n 14222: s1 = s1 << 0x18\n 14225: a5 = a5 | s1\n 14228: t2 = a5 | a3\n 14231: a4 = u8 [a0 + 0x5]\n 14234: a5 = u8 [a0 + 0x4]\n 14237: s1 = u8 [a0 + 0x6]\n 14240: a1 = u8 [a0 + 0x7]\n 14243: a4 = a4 << 0x8\n 14246: a4 = a4 | a5\n 14249: s1 = s1 << 0x10\n 14252: a1 = a1 << 0x18\n 14255: a1 = a1 | s1\n 14258: ra = a1 | a4\n 14261: a1 = u8 [a0 + 0x19]\n 14264: a5 = u8 [a0 + 0x18]\n 14267: s1 = u8 [a0 + 0x1a]\n 14270: a2 = u8 [a0 + 0x1b]\n 14273: a1 = a1 << 0x8\n 14276: a1 = a1 | a5\n 14279: s1 = s1 << 0x10\n 14282: a2 = a2 << 0x18\n 14285: a2 = a2 | s1\n 14288: a5 = a2 | a1\n 14291: a1 = u8 [a0 + 0x9]\n 14294: a2 = u8 [a0 + 0x8]\n 14297: s1 = u8 [a0 + 0xa]\n 14300: a3 = u8 [a0 + 0xb]\n 14303: a1 = a1 << 0x8\n 14306: a1 = a1 | a2\n 14309: s1 = s1 << 0x10\n 14312: a3 = a3 << 0x18\n 14315: a3 = a3 | s1\n 14318: s1 = a3 | a1\n 14321: a1 = u8 [a0 + 0x1d]\n 14324: a2 = u8 [a0 + 0x1c]\n 14327: a3 = u8 [a0 + 0x1e]\n 14330: a4 = u8 [a0 + 0x1f]\n 14333: a1 = a1 << 0x8\n 14336: a1 = a1 | a2\n 14339: a3 = a3 << 0x10\n 14342: a4 = a4 << 0x18\n 14345: a3 = a3 | a4\n 14348: a1 = a1 | a3\n 14351: a2 = u8 [a0 + 0xd]\n 14354: a3 = u8 [a0 + 0xc]\n 14357: a4 = u8 [a0 + 0xe]\n 14360: a0 = u8 [a0 + 0xf]\n 14363: a2 = a2 << 0x8\n 14366: a2 = a2 | a3\n 14369: a4 = a4 << 0x10\n 14372: a0 = a0 << 0x18\n 14375: a0 = a0 | a4\n 14378: a0 = a0 | a2\n 14381: a0 = a0 | a1\n 14384: a0 = a0 << 0x20\n 14387: a5 = a5 | s1\n 14390: a0 = a0 | a5\n 14393: a1 = ra | t2\n 14396: a1 = a1 << 0x20\n 14399: a2 = t1 | t0\n 14402: a1 = a1 | a2\n 14405: a0 = a0 | a1\n 14408: u64 [sp + 0x58] = a0\n 14411: a0 = 0x40\n 14414: a1 = 0x20\n 14417: ra = 180, jump @0\n      : @244 [@dyn 90] (gas: 105)\n 14423: a1 = u8 [a0 + 0x19]\n 14426: a2 = u8 [a0 + 0x18]\n 14429: a3 = u8 [a0 + 0x1a]\n 14432: a4 = u8 [a0 + 0x1b]\n 14435: a1 = a1 << 0x8\n 14438: a1 = a1 | a2\n 14441: a3 = a3 << 0x10\n 14444: a4 = a4 << 0x18\n 14447: a3 = a3 | a4\n 14450: a1 = a1 | a3\n 14453: a2 = u8 [a0 + 0x1d]\n 14456: a3 = u8 [a0 + 0x1c]\n 14459: a4 = u8 [a0 + 0x1e]\n 14462: a5 = u8 [a0 + 0x1f]\n 14465: a2 = a2 << 0x8\n 14468: a2 = a2 | a3\n 14471: a4 = a4 << 0x10\n 14474: a5 = a5 << 0x18\n 14477: a4 = a4 | a5\n 14480: a2 = a2 | a4\n 14483: a2 = a2 << 0x20\n 14486: t0 = a2 | a1\n 14489: a2 = u8 [a0 + 0x11]\n 14492: a3 = u8 [a0 + 0x10]\n 14495: a4 = u8 [a0 + 0x12]\n 14498: a5 = u8 [a0 + 0x13]\n 14501: a2 = a2 << 0x8\n 14504: a2 = a2 | a3\n 14507: a4 = a4 << 0x10\n 14510: a5 = a5 << 0x18\n 14513: a4 = a4 | a5\n 14516: a2 = a2 | a4\n 14519: a3 = u8 [a0 + 0x15]\n 14522: a4 = u8 [a0 + 0x14]\n 14525: a5 = u8 [a0 + 0x16]\n 14528: s1 = u8 [a0 + 0x17]\n 14531: a3 = a3 << 0x8\n 14534: a3 = a3 | a4\n 14537: a5 = a5 << 0x10\n 14540: s1 = s1 << 0x18\n 14543: a5 = a5 | s1\n 14546: a3 = a3 | a5\n 14549: a3 = a3 << 0x20\n 14552: a2 = a2 | a3\n 14555: a3 = u8 [a0 + 0x9]\n 14558: a4 = u8 [a0 + 0x8]\n 14561: a5 = u8 [a0 + 0xa]\n 14564: s1 = u8 [a0 + 0xb]\n 14567: a3 = a3 << 0x8\n 14570: a3 = a3 | a4\n 14573: a5 = a5 << 0x10\n 14576: s1 = s1 << 0x18\n 14579: a5 = a5 | s1\n 14582: a3 = a3 | a5\n 14585: a4 = u8 [a0 + 0xd]\n 14588: a5 = u8 [a0 + 0xc]\n 14591: s1 = u8 [a0 + 0xe]\n 14594: a1 = u8 [a0 + 0xf]\n 14597: a4 = a4 << 0x8\n 14600: a4 = a4 | a5\n 14603: s1 = s1 << 0x10\n 14606: a1 = a1 << 0x18\n 14609: a1 = a1 | s1\n 14612: a1 = a1 | a4\n 14615: a1 = a1 << 0x20\n 14618: a3 = a3 | a1\n 14621: a1 = u8 [a0 + 0x1]\n 14624: a4 = u8 [a0]\n 14626: a5 = u8 [a0 + 0x2]\n 14629: s1 = u8 [a0 + 0x3]\n 14632: a1 = a1 << 0x8\n 14635: a1 = a1 | a4\n 14638: a5 = a5 << 0x10\n 14641: s1 = s1 << 0x18\n 14644: a5 = a5 | s1\n 14647: a1 = a1 | a5\n 14650: a4 = u8 [a0 + 0x5]\n 14653: a5 = u8 [a0 + 0x4]\n 14656: s1 = u8 [a0 + 0x6]\n 14659: a0 = u8 [a0 + 0x7]\n 14662: a4 = a4 << 0x8\n 14665: a4 = a4 | a5\n 14668: s1 = s1 << 0x10\n 14671: a0 = a0 << 0x18\n 14674: a0 = a0 | s1\n 14677: a0 = a0 | a4\n 14680: a0 = a0 << 0x20\n 14683: a0 = a0 | a1\n 14686: s1 = reverse a0\n 14688: a3 = reverse a3\n 14690: a2 = reverse a2\n 14692: a4 = reverse t0\n 14694: a1 = a4 | a3\n 14697: a0 = a2 | s1\n 14700: a5 = u64 [sp + 0x58]\n 14703: u64 [sp + 0x48] = s1\n 14706: u64 [sp + 0x40] = a3\n 14709: u64 [sp + 0x38] = a2\n 14712: u64 [sp + 0x30] = a4\n 14715: a1 = a1 | a0\n 14718: a1 = a1 >> 0x20\n 14721: a0 = a0 | a3\n 14724: a0 = a0 << 0x20\n 14727: a0 = a0 | a1\n 14730: jump @246 if a5 == 0\n      : @245 (gas: 1)\n 14733: jump @376\n      : @246 (gas: 1)\n 14736: jump @248 if a0 == 0\n      : @247 (gas: 1)\n 14739: jump @401\n      : @248 (gas: 4)\n 14742: i32 a0 = a4 + 0\n 14744: u64 [sp + 0x58] = a0\n 14747: a1 = 0x20\n 14750: ra = 182, jump @0\n      : @249 [@dyn 91] (gas: 48)\n 14756: u8 [a0 + 31] = 0\n 14759: u8 [a0 + 30] = 0\n 14762: u8 [a0 + 29] = 0\n 14765: u8 [a0 + 28] = 0\n 14768: u8 [a0 + 27] = 0\n 14771: u8 [a0 + 26] = 0\n 14774: u8 [a0 + 25] = 0\n 14777: u8 [a0 + 24] = 0\n 14780: u8 [a0 + 23] = 0\n 14783: u8 [a0 + 22] = 0\n 14786: u8 [a0 + 21] = 0\n 14789: u8 [a0 + 20] = 0\n 14792: u8 [a0 + 19] = 0\n 14795: u8 [a0 + 18] = 0\n 14798: u8 [a0 + 17] = 0\n 14801: u8 [a0 + 16] = 0\n 14804: u8 [a0 + 15] = 0\n 14807: u8 [a0 + 14] = 0\n 14810: u8 [a0 + 13] = 0\n 14813: u8 [a0 + 12] = 0\n 14816: u8 [a0 + 11] = 0\n 14819: u8 [a0 + 10] = 0\n 14822: u8 [a0 + 9] = 0\n 14825: u8 [a0 + 8] = 0\n 14828: u8 [a0 + 7] = 0\n 14831: u8 [a0 + 6] = 0\n 14834: u8 [a0 + 5] = 0\n 14837: u8 [a0 + 4] = 0\n 14840: u8 [a0 + 3] = 0x8a\n 14845: u8 [a0 + 2] = 0xe0\n 14850: u8 [a0 + 1] = 0x9d\n 14855: u8 [a0 + 0] = 0xd0\n 14859: ecalli 6 // 'ref_time_left'\n 14861: a0 = u64 [sp + 0x60]\n 14864: s1 = sp + 0x7ff\n 14868: s1 = s1 + 0x11\n 14871: u64 [s1 + 0xf8] = a0\n 14875: a0 = u64 [sp + 0x68]\n 14878: u64 [s1 + 0xf0] = a0\n 14882: a0 = u64 [sp + 0x70]\n 14885: u32 [s1 + 0x100] = a0\n 14889: u64 [s1 + 296] = 0\n 14893: u64 [s1 + 288] = 0\n 14897: u64 [s1 + 280] = 0\n 14901: u64 [s1 + 272] = 0\n 14905: a1 = 0x4\n 14908: a0 = u64 [sp + 0x58]\n 14911: ra = 184, jump @0\n      : @250 [@dyn 92] (gas: 4)\n 14917: u64 [sp + 0x28] = a0\n 14920: a1 = 0x20\n 14923: a0 = u64 [sp + 0x58]\n 14926: ra = 186, jump @0\n      : @251 [@dyn 93] (gas: 35)\n 14932: u32 [s1 + 304] = 0x20\n 14937: u64 [s1 + 360] = 0xffffffffffffffff\n 14942: u64 [s1 + 352] = 0xffffffffffffffff\n 14947: u64 [s1 + 344] = 0xffffffffffffffff\n 14952: u64 [s1 + 336] = 0xffffffffffffffff\n 14957: a1 = sp + 0x7ff\n 14961: a1 = a1 + 0x101\n 14965: a1 = a1 << 0x20\n 14968: a1 = a1 >> 0x20\n 14971: s1 = u64 [sp + 0x50]\n 14974: s1 = s1 | a1\n 14977: a1 = sp + 0x7ff\n 14981: a1 = a1 + 0x121\n 14985: a1 = a1 << 0x20\n 14988: a1 = a1 >> 0x20\n 14991: a2 = sp + 0x7ff\n 14995: a2 = a2 + 0x161\n 14999: a2 = a2 << 0x20\n 15002: a3 = a2 | a1\n 15005: a1 = u64 [sp + 0x28]\n 15008: a1 = a1 << 0x20\n 15011: a1 = a1 >> 0x20\n 15014: a4 = u64 [sp + 0x98]\n 15018: a4 = a4 | a1\n 15021: a0 = a0 << 0x20\n 15024: a0 = a0 >> 0x20\n 15027: a1 = sp + 0x7ff\n 15031: a1 = a1 + 0x141\n 15035: a1 = a1 << 0x20\n 15038: a5 = a1 | a0\n 15041: a1 = 0xffffffffffffffff\n 15044: a2 = 0xffffffffffffffff\n 15047: a0 = s1\n 15049: ecalli 0 // 'call'\n 15050: fallthrough\n      : @252 (gas: 1)\n 15051: jump @254 if a0 == 0\n      : @253 (gas: 1)\n 15054: jump @362\n      : @254 (gas: 2)\n 15057: ecalli 8 // 'return_data_size'\n 15059: fallthrough\n      : @255 (gas: 2)\n 15060: a1 = 0x20\n 15063: jump @257 if a0 >=u a1\n      : @256 (gas: 3)\n 15066: ecalli 8 // 'return_data_size'\n 15068: a1 = a0\n 15070: fallthrough\n      : @257 (gas: 27)\n 15071: a3 = u64 [sp + 0x48]\n 15074: a4 = u64 [sp + 0x40]\n 15077: s1 = u64 [sp + 0x38]\n 15080: a5 = u64 [sp + 0x30]\n 15083: a0 = a1 + 0x1f\n 15086: u64 [sp + 0x20] = a1\n 15089: a1 = a0 <u a1\n 15092: u64 [sp + 40] = 0\n 15095: a1 = a1 & 0x1\n 15098: a0 = a0 & 0xffffffffffffffe0\n 15101: a5 = a5 + a0\n 15104: u64 [sp + 0x30] = a5\n 15107: a0 = a5 <u a0\n 15110: s1 = s1 + a1\n 15113: s1 = s1 + a0\n 15116: a2 = s1 ^ a1\n 15119: a1 = s1 <u a1\n 15122: a1 = a0 if a2 == 0\n 15125: a1 = a1 + a4\n 15128: a0 = a1 <u a4\n 15131: a0 = a0 + a3\n 15134: u64 [sp + 0x48] = a1\n 15137: u64 [sp + 0x40] = a0\n 15140: a0 = a0 | a1\n 15143: a1 = s1 <u 0x1\n 15146: a1 = 0 if a0 != 0\n 15148: jump @259 if a1 != 0\n      : @258 (gas: 1)\n 15151: jump @417\n      : @259 (gas: 3)\n 15154: a0 = 0x40\n 15157: a1 = 0x20\n 15160: ra = 188, jump @0\n      : @260 [@dyn 94] (gas: 79)\n 15166: a1 = u64 [sp + 0x40]\n 15169: a1 = reverse a1\n 15171: a2 = u64 [sp + 0x48]\n 15174: a2 = reverse a2\n 15176: a3 = reverse s1\n 15178: a4 = u64 [sp + 0x30]\n 15181: a4 = reverse a4\n 15183: u8 [a0 + 0x18] = a4\n 15186: a5 = a4 >> 0x38\n 15189: u8 [a0 + 0x1f] = a5\n 15192: a5 = a4 >> 0x30\n 15195: u8 [a0 + 0x1e] = a5\n 15198: a5 = a4 >> 0x28\n 15201: u8 [a0 + 0x1d] = a5\n 15204: a5 = a4 >> 0x20\n 15207: u8 [a0 + 0x1c] = a5\n 15210: a5 = a4 >> 0x18\n 15213: u8 [a0 + 0x1b] = a5\n 15216: a5 = a4 >> 0x10\n 15219: u8 [a0 + 0x1a] = a5\n 15222: a4 = a4 >> 0x8\n 15225: u8 [a0 + 0x19] = a4\n 15228: u8 [a0 + 0x10] = a3\n 15231: a4 = a3 >> 0x38\n 15234: u8 [a0 + 0x17] = a4\n 15237: a4 = a3 >> 0x30\n 15240: u8 [a0 + 0x16] = a4\n 15243: a4 = a3 >> 0x28\n 15246: u8 [a0 + 0x15] = a4\n 15249: a4 = a3 >> 0x20\n 15252: u8 [a0 + 0x14] = a4\n 15255: a4 = a3 >> 0x18\n 15258: u8 [a0 + 0x13] = a4\n 15261: a4 = a3 >> 0x10\n 15264: u8 [a0 + 0x12] = a4\n 15267: a3 = a3 >> 0x8\n 15270: u8 [a0 + 0x11] = a3\n 15273: u8 [a0 + 0x8] = a2\n 15276: a3 = a2 >> 0x38\n 15279: u8 [a0 + 0xf] = a3\n 15282: a3 = a2 >> 0x30\n 15285: u8 [a0 + 0xe] = a3\n 15288: a3 = a2 >> 0x28\n 15291: u8 [a0 + 0xd] = a3\n 15294: a3 = a2 >> 0x20\n 15297: u8 [a0 + 0xc] = a3\n 15300: a3 = a2 >> 0x18\n 15303: u8 [a0 + 0xb] = a3\n 15306: a3 = a2 >> 0x10\n 15309: u8 [a0 + 0xa] = a3\n 15312: a2 = a2 >> 0x8\n 15315: u8 [a0 + 0x9] = a2\n 15318: u8 [a0] = a1\n 15320: a2 = a1 >> 0x38\n 15323: u8 [a0 + 0x7] = a2\n 15326: a2 = a1 >> 0x30\n 15329: u8 [a0 + 0x6] = a2\n 15332: a2 = a1 >> 0x28\n 15335: u8 [a0 + 0x5] = a2\n 15338: a2 = a1 >> 0x20\n 15341: u8 [a0 + 0x4] = a2\n 15344: a2 = a1 >> 0x18\n 15347: u8 [a0 + 0x3] = a2\n 15350: a2 = a1 >> 0x10\n 15353: u8 [a0 + 0x2] = a2\n 15356: a1 = a1 >> 0x8\n 15359: a5 = u64 [sp + 0x28]\n 15362: a2 = a5 >u 0\n 15364: a3 = u64 [sp + 0x20]\n 15367: a3 = a3 <u 0x20\n 15370: a3 = a3 ^ 0x1\n 15373: a3 = a2 if a5 != 0\n 15376: a2 = a5 >u 0\n 15378: a4 = a5 >u 0\n 15380: a4 = a2 if a5 == 0\n 15383: a2 = a5 | a5\n 15386: a4 = a3 if a2 == 0\n 15389: u8 [a0 + 0x1] = a1\n 15392: jump @262 if a4 != 0\n      : @261 (gas: 1)\n 15395: jump @402\n      : @262 (gas: 3)\n 15398: a1 = 0x20\n 15401: a0 = u64 [sp + 0x58]\n 15404: ra = 190, jump @0\n      : @263 [@dyn 95] (gas: 95)\n 15410: a1 = u8 [a0 + 0x19]\n 15413: a2 = u8 [a0 + 0x18]\n 15416: a3 = u8 [a0 + 0x1a]\n 15419: a4 = u8 [a0 + 0x1b]\n 15422: a1 = a1 << 0x8\n 15425: a1 = a1 | a2\n 15428: a3 = a3 << 0x10\n 15431: a4 = a4 << 0x18\n 15434: a3 = a3 | a4\n 15437: a1 = a1 | a3\n 15440: a2 = u8 [a0 + 0x1d]\n 15443: a3 = u8 [a0 + 0x1c]\n 15446: a4 = u8 [a0 + 0x1e]\n 15449: a5 = u8 [a0 + 0x1f]\n 15452: a2 = a2 << 0x8\n 15455: a2 = a2 | a3\n 15458: a4 = a4 << 0x10\n 15461: a5 = a5 << 0x18\n 15464: a4 = a4 | a5\n 15467: a2 = a2 | a4\n 15470: a2 = a2 << 0x20\n 15473: t0 = a2 | a1\n 15476: a2 = u8 [a0 + 0x11]\n 15479: a3 = u8 [a0 + 0x10]\n 15482: a4 = u8 [a0 + 0x12]\n 15485: a5 = u8 [a0 + 0x13]\n 15488: a2 = a2 << 0x8\n 15491: a2 = a2 | a3\n 15494: a4 = a4 << 0x10\n 15497: a5 = a5 << 0x18\n 15500: a4 = a4 | a5\n 15503: a2 = a2 | a4\n 15506: a3 = u8 [a0 + 0x15]\n 15509: a4 = u8 [a0 + 0x14]\n 15512: a5 = u8 [a0 + 0x16]\n 15515: s1 = u8 [a0 + 0x17]\n 15518: a3 = a3 << 0x8\n 15521: a3 = a3 | a4\n 15524: a5 = a5 << 0x10\n 15527: s1 = s1 << 0x18\n 15530: a5 = a5 | s1\n 15533: a3 = a3 | a5\n 15536: a3 = a3 << 0x20\n 15539: t1 = a3 | a2\n 15542: a3 = u8 [a0 + 0x1]\n 15545: a4 = u8 [a0]\n 15547: a5 = u8 [a0 + 0x2]\n 15550: s1 = u8 [a0 + 0x3]\n 15553: a3 = a3 << 0x8\n 15556: a3 = a3 | a4\n 15559: a5 = a5 << 0x10\n 15562: s1 = s1 << 0x18\n 15565: a5 = a5 | s1\n 15568: a3 = a3 | a5\n 15571: a4 = u8 [a0 + 0x9]\n 15574: a5 = u8 [a0 + 0x8]\n 15577: s1 = u8 [a0 + 0xa]\n 15580: a1 = u8 [a0 + 0xb]\n 15583: a4 = a4 << 0x8\n 15586: a4 = a4 | a5\n 15589: s1 = s1 << 0x10\n 15592: a1 = a1 << 0x18\n 15595: a1 = a1 | s1\n 15598: a4 = a4 | a1\n 15601: a1 = u8 [a0 + 0x5]\n 15604: a5 = u8 [a0 + 0x4]\n 15607: s1 = u8 [a0 + 0x6]\n 15610: a2 = u8 [a0 + 0x7]\n 15613: a1 = a1 << 0x8\n 15616: a1 = a1 | a5\n 15619: s1 = s1 << 0x10\n 15622: a2 = a2 << 0x18\n 15625: a2 = a2 | s1\n 15628: a1 = a1 | a2\n 15631: a2 = u8 [a0 + 0xd]\n 15634: a5 = u8 [a0 + 0xc]\n 15637: s1 = u8 [a0 + 0xe]\n 15640: a0 = u8 [a0 + 0xf]\n 15643: a2 = a2 << 0x8\n 15646: a2 = a2 | a5\n 15649: s1 = s1 << 0x10\n 15652: a0 = a0 << 0x18\n 15655: a0 = a0 | s1\n 15658: a0 = a0 | a2\n 15661: a2 = reverse t1\n 15663: a5 = reverse t0\n 15665: a5 = a5 <u 0x2\n 15668: a5 = 0 if a2 != 0\n 15670: a0 = a0 | a1\n 15673: a0 = a0 << 0x20\n 15676: a3 = a3 | a4\n 15679: a0 = a0 | a3\n 15682: a0 = reverse a0\n 15684: a5 = 0 if a0 != 0\n 15686: jump @265 if a5 != 0\n      : @264 (gas: 1)\n 15689: jump @402\n      : @265 (gas: 3)\n 15692: a0 = 0x40\n 15695: a1 = 0x20\n 15698: ra = 192, jump @0\n      : @266 [@dyn 96] (gas: 103)\n 15704: a1 = u8 [a0 + 0x11]\n 15707: a2 = u8 [a0 + 0x10]\n 15710: a3 = u8 [a0 + 0x12]\n 15713: a4 = u8 [a0 + 0x13]\n 15716: a1 = a1 << 0x8\n 15719: a1 = a1 | a2\n 15722: a3 = a3 << 0x10\n 15725: a4 = a4 << 0x18\n 15728: a3 = a3 | a4\n 15731: a1 = a1 | a3\n 15734: a2 = u8 [a0 + 0x15]\n 15737: a3 = u8 [a0 + 0x14]\n 15740: a4 = u8 [a0 + 0x16]\n 15743: a5 = u8 [a0 + 0x17]\n 15746: a2 = a2 << 0x8\n 15749: a2 = a2 | a3\n 15752: a4 = a4 << 0x10\n 15755: a5 = a5 << 0x18\n 15758: a4 = a4 | a5\n 15761: a2 = a2 | a4\n 15764: a2 = a2 << 0x20\n 15767: t0 = a2 | a1\n 15770: a2 = u8 [a0 + 0x1]\n 15773: a3 = u8 [a0]\n 15775: a4 = u8 [a0 + 0x2]\n 15778: a5 = u8 [a0 + 0x3]\n 15781: a2 = a2 << 0x8\n 15784: a2 = a2 | a3\n 15787: a4 = a4 << 0x10\n 15790: a5 = a5 << 0x18\n 15793: a4 = a4 | a5\n 15796: a2 = a2 | a4\n 15799: a3 = u8 [a0 + 0x5]\n 15802: a4 = u8 [a0 + 0x4]\n 15805: a5 = u8 [a0 + 0x6]\n 15808: s1 = u8 [a0 + 0x7]\n 15811: a3 = a3 << 0x8\n 15814: a3 = a3 | a4\n 15817: a5 = a5 << 0x10\n 15820: s1 = s1 << 0x18\n 15823: a5 = a5 | s1\n 15826: a3 = a3 | a5\n 15829: a3 = a3 << 0x20\n 15832: a2 = a2 | a3\n 15835: a3 = u8 [a0 + 0x19]\n 15838: a4 = u8 [a0 + 0x18]\n 15841: a5 = u8 [a0 + 0x1a]\n 15844: s1 = u8 [a0 + 0x1b]\n 15847: a3 = a3 << 0x8\n 15850: a3 = a3 | a4\n 15853: a5 = a5 << 0x10\n 15856: s1 = s1 << 0x18\n 15859: a5 = a5 | s1\n 15862: a3 = a3 | a5\n 15865: a4 = u8 [a0 + 0x1d]\n 15868: a5 = u8 [a0 + 0x1c]\n 15871: s1 = u8 [a0 + 0x1e]\n 15874: a1 = u8 [a0 + 0x1f]\n 15877: a4 = a4 << 0x8\n 15880: a4 = a4 | a5\n 15883: s1 = s1 << 0x10\n 15886: a1 = a1 << 0x18\n 15889: a1 = a1 | s1\n 15892: a1 = a1 | a4\n 15895: a1 = a1 << 0x20\n 15898: a3 = a3 | a1\n 15901: a1 = u8 [a0 + 0x9]\n 15904: a4 = u8 [a0 + 0x8]\n 15907: a5 = u8 [a0 + 0xa]\n 15910: s1 = u8 [a0 + 0xb]\n 15913: a1 = a1 << 0x8\n 15916: a1 = a1 | a4\n 15919: a5 = a5 << 0x10\n 15922: s1 = s1 << 0x18\n 15925: a5 = a5 | s1\n 15928: a1 = a1 | a5\n 15931: a4 = u8 [a0 + 0xd]\n 15934: a5 = u8 [a0 + 0xc]\n 15937: s1 = u8 [a0 + 0xe]\n 15940: a0 = u8 [a0 + 0xf]\n 15943: a4 = a4 << 0x8\n 15946: a4 = a4 | a5\n 15949: s1 = s1 << 0x10\n 15952: a0 = a0 << 0x18\n 15955: a0 = a0 | s1\n 15958: a0 = a0 | a4\n 15961: a0 = a0 << 0x20\n 15964: a0 = a0 | a1\n 15967: a4 = reverse a0\n 15969: a3 = reverse a3\n 15971: a0 = reverse a2\n 15973: a1 = reverse t0\n 15975: u64 [sp + 0x40] = a0\n 15978: u64 [sp + 0x38] = a1\n 15981: a0 = a0 | a1\n 15984: a1 = a3 | a4\n 15987: a1 = a1 | a0\n 15990: a1 = a1 >> 0x20\n 15993: u64 [sp + 0x48] = a4\n 15996: a0 = a0 | a4\n 15999: a0 = a0 << 0x20\n 16002: a0 = a0 | a1\n 16005: jump @268 if a0 == 0\n      : @267 (gas: 1)\n 16008: jump @401\n      : @268 (gas: 5)\n 16011: u64 [sp + 0x28] = a3\n 16014: i32 a0 = a3 + 0\n 16016: u64 [sp + 0x58] = a0\n 16019: a1 = 0x20\n 16022: ra = 194, jump @0\n      : @269 [@dyn 97] (gas: 48)\n 16028: u8 [a0 + 31] = 0\n 16031: u8 [a0 + 30] = 0\n 16034: u8 [a0 + 29] = 0\n 16037: u8 [a0 + 28] = 0\n 16040: u8 [a0 + 27] = 0\n 16043: u8 [a0 + 26] = 0\n 16046: u8 [a0 + 25] = 0\n 16049: u8 [a0 + 24] = 0\n 16052: u8 [a0 + 23] = 0\n 16055: u8 [a0 + 22] = 0\n 16058: u8 [a0 + 21] = 0\n 16061: u8 [a0 + 20] = 0\n 16064: u8 [a0 + 19] = 0\n 16067: u8 [a0 + 18] = 0\n 16070: u8 [a0 + 17] = 0\n 16073: u8 [a0 + 16] = 0\n 16076: u8 [a0 + 15] = 0\n 16079: u8 [a0 + 14] = 0\n 16082: u8 [a0 + 13] = 0\n 16085: u8 [a0 + 12] = 0\n 16088: u8 [a0 + 11] = 0\n 16091: u8 [a0 + 10] = 0\n 16094: u8 [a0 + 9] = 0\n 16097: u8 [a0 + 8] = 0\n 16100: u8 [a0 + 7] = 0\n 16103: u8 [a0 + 6] = 0\n 16106: u8 [a0 + 5] = 0\n 16109: u8 [a0 + 4] = 0\n 16112: u8 [a0 + 3] = 0x45\n 16116: u8 [a0 + 2] = 0xf2\n 16121: u8 [a0 + 1] = 0xa4\n 16126: u8 [a0 + 0] = 0x3f\n 16129: ecalli 6 // 'ref_time_left'\n 16131: a0 = u64 [sp + 0x60]\n 16134: s1 = sp + 0x7ff\n 16138: s1 = s1 + 0x11\n 16141: u64 [s1 + 0x178] = a0\n 16145: a0 = u64 [sp + 0x68]\n 16148: u64 [s1 + 0x170] = a0\n 16152: a0 = u64 [sp + 0x70]\n 16155: u32 [s1 + 0x180] = a0\n 16159: u64 [s1 + 424] = 0\n 16163: u64 [s1 + 416] = 0\n 16167: u64 [s1 + 408] = 0\n 16171: u64 [s1 + 400] = 0\n 16175: a1 = 0x4\n 16178: a0 = u64 [sp + 0x58]\n 16181: ra = 196, jump @0\n      : @270 [@dyn 98] (gas: 4)\n 16187: u64 [sp + 0x30] = a0\n 16190: a1 = 0x20\n 16193: a0 = u64 [sp + 0x58]\n 16196: ra = 198, jump @0\n      : @271 [@dyn 99] (gas: 35)\n 16202: u32 [s1 + 432] = 0x20\n 16207: u64 [s1 + 488] = 0\n 16211: u64 [s1 + 480] = 0\n 16215: u64 [s1 + 472] = 0\n 16219: u64 [s1 + 464] = 0\n 16223: a1 = sp + 0x7ff\n 16227: a1 = a1 + 0x181\n 16231: a1 = a1 << 0x20\n 16234: a1 = a1 >> 0x20\n 16237: s1 = u64 [sp + 0x90]\n 16241: s1 = s1 | a1\n 16244: a1 = sp + 0x7ff\n 16248: a1 = a1 + 0x1a1\n 16252: a1 = a1 << 0x20\n 16255: a1 = a1 >> 0x20\n 16258: a2 = sp + 0x7ff\n 16262: a2 = a2 + 0x1e1\n 16266: a2 = a2 << 0x20\n 16269: a3 = a2 | a1\n 16272: a1 = u64 [sp + 0x30]\n 16275: a1 = a1 << 0x20\n 16278: a1 = a1 >> 0x20\n 16281: a4 = u64 [sp + 0x98]\n 16285: a4 = a4 | a1\n 16288: a0 = a0 << 0x20\n 16291: a0 = a0 >> 0x20\n 16294: a1 = sp + 0x7ff\n 16298: a1 = a1 + 0x1c1\n 16302: a1 = a1 << 0x20\n 16305: a5 = a1 | a0\n 16308: a1 = 0xffffffffffffffff\n 16311: a2 = 0xffffffffffffffff\n 16314: a0 = s1\n 16316: ecalli 0 // 'call'\n 16317: fallthrough\n      : @272 (gas: 1)\n 16318: jump @274 if a0 == 0\n      : @273 (gas: 1)\n 16321: jump @362\n      : @274 (gas: 2)\n 16324: ecalli 8 // 'return_data_size'\n 16326: fallthrough\n      : @275 (gas: 2)\n 16327: a1 = 0x20\n 16330: jump @277 if a0 >=u a1\n      : @276 (gas: 3)\n 16333: ecalli 8 // 'return_data_size'\n 16335: a1 = a0\n 16337: fallthrough\n      : @277 (gas: 27)\n 16338: a3 = u64 [sp + 0x28]\n 16341: a0 = a1 + 0x1f\n 16344: u64 [sp + 0x28] = a1\n 16347: a1 = a0 <u a1\n 16350: u64 [sp + 48] = 0\n 16353: a1 = a1 & 0x1\n 16356: a0 = a0 & 0xffffffffffffffe0\n 16359: a3 = a3 + a0\n 16362: u64 [sp + 0x20] = a3\n 16365: a0 = a3 <u a0\n 16368: s1 = u64 [sp + 0x38]\n 16371: s1 = s1 + a1\n 16374: s1 = s1 + a0\n 16377: a2 = s1 ^ a1\n 16380: a1 = s1 <u a1\n 16383: a1 = a0 if a2 == 0\n 16386: a0 = u64 [sp + 0x48]\n 16389: a2 = a0 + a1\n 16392: a0 = a2 <u a0\n 16395: a1 = u64 [sp + 0x40]\n 16398: a0 = a0 + a1\n 16401: u64 [sp + 0x48] = a2\n 16404: u64 [sp + 0x40] = a0\n 16407: a0 = a0 | a2\n 16410: a1 = s1 <u 0x1\n 16413: a1 = 0 if a0 != 0\n 16415: jump @279 if a1 != 0\n      : @278 (gas: 1)\n 16418: jump @419\n      : @279 (gas: 3)\n 16421: a0 = 0x40\n 16424: a1 = 0x20\n 16427: ra = 200, jump @0\n      : @280 [@dyn 100] (gas: 79)\n 16433: a1 = u64 [sp + 0x40]\n 16436: a1 = reverse a1\n 16438: a2 = u64 [sp + 0x48]\n 16441: a2 = reverse a2\n 16443: a3 = reverse s1\n 16445: a4 = u64 [sp + 0x20]\n 16448: a4 = reverse a4\n 16450: u8 [a0 + 0x18] = a4\n 16453: a5 = a4 >> 0x38\n 16456: u8 [a0 + 0x1f] = a5\n 16459: a5 = a4 >> 0x30\n 16462: u8 [a0 + 0x1e] = a5\n 16465: a5 = a4 >> 0x28\n 16468: u8 [a0 + 0x1d] = a5\n 16471: a5 = a4 >> 0x20\n 16474: u8 [a0 + 0x1c] = a5\n 16477: a5 = a4 >> 0x18\n 16480: u8 [a0 + 0x1b] = a5\n 16483: a5 = a4 >> 0x10\n 16486: u8 [a0 + 0x1a] = a5\n 16489: a4 = a4 >> 0x8\n 16492: u8 [a0 + 0x19] = a4\n 16495: u8 [a0 + 0x10] = a3\n 16498: a4 = a3 >> 0x38\n 16501: u8 [a0 + 0x17] = a4\n 16504: a4 = a3 >> 0x30\n 16507: u8 [a0 + 0x16] = a4\n 16510: a4 = a3 >> 0x28\n 16513: u8 [a0 + 0x15] = a4\n 16516: a4 = a3 >> 0x20\n 16519: u8 [a0 + 0x14] = a4\n 16522: a4 = a3 >> 0x18\n 16525: u8 [a0 + 0x13] = a4\n 16528: a4 = a3 >> 0x10\n 16531: u8 [a0 + 0x12] = a4\n 16534: a3 = a3 >> 0x8\n 16537: u8 [a0 + 0x11] = a3\n 16540: u8 [a0 + 0x8] = a2\n 16543: a3 = a2 >> 0x38\n 16546: u8 [a0 + 0xf] = a3\n 16549: a3 = a2 >> 0x30\n 16552: u8 [a0 + 0xe] = a3\n 16555: a3 = a2 >> 0x28\n 16558: u8 [a0 + 0xd] = a3\n 16561: a3 = a2 >> 0x20\n 16564: u8 [a0 + 0xc] = a3\n 16567: a3 = a2 >> 0x18\n 16570: u8 [a0 + 0xb] = a3\n 16573: a3 = a2 >> 0x10\n 16576: u8 [a0 + 0xa] = a3\n 16579: a2 = a2 >> 0x8\n 16582: u8 [a0 + 0x9] = a2\n 16585: u8 [a0] = a1\n 16587: a2 = a1 >> 0x38\n 16590: u8 [a0 + 0x7] = a2\n 16593: a2 = a1 >> 0x30\n 16596: u8 [a0 + 0x6] = a2\n 16599: a2 = a1 >> 0x28\n 16602: u8 [a0 + 0x5] = a2\n 16605: a2 = a1 >> 0x20\n 16608: u8 [a0 + 0x4] = a2\n 16611: a2 = a1 >> 0x18\n 16614: u8 [a0 + 0x3] = a2\n 16617: a2 = a1 >> 0x10\n 16620: u8 [a0 + 0x2] = a2\n 16623: a1 = a1 >> 0x8\n 16626: a5 = u64 [sp + 0x30]\n 16629: a2 = a5 >u 0\n 16631: a3 = u64 [sp + 0x28]\n 16634: a3 = a3 <u 0x20\n 16637: a3 = a3 ^ 0x1\n 16640: a3 = a2 if a5 != 0\n 16643: a2 = a5 >u 0\n 16645: a4 = a5 >u 0\n 16647: a4 = a2 if a5 == 0\n 16650: a2 = a5 | a5\n 16653: a4 = a3 if a2 == 0\n 16656: u8 [a0 + 0x1] = a1\n 16659: jump @282 if a4 != 0\n      : @281 (gas: 1)\n 16662: jump @402\n      : @282 (gas: 3)\n 16665: a1 = 0x20\n 16668: a0 = u64 [sp + 0x58]\n 16671: ra = 202, jump @0\n      : @283 [@dyn 101] (gas: 96)\n 16677: a1 = u8 [a0 + 0x9]\n 16680: a2 = u8 [a0 + 0x8]\n 16683: a3 = u8 [a0 + 0xa]\n 16686: a4 = u8 [a0 + 0xb]\n 16689: a1 = a1 << 0x8\n 16692: a1 = a1 | a2\n 16695: a3 = a3 << 0x10\n 16698: a4 = a4 << 0x18\n 16701: a3 = a3 | a4\n 16704: a1 = a1 | a3\n 16707: a2 = u8 [a0 + 0xd]\n 16710: a3 = u8 [a0 + 0xc]\n 16713: a4 = u8 [a0 + 0xe]\n 16716: a5 = u8 [a0 + 0xf]\n 16719: a2 = a2 << 0x8\n 16722: a2 = a2 | a3\n 16725: a4 = a4 << 0x10\n 16728: a5 = a5 << 0x18\n 16731: a4 = a4 | a5\n 16734: a2 = a2 | a4\n 16737: a2 = a2 << 0x20\n 16740: t0 = a2 | a1\n 16743: a2 = u8 [a0 + 0x19]\n 16746: a3 = u8 [a0 + 0x18]\n 16749: a4 = u8 [a0 + 0x1a]\n 16752: a5 = u8 [a0 + 0x1b]\n 16755: a2 = a2 << 0x8\n 16758: a2 = a2 | a3\n 16761: a4 = a4 << 0x10\n 16764: a5 = a5 << 0x18\n 16767: a4 = a4 | a5\n 16770: a2 = a2 | a4\n 16773: a3 = u8 [a0 + 0x1d]\n 16776: a4 = u8 [a0 + 0x1c]\n 16779: a5 = u8 [a0 + 0x1e]\n 16782: s1 = u8 [a0 + 0x1f]\n 16785: a3 = a3 << 0x8\n 16788: a3 = a3 | a4\n 16791: a5 = a5 << 0x10\n 16794: s1 = s1 << 0x18\n 16797: a5 = a5 | s1\n 16800: a3 = a3 | a5\n 16803: a3 = a3 << 0x20\n 16806: t1 = a3 | a2\n 16809: a3 = u8 [a0 + 0x11]\n 16812: a4 = u8 [a0 + 0x10]\n 16815: a5 = u8 [a0 + 0x12]\n 16818: s1 = u8 [a0 + 0x13]\n 16821: a3 = a3 << 0x8\n 16824: a3 = a3 | a4\n 16827: a5 = a5 << 0x10\n 16830: s1 = s1 << 0x18\n 16833: a5 = a5 | s1\n 16836: a3 = a3 | a5\n 16839: a4 = u8 [a0 + 0x1]\n 16842: a5 = u8 [a0]\n 16844: s1 = u8 [a0 + 0x2]\n 16847: a1 = u8 [a0 + 0x3]\n 16850: a4 = a4 << 0x8\n 16853: a4 = a4 | a5\n 16856: s1 = s1 << 0x10\n 16859: a1 = a1 << 0x18\n 16862: a1 = a1 | s1\n 16865: a4 = a4 | a1\n 16868: a1 = u8 [a0 + 0x15]\n 16871: a5 = u8 [a0 + 0x14]\n 16874: s1 = u8 [a0 + 0x16]\n 16877: a2 = u8 [a0 + 0x17]\n 16880: a1 = a1 << 0x8\n 16883: a1 = a1 | a5\n 16886: s1 = s1 << 0x10\n 16889: a2 = a2 << 0x18\n 16892: a2 = a2 | s1\n 16895: a1 = a1 | a2\n 16898: a2 = u8 [a0 + 0x5]\n 16901: a5 = u8 [a0 + 0x4]\n 16904: s1 = u8 [a0 + 0x6]\n 16907: a0 = u8 [a0 + 0x7]\n 16910: a2 = a2 << 0x8\n 16913: a2 = a2 | a5\n 16916: s1 = s1 << 0x10\n 16919: a0 = a0 << 0x18\n 16922: a0 = a0 | s1\n 16925: a0 = a0 | a2\n 16928: a2 = 0x100000000000000\n 16938: a2 = t1 ^ a2\n 16941: a2 = t0 | a2\n 16944: a0 = a0 | a1\n 16947: a0 = a0 << 0x20\n 16950: a3 = a3 | a4\n 16953: a0 = a0 | a3\n 16956: a0 = a0 | a2\n 16959: u64 [sp + 0x58] = a0\n 16962: a0 = 0x40\n 16965: a1 = 0x20\n 16968: ra = 204, jump @0\n      : @284 [@dyn 102] (gas: 98)\n 16974: a1 = u8 [a0 + 0x19]\n 16977: a2 = u8 [a0 + 0x18]\n 16980: a3 = u8 [a0 + 0x1a]\n 16983: a4 = u8 [a0 + 0x1b]\n 16986: a1 = a1 << 0x8\n 16989: a1 = a1 | a2\n 16992: a3 = a3 << 0x10\n 16995: a4 = a4 << 0x18\n 16998: a3 = a3 | a4\n 17001: a1 = a1 | a3\n 17004: a2 = u8 [a0 + 0x1d]\n 17007: a3 = u8 [a0 + 0x1c]\n 17010: a4 = u8 [a0 + 0x1e]\n 17013: a5 = u8 [a0 + 0x1f]\n 17016: a2 = a2 << 0x8\n 17019: a2 = a2 | a3\n 17022: a4 = a4 << 0x10\n 17025: a5 = a5 << 0x18\n 17028: a4 = a4 | a5\n 17031: a2 = a2 | a4\n 17034: a2 = a2 << 0x20\n 17037: t0 = a2 | a1\n 17040: a2 = u8 [a0 + 0x11]\n 17043: a3 = u8 [a0 + 0x10]\n 17046: a4 = u8 [a0 + 0x12]\n 17049: a5 = u8 [a0 + 0x13]\n 17052: a2 = a2 << 0x8\n 17055: a2 = a2 | a3\n 17058: a4 = a4 << 0x10\n 17061: a5 = a5 << 0x18\n 17064: a4 = a4 | a5\n 17067: a2 = a2 | a4\n 17070: a3 = u8 [a0 + 0x15]\n 17073: a4 = u8 [a0 + 0x14]\n 17076: a5 = u8 [a0 + 0x16]\n 17079: s1 = u8 [a0 + 0x17]\n 17082: a3 = a3 << 0x8\n 17085: a3 = a3 | a4\n 17088: a5 = a5 << 0x10\n 17091: s1 = s1 << 0x18\n 17094: a5 = a5 | s1\n 17097: a3 = a3 | a5\n 17100: a3 = a3 << 0x20\n 17103: a2 = a2 | a3\n 17106: a3 = u8 [a0 + 0x9]\n 17109: a4 = u8 [a0 + 0x8]\n 17112: a5 = u8 [a0 + 0xa]\n 17115: s1 = u8 [a0 + 0xb]\n 17118: a3 = a3 << 0x8\n 17121: a3 = a3 | a4\n 17124: a5 = a5 << 0x10\n 17127: s1 = s1 << 0x18\n 17130: a5 = a5 | s1\n 17133: a3 = a3 | a5\n 17136: a4 = u8 [a0 + 0xd]\n 17139: a5 = u8 [a0 + 0xc]\n 17142: s1 = u8 [a0 + 0xe]\n 17145: a1 = u8 [a0 + 0xf]\n 17148: a4 = a4 << 0x8\n 17151: a4 = a4 | a5\n 17154: s1 = s1 << 0x10\n 17157: a1 = a1 << 0x18\n 17160: a1 = a1 | s1\n 17163: a1 = a1 | a4\n 17166: a1 = a1 << 0x20\n 17169: a3 = a3 | a1\n 17172: a1 = u8 [a0 + 0x1]\n 17175: a4 = u8 [a0]\n 17177: a5 = u8 [a0 + 0x2]\n 17180: s1 = u8 [a0 + 0x3]\n 17183: a1 = a1 << 0x8\n 17186: a1 = a1 | a4\n 17189: a5 = a5 << 0x10\n 17192: s1 = s1 << 0x18\n 17195: a5 = a5 | s1\n 17198: a1 = a1 | a5\n 17201: a4 = u8 [a0 + 0x5]\n 17204: a5 = u8 [a0 + 0x4]\n 17207: s1 = u8 [a0 + 0x6]\n 17210: a0 = u8 [a0 + 0x7]\n 17213: a4 = a4 << 0x8\n 17216: a4 = a4 | a5\n 17219: s1 = s1 << 0x10\n 17222: a0 = a0 << 0x18\n 17225: a0 = a0 | s1\n 17228: a0 = a0 | a4\n 17231: a0 = a0 << 0x20\n 17234: a0 = a0 | a1\n 17237: a1 = reverse a0\n 17239: a3 = reverse a3\n 17241: a2 = reverse a2\n 17243: a4 = reverse t0\n 17245: a0 = u64 [sp + 0x58]\n 17248: u64 [sp + 0x48] = a1\n 17251: u64 [sp + 0x40] = a3\n 17254: u64 [sp + 0x38] = a2\n 17257: u64 [sp + 0x30] = a4\n 17260: jump @286 if a0 == 0\n      : @285 (gas: 1)\n 17263: jump @380\n      : @286 (gas: 8)\n 17266: a0 = a4 | a3\n 17269: a1 = a1 | a2\n 17272: a0 = a0 | a1\n 17275: a0 = a0 >> 0x20\n 17278: a1 = a1 | a3\n 17281: a1 = a1 << 0x20\n 17284: a0 = a0 | a1\n 17287: jump @288 if a0 == 0\n      : @287 (gas: 1)\n 17290: jump @401\n      : @288 (gas: 4)\n 17293: i32 a0 = a4 + 0\n 17295: u64 [sp + 0x58] = a0\n 17298: a1 = 0x20\n 17301: ra = 206, jump @0\n      : @289 [@dyn 103] (gas: 48)\n 17307: u8 [a0 + 31] = 0\n 17310: u8 [a0 + 30] = 0\n 17313: u8 [a0 + 29] = 0\n 17316: u8 [a0 + 28] = 0\n 17319: u8 [a0 + 27] = 0\n 17322: u8 [a0 + 26] = 0\n 17325: u8 [a0 + 25] = 0\n 17328: u8 [a0 + 24] = 0\n 17331: u8 [a0 + 23] = 0\n 17334: u8 [a0 + 22] = 0\n 17337: u8 [a0 + 21] = 0\n 17340: u8 [a0 + 20] = 0\n 17343: u8 [a0 + 19] = 0\n 17346: u8 [a0 + 18] = 0\n 17349: u8 [a0 + 17] = 0\n 17352: u8 [a0 + 16] = 0\n 17355: u8 [a0 + 15] = 0\n 17358: u8 [a0 + 14] = 0\n 17361: u8 [a0 + 13] = 0\n 17364: u8 [a0 + 12] = 0\n 17367: u8 [a0 + 11] = 0\n 17370: u8 [a0 + 10] = 0\n 17373: u8 [a0 + 9] = 0\n 17376: u8 [a0 + 8] = 0\n 17379: u8 [a0 + 7] = 0\n 17382: u8 [a0 + 6] = 0\n 17385: u8 [a0 + 5] = 0\n 17388: u8 [a0 + 4] = 0\n 17391: u8 [a0 + 3] = 0x45\n 17395: u8 [a0 + 2] = 0xf2\n 17400: u8 [a0 + 1] = 0xa4\n 17405: u8 [a0 + 0] = 0x3f\n 17408: ecalli 6 // 'ref_time_left'\n 17410: a0 = u64 [sp + 0x78]\n 17413: s1 = sp + 0x7ff\n 17417: s1 = s1 + 0x11\n 17420: u64 [s1 + 0x1f8] = a0\n 17424: a0 = u64 [sp + 0x80]\n 17428: u64 [s1 + 0x1f0] = a0\n 17432: a0 = u64 [sp + 0x88]\n 17436: u32 [s1 + 0x200] = a0\n 17440: u64 [s1 + 552] = 0\n 17444: u64 [s1 + 544] = 0\n 17448: u64 [s1 + 536] = 0\n 17452: u64 [s1 + 528] = 0\n 17456: a1 = 0x4\n 17459: a0 = u64 [sp + 0x58]\n 17462: ra = 208, jump @0\n      : @290 [@dyn 104] (gas: 4)\n 17468: u64 [sp + 0x28] = a0\n 17471: a1 = 0x20\n 17474: a0 = u64 [sp + 0x58]\n 17477: ra = 210, jump @0\n      : @291 [@dyn 105] (gas: 35)\n 17483: u32 [s1 + 560] = 0x20\n 17488: u64 [s1 + 616] = 0\n 17492: u64 [s1 + 608] = 0\n 17496: u64 [s1 + 600] = 0\n 17500: u64 [s1 + 592] = 0\n 17504: a1 = sp + 0x7ff\n 17508: a1 = a1 + 0x201\n 17512: a1 = a1 << 0x20\n 17515: a1 = a1 >> 0x20\n 17518: s1 = u64 [sp + 0x90]\n 17522: s1 = s1 | a1\n 17525: a1 = sp + 0x7ff\n 17529: a1 = a1 + 0x221\n 17533: a1 = a1 << 0x20\n 17536: a1 = a1 >> 0x20\n 17539: a2 = sp + 0x7ff\n 17543: a2 = a2 + 0x261\n 17547: a2 = a2 << 0x20\n 17550: a3 = a2 | a1\n 17553: a1 = u64 [sp + 0x28]\n 17556: a1 = a1 << 0x20\n 17559: a1 = a1 >> 0x20\n 17562: a4 = u64 [sp + 0x98]\n 17566: a4 = a4 | a1\n 17569: a0 = a0 << 0x20\n 17572: a0 = a0 >> 0x20\n 17575: a1 = sp + 0x7ff\n 17579: a1 = a1 + 0x241\n 17583: a1 = a1 << 0x20\n 17586: a5 = a1 | a0\n 17589: a1 = 0xffffffffffffffff\n 17592: a2 = 0xffffffffffffffff\n 17595: a0 = s1\n 17597: ecalli 0 // 'call'\n 17598: fallthrough\n      : @292 (gas: 1)\n 17599: jump @294 if a0 == 0\n      : @293 (gas: 1)\n 17602: jump @362\n      : @294 (gas: 2)\n 17605: ecalli 8 // 'return_data_size'\n 17607: fallthrough\n      : @295 (gas: 2)\n 17608: a1 = 0x20\n 17611: jump @297 if a0 >=u a1\n      : @296 (gas: 3)\n 17614: ecalli 8 // 'return_data_size'\n 17616: a1 = a0\n 17618: fallthrough\n      : @297 (gas: 27)\n 17619: a3 = u64 [sp + 0x48]\n 17622: a4 = u64 [sp + 0x40]\n 17625: s1 = u64 [sp + 0x38]\n 17628: a0 = a1 + 0x1f\n 17631: u64 [sp + 0x20] = a1\n 17634: a1 = a0 <u a1\n 17637: u64 [sp + 40] = 0\n 17640: a1 = a1 & 0x1\n 17643: a0 = a0 & 0xffffffffffffffe0\n 17646: a2 = u64 [sp + 0x30]\n 17649: a2 = a2 + a0\n 17652: u64 [sp + 0x30] = a2\n 17655: a0 = a2 <u a0\n 17658: s1 = s1 + a1\n 17661: s1 = s1 + a0\n 17664: a2 = s1 ^ a1\n 17667: a1 = s1 <u a1\n 17670: a1 = a0 if a2 == 0\n 17673: a1 = a1 + a4\n 17676: a0 = a1 <u a4\n 17679: a0 = a0 + a3\n 17682: u64 [sp + 0x48] = a1\n 17685: u64 [sp + 0x40] = a0\n 17688: a0 = a0 | a1\n 17691: a1 = s1 <u 0x1\n 17694: a1 = 0 if a0 != 0\n 17696: jump @299 if a1 != 0\n      : @298 (gas: 1)\n 17699: jump @421\n      : @299 (gas: 3)\n 17702: a0 = 0x40\n 17705: a1 = 0x20\n 17708: ra = 212, jump @0\n      : @300 [@dyn 106] (gas: 79)\n 17714: a1 = u64 [sp + 0x40]\n 17717: a1 = reverse a1\n 17719: a2 = u64 [sp + 0x48]\n 17722: a2 = reverse a2\n 17724: a3 = reverse s1\n 17726: a4 = u64 [sp + 0x30]\n 17729: a4 = reverse a4\n 17731: u8 [a0 + 0x18] = a4\n 17734: a5 = a4 >> 0x38\n 17737: u8 [a0 + 0x1f] = a5\n 17740: a5 = a4 >> 0x30\n 17743: u8 [a0 + 0x1e] = a5\n 17746: a5 = a4 >> 0x28\n 17749: u8 [a0 + 0x1d] = a5\n 17752: a5 = a4 >> 0x20\n 17755: u8 [a0 + 0x1c] = a5\n 17758: a5 = a4 >> 0x18\n 17761: u8 [a0 + 0x1b] = a5\n 17764: a5 = a4 >> 0x10\n 17767: u8 [a0 + 0x1a] = a5\n 17770: a4 = a4 >> 0x8\n 17773: u8 [a0 + 0x19] = a4\n 17776: u8 [a0 + 0x10] = a3\n 17779: a4 = a3 >> 0x38\n 17782: u8 [a0 + 0x17] = a4\n 17785: a4 = a3 >> 0x30\n 17788: u8 [a0 + 0x16] = a4\n 17791: a4 = a3 >> 0x28\n 17794: u8 [a0 + 0x15] = a4\n 17797: a4 = a3 >> 0x20\n 17800: u8 [a0 + 0x14] = a4\n 17803: a4 = a3 >> 0x18\n 17806: u8 [a0 + 0x13] = a4\n 17809: a4 = a3 >> 0x10\n 17812: u8 [a0 + 0x12] = a4\n 17815: a3 = a3 >> 0x8\n 17818: u8 [a0 + 0x11] = a3\n 17821: u8 [a0 + 0x8] = a2\n 17824: a3 = a2 >> 0x38\n 17827: u8 [a0 + 0xf] = a3\n 17830: a3 = a2 >> 0x30\n 17833: u8 [a0 + 0xe] = a3\n 17836: a3 = a2 >> 0x28\n 17839: u8 [a0 + 0xd] = a3\n 17842: a3 = a2 >> 0x20\n 17845: u8 [a0 + 0xc] = a3\n 17848: a3 = a2 >> 0x18\n 17851: u8 [a0 + 0xb] = a3\n 17854: a3 = a2 >> 0x10\n 17857: u8 [a0 + 0xa] = a3\n 17860: a2 = a2 >> 0x8\n 17863: u8 [a0 + 0x9] = a2\n 17866: u8 [a0] = a1\n 17868: a2 = a1 >> 0x38\n 17871: u8 [a0 + 0x7] = a2\n 17874: a2 = a1 >> 0x30\n 17877: u8 [a0 + 0x6] = a2\n 17880: a2 = a1 >> 0x28\n 17883: u8 [a0 + 0x5] = a2\n 17886: a2 = a1 >> 0x20\n 17889: u8 [a0 + 0x4] = a2\n 17892: a2 = a1 >> 0x18\n 17895: u8 [a0 + 0x3] = a2\n 17898: a2 = a1 >> 0x10\n 17901: u8 [a0 + 0x2] = a2\n 17904: a1 = a1 >> 0x8\n 17907: a5 = u64 [sp + 0x28]\n 17910: a2 = a5 >u 0\n 17912: a3 = u64 [sp + 0x20]\n 17915: a3 = a3 <u 0x20\n 17918: a3 = a3 ^ 0x1\n 17921: a3 = a2 if a5 != 0\n 17924: a2 = a5 >u 0\n 17926: a4 = a5 >u 0\n 17928: a4 = a2 if a5 == 0\n 17931: a2 = a5 | a5\n 17934: a4 = a3 if a2 == 0\n 17937: u8 [a0 + 0x1] = a1\n 17940: jump @302 if a4 != 0\n      : @301 (gas: 1)\n 17943: jump @402\n      : @302 (gas: 3)\n 17946: a1 = 0x20\n 17949: a0 = u64 [sp + 0x58]\n 17952: ra = 214, jump @0\n      : @303 [@dyn 107] (gas: 96)\n 17958: a1 = u8 [a0 + 0x9]\n 17961: a2 = u8 [a0 + 0x8]\n 17964: a3 = u8 [a0 + 0xa]\n 17967: a4 = u8 [a0 + 0xb]\n 17970: a1 = a1 << 0x8\n 17973: a1 = a1 | a2\n 17976: a3 = a3 << 0x10\n 17979: a4 = a4 << 0x18\n 17982: a3 = a3 | a4\n 17985: a1 = a1 | a3\n 17988: a2 = u8 [a0 + 0xd]\n 17991: a3 = u8 [a0 + 0xc]\n 17994: a4 = u8 [a0 + 0xe]\n 17997: a5 = u8 [a0 + 0xf]\n 18000: a2 = a2 << 0x8\n 18003: a2 = a2 | a3\n 18006: a4 = a4 << 0x10\n 18009: a5 = a5 << 0x18\n 18012: a4 = a4 | a5\n 18015: a2 = a2 | a4\n 18018: a2 = a2 << 0x20\n 18021: t0 = a2 | a1\n 18024: a2 = u8 [a0 + 0x19]\n 18027: a3 = u8 [a0 + 0x18]\n 18030: a4 = u8 [a0 + 0x1a]\n 18033: a5 = u8 [a0 + 0x1b]\n 18036: a2 = a2 << 0x8\n 18039: a2 = a2 | a3\n 18042: a4 = a4 << 0x10\n 18045: a5 = a5 << 0x18\n 18048: a4 = a4 | a5\n 18051: a2 = a2 | a4\n 18054: a3 = u8 [a0 + 0x1d]\n 18057: a4 = u8 [a0 + 0x1c]\n 18060: a5 = u8 [a0 + 0x1e]\n 18063: s1 = u8 [a0 + 0x1f]\n 18066: a3 = a3 << 0x8\n 18069: a3 = a3 | a4\n 18072: a5 = a5 << 0x10\n 18075: s1 = s1 << 0x18\n 18078: a5 = a5 | s1\n 18081: a3 = a3 | a5\n 18084: a3 = a3 << 0x20\n 18087: t1 = a3 | a2\n 18090: a3 = u8 [a0 + 0x11]\n 18093: a4 = u8 [a0 + 0x10]\n 18096: a5 = u8 [a0 + 0x12]\n 18099: s1 = u8 [a0 + 0x13]\n 18102: a3 = a3 << 0x8\n 18105: a3 = a3 | a4\n 18108: a5 = a5 << 0x10\n 18111: s1 = s1 << 0x18\n 18114: a5 = a5 | s1\n 18117: a3 = a3 | a5\n 18120: a4 = u8 [a0 + 0x1]\n 18123: a5 = u8 [a0]\n 18125: s1 = u8 [a0 + 0x2]\n 18128: a1 = u8 [a0 + 0x3]\n 18131: a4 = a4 << 0x8\n 18134: a4 = a4 | a5\n 18137: s1 = s1 << 0x10\n 18140: a1 = a1 << 0x18\n 18143: a1 = a1 | s1\n 18146: a4 = a4 | a1\n 18149: a1 = u8 [a0 + 0x15]\n 18152: a5 = u8 [a0 + 0x14]\n 18155: s1 = u8 [a0 + 0x16]\n 18158: a2 = u8 [a0 + 0x17]\n 18161: a1 = a1 << 0x8\n 18164: a1 = a1 | a5\n 18167: s1 = s1 << 0x10\n 18170: a2 = a2 << 0x18\n 18173: a2 = a2 | s1\n 18176: a1 = a1 | a2\n 18179: a2 = u8 [a0 + 0x5]\n 18182: a5 = u8 [a0 + 0x4]\n 18185: s1 = u8 [a0 + 0x6]\n 18188: a0 = u8 [a0 + 0x7]\n 18191: a2 = a2 << 0x8\n 18194: a2 = a2 | a5\n 18197: s1 = s1 << 0x10\n 18200: a0 = a0 << 0x18\n 18203: a0 = a0 | s1\n 18206: a0 = a0 | a2\n 18209: a2 = 0x100000000000000\n 18219: a2 = t1 ^ a2\n 18222: a2 = t0 | a2\n 18225: a0 = a0 | a1\n 18228: a0 = a0 << 0x20\n 18231: a3 = a3 | a4\n 18234: a0 = a0 | a3\n 18237: a0 = a0 | a2\n 18240: u64 [sp + 0x58] = a0\n 18243: a0 = 0x40\n 18246: a1 = 0x20\n 18249: ra = 216, jump @0\n      : @304 [@dyn 108] (gas: 105)\n 18255: a1 = u8 [a0 + 0x19]\n 18258: a2 = u8 [a0 + 0x18]\n 18261: a3 = u8 [a0 + 0x1a]\n 18264: a4 = u8 [a0 + 0x1b]\n 18267: a1 = a1 << 0x8\n 18270: a1 = a1 | a2\n 18273: a3 = a3 << 0x10\n 18276: a4 = a4 << 0x18\n 18279: a3 = a3 | a4\n 18282: a1 = a1 | a3\n 18285: a2 = u8 [a0 + 0x1d]\n 18288: a3 = u8 [a0 + 0x1c]\n 18291: a4 = u8 [a0 + 0x1e]\n 18294: a5 = u8 [a0 + 0x1f]\n 18297: a2 = a2 << 0x8\n 18300: a2 = a2 | a3\n 18303: a4 = a4 << 0x10\n 18306: a5 = a5 << 0x18\n 18309: a4 = a4 | a5\n 18312: a2 = a2 | a4\n 18315: a2 = a2 << 0x20\n 18318: t0 = a2 | a1\n 18321: a2 = u8 [a0 + 0x11]\n 18324: a3 = u8 [a0 + 0x10]\n 18327: a4 = u8 [a0 + 0x12]\n 18330: a5 = u8 [a0 + 0x13]\n 18333: a2 = a2 << 0x8\n 18336: a2 = a2 | a3\n 18339: a4 = a4 << 0x10\n 18342: a5 = a5 << 0x18\n 18345: a4 = a4 | a5\n 18348: a2 = a2 | a4\n 18351: a3 = u8 [a0 + 0x15]\n 18354: a4 = u8 [a0 + 0x14]\n 18357: a5 = u8 [a0 + 0x16]\n 18360: s1 = u8 [a0 + 0x17]\n 18363: a3 = a3 << 0x8\n 18366: a3 = a3 | a4\n 18369: a5 = a5 << 0x10\n 18372: s1 = s1 << 0x18\n 18375: a5 = a5 | s1\n 18378: a3 = a3 | a5\n 18381: a3 = a3 << 0x20\n 18384: a2 = a2 | a3\n 18387: a3 = u8 [a0 + 0x9]\n 18390: a4 = u8 [a0 + 0x8]\n 18393: a5 = u8 [a0 + 0xa]\n 18396: s1 = u8 [a0 + 0xb]\n 18399: a3 = a3 << 0x8\n 18402: a3 = a3 | a4\n 18405: a5 = a5 << 0x10\n 18408: s1 = s1 << 0x18\n 18411: a5 = a5 | s1\n 18414: a3 = a3 | a5\n 18417: a4 = u8 [a0 + 0xd]\n 18420: a5 = u8 [a0 + 0xc]\n 18423: s1 = u8 [a0 + 0xe]\n 18426: a1 = u8 [a0 + 0xf]\n 18429: a4 = a4 << 0x8\n 18432: a4 = a4 | a5\n 18435: s1 = s1 << 0x10\n 18438: a1 = a1 << 0x18\n 18441: a1 = a1 | s1\n 18444: a1 = a1 | a4\n 18447: a1 = a1 << 0x20\n 18450: a3 = a3 | a1\n 18453: a1 = u8 [a0 + 0x1]\n 18456: a4 = u8 [a0]\n 18458: a5 = u8 [a0 + 0x2]\n 18461: s1 = u8 [a0 + 0x3]\n 18464: a1 = a1 << 0x8\n 18467: a1 = a1 | a4\n 18470: a5 = a5 << 0x10\n 18473: s1 = s1 << 0x18\n 18476: a5 = a5 | s1\n 18479: a1 = a1 | a5\n 18482: a4 = u8 [a0 + 0x5]\n 18485: a5 = u8 [a0 + 0x4]\n 18488: s1 = u8 [a0 + 0x6]\n 18491: a0 = u8 [a0 + 0x7]\n 18494: a4 = a4 << 0x8\n 18497: a4 = a4 | a5\n 18500: s1 = s1 << 0x10\n 18503: a0 = a0 << 0x18\n 18506: a0 = a0 | s1\n 18509: a0 = a0 | a4\n 18512: a0 = a0 << 0x20\n 18515: a0 = a0 | a1\n 18518: s1 = reverse a0\n 18520: a3 = reverse a3\n 18522: a0 = reverse a2\n 18524: a2 = reverse t0\n 18526: a1 = a2 | a3\n 18529: u64 [sp + 0x40] = a0\n 18532: a0 = a0 | s1\n 18535: a4 = u64 [sp + 0x58]\n 18538: u64 [sp + 0x30] = s1\n 18541: u64 [sp + 0x48] = a3\n 18544: u64 [sp + 0x38] = a2\n 18547: a1 = a1 | a0\n 18550: a1 = a1 >> 0x20\n 18553: a0 = a0 | a3\n 18556: a0 = a0 << 0x20\n 18559: a0 = a0 | a1\n 18562: jump @306 if a4 == 0\n      : @305 (gas: 1)\n 18565: jump @385\n      : @306 (gas: 1)\n 18568: jump @308 if a0 == 0\n      : @307 (gas: 1)\n 18571: jump @401\n      : @308 (gas: 4)\n 18574: i32 a0 = a2 + 0\n 18576: a1 = 0x20\n 18579: u64 [sp + 0x58] = a0\n 18582: ra = 218, jump @0\n      : @309 [@dyn 109] (gas: 41)\n 18588: u8 [a0 + 3] = 0x77\n 18592: u8 [a0 + 2] = 0x10\n 18596: u8 [a0 + 1] = 0x24\n 18600: u8 [a0 + 0] = 0x55\n 18603: a2 = u64 [sp + 0x48]\n 18606: a2 = a2 | s1\n 18609: a1 = 0xfffffffc\n 18619: a3 = u64 [sp + 0x38]\n 18622: a1 = a3 <u a1\n 18625: a3 = u64 [sp + 0x40]\n 18628: a1 = 0 if a3 != 0\n 18630: a1 = 0 if a2 != 0\n 18632: u8 [a0 + 31] = 0\n 18635: u8 [a0 + 30] = 0\n 18638: u8 [a0 + 29] = 0\n 18641: u8 [a0 + 28] = 0\n 18644: u8 [a0 + 27] = 0\n 18647: u8 [a0 + 26] = 0\n 18650: u8 [a0 + 25] = 0\n 18653: u8 [a0 + 24] = 0\n 18656: u8 [a0 + 23] = 0\n 18659: u8 [a0 + 22] = 0\n 18662: u8 [a0 + 21] = 0\n 18665: u8 [a0 + 20] = 0\n 18668: u8 [a0 + 19] = 0\n 18671: u8 [a0 + 18] = 0\n 18674: u8 [a0 + 17] = 0\n 18677: u8 [a0 + 16] = 0\n 18680: u8 [a0 + 15] = 0\n 18683: u8 [a0 + 14] = 0\n 18686: u8 [a0 + 13] = 0\n 18689: u8 [a0 + 12] = 0\n 18692: u8 [a0 + 11] = 0\n 18695: u8 [a0 + 10] = 0\n 18698: u8 [a0 + 9] = 0\n 18701: u8 [a0 + 8] = 0\n 18704: u8 [a0 + 7] = 0\n 18707: u8 [a0 + 6] = 0\n 18710: u8 [a0 + 5] = 0\n 18713: u8 [a0 + 4] = 0\n 18716: jump @311 if a1 != 0\n      : @310 (gas: 1)\n 18719: jump @401\n      : @311 (gas: 4)\n 18722: a0 = u64 [sp + 0x58]\n 18725: i32 a0 = a0 + 0x4\n 18728: a1 = 0x20\n 18731: ra = 220, jump @0\n      : @312 [@dyn 110] (gas: 48)\n 18737: u8 [a0 + 31] = 0xa\n 18741: u8 [a0 + 30] = 0\n 18744: u8 [a0 + 29] = 0\n 18747: u8 [a0 + 28] = 0\n 18750: u8 [a0 + 27] = 0\n 18753: u8 [a0 + 26] = 0\n 18756: u8 [a0 + 25] = 0\n 18759: u8 [a0 + 24] = 0\n 18762: u8 [a0 + 23] = 0\n 18765: u8 [a0 + 22] = 0\n 18768: u8 [a0 + 21] = 0\n 18771: u8 [a0 + 20] = 0\n 18774: u8 [a0 + 19] = 0\n 18777: u8 [a0 + 18] = 0\n 18780: u8 [a0 + 17] = 0\n 18783: u8 [a0 + 16] = 0\n 18786: u8 [a0 + 15] = 0\n 18789: u8 [a0 + 14] = 0\n 18792: u8 [a0 + 13] = 0\n 18795: u8 [a0 + 12] = 0\n 18798: u8 [a0 + 11] = 0\n 18801: u8 [a0 + 10] = 0\n 18804: u8 [a0 + 9] = 0\n 18807: u8 [a0 + 8] = 0\n 18810: u8 [a0 + 7] = 0\n 18813: u8 [a0 + 6] = 0\n 18816: u8 [a0 + 5] = 0\n 18819: u8 [a0 + 4] = 0\n 18822: u8 [a0 + 3] = 0\n 18825: u8 [a0 + 2] = 0\n 18828: u8 [a0 + 1] = 0\n 18831: u8 [a0 + 0] = 0\n 18833: ecalli 6 // 'ref_time_left'\n 18835: a0 = u64 [sp + 0x60]\n 18838: s1 = sp + 0x7ff\n 18842: s1 = s1 + 0x11\n 18845: u64 [s1 + 0x278] = a0\n 18849: a0 = u64 [sp + 0x68]\n 18852: u64 [s1 + 0x270] = a0\n 18856: a0 = u64 [sp + 0x70]\n 18859: u32 [s1 + 0x280] = a0\n 18863: u64 [s1 + 680] = 0\n 18867: u64 [s1 + 672] = 0\n 18871: u64 [s1 + 664] = 0\n 18875: u64 [s1 + 656] = 0\n 18879: a1 = 0x24\n 18882: a0 = u64 [sp + 0x58]\n 18885: ra = 222, jump @0\n      : @313 [@dyn 111] (gas: 4)\n 18891: u64 [sp + 0x28] = a0\n 18894: a1 = 0x20\n 18897: a0 = u64 [sp + 0x58]\n 18900: ra = 224, jump @0\n      : @314 [@dyn 112] (gas: 35)\n 18906: u32 [s1 + 688] = 0x20\n 18911: u64 [s1 + 744] = 0xffffffffffffffff\n 18916: u64 [s1 + 736] = 0xffffffffffffffff\n 18921: u64 [s1 + 728] = 0xffffffffffffffff\n 18926: u64 [s1 + 720] = 0xffffffffffffffff\n 18931: a1 = sp + 0x7ff\n 18935: a1 = a1 + 0x281\n 18939: a1 = a1 << 0x20\n 18942: a1 = a1 >> 0x20\n 18945: s1 = u64 [sp + 0x50]\n 18948: s1 = s1 | a1\n 18951: a1 = sp + 0x7ff\n 18955: a1 = a1 + 0x2a1\n 18959: a1 = a1 << 0x20\n 18962: a1 = a1 >> 0x20\n 18965: a2 = sp + 0x7ff\n 18969: a2 = a2 + 0x2e1\n 18973: a2 = a2 << 0x20\n 18976: a3 = a2 | a1\n 18979: a1 = u64 [sp + 0x28]\n 18982: a1 = a1 << 0x20\n 18985: a1 = a1 >> 0x20\n 18988: a2 = 0x2400000000\n 18998: a4 = a1 | a2\n 19001: a0 = a0 << 0x20\n 19004: a0 = a0 >> 0x20\n 19007: a1 = sp + 0x7ff\n 19011: a1 = a1 + 0x2c1\n 19015: a1 = a1 << 0x20\n 19018: a5 = a1 | a0\n 19021: a1 = 0xffffffffffffffff\n 19024: a2 = 0xffffffffffffffff\n 19027: a0 = s1\n 19029: ecalli 0 // 'call'\n 19030: fallthrough\n      : @315 (gas: 1)\n 19031: jump @362 if a0 != 0\n      : @316 (gas: 2)\n 19035: ecalli 8 // 'return_data_size'\n 19037: fallthrough\n      : @317 (gas: 2)\n 19038: a1 = 0x20\n 19041: jump @319 if a0 >=u a1\n      : @318 (gas: 3)\n 19044: ecalli 8 // 'return_data_size'\n 19046: a1 = a0\n 19048: fallthrough\n      : @319 (gas: 27)\n 19049: a3 = u64 [sp + 0x48]\n 19052: a0 = a1 + 0x1f\n 19055: u64 [sp + 0x28] = a1\n 19058: a1 = a0 <u a1\n 19061: u64 [sp + 80] = 0\n 19064: a1 = a1 & 0x1\n 19067: a0 = a0 & 0xffffffffffffffe0\n 19070: a2 = u64 [sp + 0x38]\n 19073: a2 = a2 + a0\n 19076: u64 [sp + 0x38] = a2\n 19079: a0 = a2 <u a0\n 19082: s1 = u64 [sp + 0x40]\n 19085: s1 = s1 + a1\n 19088: s1 = s1 + a0\n 19091: a2 = s1 ^ a1\n 19094: a1 = s1 <u a1\n 19097: a1 = a0 if a2 == 0\n 19100: a2 = a3 + a1\n 19103: a0 = a2 <u a3\n 19106: a1 = u64 [sp + 0x30]\n 19109: a0 = a0 + a1\n 19112: u64 [sp + 0x48] = a2\n 19115: u64 [sp + 0x40] = a0\n 19118: a0 = a0 | a2\n 19121: a1 = s1 <u 0x1\n 19124: a1 = 0 if a0 != 0\n 19126: jump @321 if a1 != 0\n      : @320 (gas: 1)\n 19129: jump @423\n      : @321 (gas: 3)\n 19132: a0 = 0x40\n 19135: a1 = 0x20\n 19138: ra = 226, jump @0\n      : @322 [@dyn 113] (gas: 79)\n 19144: a1 = u64 [sp + 0x40]\n 19147: a1 = reverse a1\n 19149: a2 = u64 [sp + 0x48]\n 19152: a2 = reverse a2\n 19154: a3 = reverse s1\n 19156: a4 = u64 [sp + 0x38]\n 19159: a4 = reverse a4\n 19161: u8 [a0 + 0x18] = a4\n 19164: a5 = a4 >> 0x38\n 19167: u8 [a0 + 0x1f] = a5\n 19170: a5 = a4 >> 0x30\n 19173: u8 [a0 + 0x1e] = a5\n 19176: a5 = a4 >> 0x28\n 19179: u8 [a0 + 0x1d] = a5\n 19182: a5 = a4 >> 0x20\n 19185: u8 [a0 + 0x1c] = a5\n 19188: a5 = a4 >> 0x18\n 19191: u8 [a0 + 0x1b] = a5\n 19194: a5 = a4 >> 0x10\n 19197: u8 [a0 + 0x1a] = a5\n 19200: a4 = a4 >> 0x8\n 19203: u8 [a0 + 0x19] = a4\n 19206: u8 [a0 + 0x10] = a3\n 19209: a4 = a3 >> 0x38\n 19212: u8 [a0 + 0x17] = a4\n 19215: a4 = a3 >> 0x30\n 19218: u8 [a0 + 0x16] = a4\n 19221: a4 = a3 >> 0x28\n 19224: u8 [a0 + 0x15] = a4\n 19227: a4 = a3 >> 0x20\n 19230: u8 [a0 + 0x14] = a4\n 19233: a4 = a3 >> 0x18\n 19236: u8 [a0 + 0x13] = a4\n 19239: a4 = a3 >> 0x10\n 19242: u8 [a0 + 0x12] = a4\n 19245: a3 = a3 >> 0x8\n 19248: u8 [a0 + 0x11] = a3\n 19251: u8 [a0 + 0x8] = a2\n 19254: a3 = a2 >> 0x38\n 19257: u8 [a0 + 0xf] = a3\n 19260: a3 = a2 >> 0x30\n 19263: u8 [a0 + 0xe] = a3\n 19266: a3 = a2 >> 0x28\n 19269: u8 [a0 + 0xd] = a3\n 19272: a3 = a2 >> 0x20\n 19275: u8 [a0 + 0xc] = a3\n 19278: a3 = a2 >> 0x18\n 19281: u8 [a0 + 0xb] = a3\n 19284: a3 = a2 >> 0x10\n 19287: u8 [a0 + 0xa] = a3\n 19290: a2 = a2 >> 0x8\n 19293: u8 [a0 + 0x9] = a2\n 19296: u8 [a0] = a1\n 19298: a2 = a1 >> 0x38\n 19301: u8 [a0 + 0x7] = a2\n 19304: a2 = a1 >> 0x30\n 19307: u8 [a0 + 0x6] = a2\n 19310: a2 = a1 >> 0x28\n 19313: u8 [a0 + 0x5] = a2\n 19316: a2 = a1 >> 0x20\n 19319: u8 [a0 + 0x4] = a2\n 19322: a2 = a1 >> 0x18\n 19325: u8 [a0 + 0x3] = a2\n 19328: a2 = a1 >> 0x10\n 19331: u8 [a0 + 0x2] = a2\n 19334: a1 = a1 >> 0x8\n 19337: a5 = u64 [sp + 0x50]\n 19340: a2 = a5 >u 0\n 19342: a3 = u64 [sp + 0x28]\n 19345: a3 = a3 <u 0x20\n 19348: a3 = a3 ^ 0x1\n 19351: a3 = a2 if a5 != 0\n 19354: a2 = a5 >u 0\n 19356: a4 = a5 >u 0\n 19358: a4 = a2 if a5 == 0\n 19361: a2 = a5 | a5\n 19364: a4 = a3 if a2 == 0\n 19367: u8 [a0 + 0x1] = a1\n 19370: jump @324 if a4 != 0\n      : @323 (gas: 1)\n 19373: jump @402\n      : @324 (gas: 3)\n 19376: a1 = 0x20\n 19379: a0 = u64 [sp + 0x58]\n 19382: ra = 228, jump @0\n      : @325 [@dyn 114] (gas: 95)\n 19388: a1 = u8 [a0 + 0x19]\n 19391: a2 = u8 [a0 + 0x18]\n 19394: a3 = u8 [a0 + 0x1a]\n 19397: a4 = u8 [a0 + 0x1b]\n 19400: a1 = a1 << 0x8\n 19403: a1 = a1 | a2\n 19406: a3 = a3 << 0x10\n 19409: a4 = a4 << 0x18\n 19412: a3 = a3 | a4\n 19415: a1 = a1 | a3\n 19418: a2 = u8 [a0 + 0x1d]\n 19421: a3 = u8 [a0 + 0x1c]\n 19424: a4 = u8 [a0 + 0x1e]\n 19427: a5 = u8 [a0 + 0x1f]\n 19430: a2 = a2 << 0x8\n 19433: a2 = a2 | a3\n 19436: a4 = a4 << 0x10\n 19439: a5 = a5 << 0x18\n 19442: a4 = a4 | a5\n 19445: a2 = a2 | a4\n 19448: a2 = a2 << 0x20\n 19451: t0 = a2 | a1\n 19454: a2 = u8 [a0 + 0x11]\n 19457: a3 = u8 [a0 + 0x10]\n 19460: a4 = u8 [a0 + 0x12]\n 19463: a5 = u8 [a0 + 0x13]\n 19466: a2 = a2 << 0x8\n 19469: a2 = a2 | a3\n 19472: a4 = a4 << 0x10\n 19475: a5 = a5 << 0x18\n 19478: a4 = a4 | a5\n 19481: a2 = a2 | a4\n 19484: a3 = u8 [a0 + 0x15]\n 19487: a4 = u8 [a0 + 0x14]\n 19490: a5 = u8 [a0 + 0x16]\n 19493: s1 = u8 [a0 + 0x17]\n 19496: a3 = a3 << 0x8\n 19499: a3 = a3 | a4\n 19502: a5 = a5 << 0x10\n 19505: s1 = s1 << 0x18\n 19508: a5 = a5 | s1\n 19511: a3 = a3 | a5\n 19514: a3 = a3 << 0x20\n 19517: t1 = a3 | a2\n 19520: a3 = u8 [a0 + 0x1]\n 19523: a4 = u8 [a0]\n 19525: a5 = u8 [a0 + 0x2]\n 19528: s1 = u8 [a0 + 0x3]\n 19531: a3 = a3 << 0x8\n 19534: a3 = a3 | a4\n 19537: a5 = a5 << 0x10\n 19540: s1 = s1 << 0x18\n 19543: a5 = a5 | s1\n 19546: a3 = a3 | a5\n 19549: a4 = u8 [a0 + 0x9]\n 19552: a5 = u8 [a0 + 0x8]\n 19555: s1 = u8 [a0 + 0xa]\n 19558: a1 = u8 [a0 + 0xb]\n 19561: a4 = a4 << 0x8\n 19564: a4 = a4 | a5\n 19567: s1 = s1 << 0x10\n 19570: a1 = a1 << 0x18\n 19573: a1 = a1 | s1\n 19576: a4 = a4 | a1\n 19579: a1 = u8 [a0 + 0x5]\n 19582: a5 = u8 [a0 + 0x4]\n 19585: s1 = u8 [a0 + 0x6]\n 19588: a2 = u8 [a0 + 0x7]\n 19591: a1 = a1 << 0x8\n 19594: a1 = a1 | a5\n 19597: s1 = s1 << 0x10\n 19600: a2 = a2 << 0x18\n 19603: a2 = a2 | s1\n 19606: a1 = a1 | a2\n 19609: a2 = u8 [a0 + 0xd]\n 19612: a5 = u8 [a0 + 0xc]\n 19615: s1 = u8 [a0 + 0xe]\n 19618: a0 = u8 [a0 + 0xf]\n 19621: a2 = a2 << 0x8\n 19624: a2 = a2 | a5\n 19627: s1 = s1 << 0x10\n 19630: a0 = a0 << 0x18\n 19633: a0 = a0 | s1\n 19636: a0 = a0 | a2\n 19639: a2 = reverse t1\n 19641: a5 = reverse t0\n 19643: a5 = a5 <u 0x2\n 19646: a5 = 0 if a2 != 0\n 19648: a0 = a0 | a1\n 19651: a0 = a0 << 0x20\n 19654: a3 = a3 | a4\n 19657: a0 = a0 | a3\n 19660: a0 = reverse a0\n 19662: a5 = 0 if a0 != 0\n 19664: jump @327 if a5 != 0\n      : @326 (gas: 1)\n 19667: jump @402\n      : @327 (gas: 3)\n 19670: a0 = 0x40\n 19673: a1 = 0x20\n 19676: ra = 230, jump @0\n      : @328 [@dyn 115] (gas: 103)\n 19682: a1 = u8 [a0 + 0x11]\n 19685: a2 = u8 [a0 + 0x10]\n 19688: a3 = u8 [a0 + 0x12]\n 19691: a4 = u8 [a0 + 0x13]\n 19694: a1 = a1 << 0x8\n 19697: a1 = a1 | a2\n 19700: a3 = a3 << 0x10\n 19703: a4 = a4 << 0x18\n 19706: a3 = a3 | a4\n 19709: a1 = a1 | a3\n 19712: a2 = u8 [a0 + 0x15]\n 19715: a3 = u8 [a0 + 0x14]\n 19718: a4 = u8 [a0 + 0x16]\n 19721: a5 = u8 [a0 + 0x17]\n 19724: a2 = a2 << 0x8\n 19727: a2 = a2 | a3\n 19730: a4 = a4 << 0x10\n 19733: a5 = a5 << 0x18\n 19736: a4 = a4 | a5\n 19739: a2 = a2 | a4\n 19742: a2 = a2 << 0x20\n 19745: t0 = a2 | a1\n 19748: a2 = u8 [a0 + 0x1]\n 19751: a3 = u8 [a0]\n 19753: a4 = u8 [a0 + 0x2]\n 19756: a5 = u8 [a0 + 0x3]\n 19759: a2 = a2 << 0x8\n 19762: a2 = a2 | a3\n 19765: a4 = a4 << 0x10\n 19768: a5 = a5 << 0x18\n 19771: a4 = a4 | a5\n 19774: a2 = a2 | a4\n 19777: a3 = u8 [a0 + 0x5]\n 19780: a4 = u8 [a0 + 0x4]\n 19783: a5 = u8 [a0 + 0x6]\n 19786: s1 = u8 [a0 + 0x7]\n 19789: a3 = a3 << 0x8\n 19792: a3 = a3 | a4\n 19795: a5 = a5 << 0x10\n 19798: s1 = s1 << 0x18\n 19801: a5 = a5 | s1\n 19804: a3 = a3 | a5\n 19807: a3 = a3 << 0x20\n 19810: a2 = a2 | a3\n 19813: a3 = u8 [a0 + 0x19]\n 19816: a4 = u8 [a0 + 0x18]\n 19819: a5 = u8 [a0 + 0x1a]\n 19822: s1 = u8 [a0 + 0x1b]\n 19825: a3 = a3 << 0x8\n 19828: a3 = a3 | a4\n 19831: a5 = a5 << 0x10\n 19834: s1 = s1 << 0x18\n 19837: a5 = a5 | s1\n 19840: a3 = a3 | a5\n 19843: a4 = u8 [a0 + 0x1d]\n 19846: a5 = u8 [a0 + 0x1c]\n 19849: s1 = u8 [a0 + 0x1e]\n 19852: a1 = u8 [a0 + 0x1f]\n 19855: a4 = a4 << 0x8\n 19858: a4 = a4 | a5\n 19861: s1 = s1 << 0x10\n 19864: a1 = a1 << 0x18\n 19867: a1 = a1 | s1\n 19870: a1 = a1 | a4\n 19873: a1 = a1 << 0x20\n 19876: a3 = a3 | a1\n 19879: a1 = u8 [a0 + 0x9]\n 19882: a4 = u8 [a0 + 0x8]\n 19885: a5 = u8 [a0 + 0xa]\n 19888: s1 = u8 [a0 + 0xb]\n 19891: a1 = a1 << 0x8\n 19894: a1 = a1 | a4\n 19897: a5 = a5 << 0x10\n 19900: s1 = s1 << 0x18\n 19903: a5 = a5 | s1\n 19906: a1 = a1 | a5\n 19909: a4 = u8 [a0 + 0xd]\n 19912: a5 = u8 [a0 + 0xc]\n 19915: s1 = u8 [a0 + 0xe]\n 19918: a0 = u8 [a0 + 0xf]\n 19921: a4 = a4 << 0x8\n 19924: a4 = a4 | a5\n 19927: s1 = s1 << 0x10\n 19930: a0 = a0 << 0x18\n 19933: a0 = a0 | s1\n 19936: a0 = a0 | a4\n 19939: a0 = a0 << 0x20\n 19942: a0 = a0 | a1\n 19945: a4 = reverse a0\n 19947: a3 = reverse a3\n 19949: a0 = reverse a2\n 19951: a1 = reverse t0\n 19953: u64 [sp + 0x48] = a0\n 19956: u64 [sp + 0x40] = a1\n 19959: a0 = a0 | a1\n 19962: a1 = a3 | a4\n 19965: a1 = a1 | a0\n 19968: a1 = a1 >> 0x20\n 19971: u64 [sp + 0x50] = a4\n 19974: a0 = a0 | a4\n 19977: a0 = a0 << 0x20\n 19980: a0 = a0 | a1\n 19983: jump @330 if a0 == 0\n      : @329 (gas: 1)\n 19986: jump @401\n      : @330 (gas: 5)\n 19989: u64 [sp + 0x38] = a3\n 19992: i32 a0 = a3 + 0\n 19994: u64 [sp + 0x58] = a0\n 19997: a1 = 0x20\n 20000: ra = 232, jump @0\n      : @331 [@dyn 116] (gas: 48)\n 20006: u8 [a0 + 31] = 0\n 20009: u8 [a0 + 30] = 0\n 20012: u8 [a0 + 29] = 0\n 20015: u8 [a0 + 28] = 0\n 20018: u8 [a0 + 27] = 0\n 20021: u8 [a0 + 26] = 0\n 20024: u8 [a0 + 25] = 0\n 20027: u8 [a0 + 24] = 0\n 20030: u8 [a0 + 23] = 0\n 20033: u8 [a0 + 22] = 0\n 20036: u8 [a0 + 21] = 0\n 20039: u8 [a0 + 20] = 0\n 20042: u8 [a0 + 19] = 0\n 20045: u8 [a0 + 18] = 0\n 20048: u8 [a0 + 17] = 0\n 20051: u8 [a0 + 16] = 0\n 20054: u8 [a0 + 15] = 0\n 20057: u8 [a0 + 14] = 0\n 20060: u8 [a0 + 13] = 0\n 20063: u8 [a0 + 12] = 0\n 20066: u8 [a0 + 11] = 0\n 20069: u8 [a0 + 10] = 0\n 20072: u8 [a0 + 9] = 0\n 20075: u8 [a0 + 8] = 0\n 20078: u8 [a0 + 7] = 0\n 20081: u8 [a0 + 6] = 0\n 20084: u8 [a0 + 5] = 0\n 20087: u8 [a0 + 4] = 0\n 20090: u8 [a0 + 3] = 0x45\n 20094: u8 [a0 + 2] = 0xf2\n 20099: u8 [a0 + 1] = 0xa4\n 20104: u8 [a0 + 0] = 0x3f\n 20107: ecalli 6 // 'ref_time_left'\n 20109: a0 = u64 [sp + 0x60]\n 20112: s1 = sp + 0x7ff\n 20116: s1 = s1 + 0x11\n 20119: u64 [s1 + 0x2f8] = a0\n 20123: a0 = u64 [sp + 0x68]\n 20126: u64 [s1 + 0x2f0] = a0\n 20130: a0 = u64 [sp + 0x70]\n 20133: u32 [s1 + 0x300] = a0\n 20137: u64 [s1 + 808] = 0\n 20141: u64 [s1 + 800] = 0\n 20145: u64 [s1 + 792] = 0\n 20149: u64 [s1 + 784] = 0\n 20153: a1 = 0x4\n 20156: a0 = u64 [sp + 0x58]\n 20159: ra = 234, jump @0\n      : @332 [@dyn 117] (gas: 4)\n 20165: u64 [sp + 0x70] = a0\n 20168: a1 = 0x20\n 20171: a0 = u64 [sp + 0x58]\n 20174: ra = 236, jump @0\n      : @333 [@dyn 118] (gas: 35)\n 20180: u32 [s1 + 816] = 0x20\n 20185: u64 [s1 + 872] = 0\n 20189: u64 [s1 + 864] = 0\n 20193: u64 [s1 + 856] = 0\n 20197: u64 [s1 + 848] = 0\n 20201: a1 = sp + 0x7ff\n 20205: a1 = a1 + 0x301\n 20209: a1 = a1 << 0x20\n 20212: a1 = a1 >> 0x20\n 20215: s1 = u64 [sp + 0x90]\n 20219: s1 = s1 | a1\n 20222: a1 = sp + 0x7ff\n 20226: a1 = a1 + 0x321\n 20230: a1 = a1 << 0x20\n 20233: a1 = a1 >> 0x20\n 20236: a2 = sp + 0x7ff\n 20240: a2 = a2 + 0x361\n 20244: a2 = a2 << 0x20\n 20247: a3 = a2 | a1\n 20250: a1 = u64 [sp + 0x70]\n 20253: a1 = a1 << 0x20\n 20256: a1 = a1 >> 0x20\n 20259: a4 = u64 [sp + 0x98]\n 20263: a4 = a4 | a1\n 20266: a0 = a0 << 0x20\n 20269: a0 = a0 >> 0x20\n 20272: a1 = sp + 0x7ff\n 20276: a1 = a1 + 0x341\n 20280: a1 = a1 << 0x20\n 20283: a5 = a1 | a0\n 20286: a1 = 0xffffffffffffffff\n 20289: a2 = 0xffffffffffffffff\n 20292: a0 = s1\n 20294: ecalli 0 // 'call'\n 20295: fallthrough\n      : @334 (gas: 1)\n 20296: jump @362 if a0 != 0\n      : @335 (gas: 2)\n 20300: ecalli 8 // 'return_data_size'\n 20302: fallthrough\n      : @336 (gas: 2)\n 20303: a1 = 0x20\n 20306: jump @338 if a0 >=u a1\n      : @337 (gas: 3)\n 20309: ecalli 8 // 'return_data_size'\n 20311: a1 = a0\n 20313: fallthrough\n      : @338 (gas: 27)\n 20314: a3 = u64 [sp + 0x50]\n 20317: a4 = u64 [sp + 0x48]\n 20320: a5 = u64 [sp + 0x38]\n 20323: s1 = u64 [sp + 0x40]\n 20326: a0 = a1 + 0x1f\n 20329: u64 [sp + 0x68] = a1\n 20332: a1 = a0 <u a1\n 20335: u64 [sp + 112] = 0\n 20338: a1 = a1 & 0x1\n 20341: a0 = a0 & 0xffffffffffffffe0\n 20344: a5 = a5 + a0\n 20347: u64 [sp + 0x60] = a5\n 20350: a0 = a5 <u a0\n 20353: s1 = s1 + a1\n 20356: s1 = s1 + a0\n 20359: a2 = s1 ^ a1\n 20362: a1 = s1 <u a1\n 20365: a1 = a0 if a2 == 0\n 20368: a1 = a1 + a3\n 20371: a0 = a1 <u a3\n 20374: a0 = a0 + a4\n 20377: u64 [sp + 0x50] = a1\n 20380: u64 [sp + 0x48] = a0\n 20383: a0 = a0 | a1\n 20386: a1 = s1 <u 0x1\n 20389: a1 = 0 if a0 != 0\n 20391: jump @340 if a1 != 0\n      : @339 (gas: 1)\n 20394: jump @425\n      : @340 (gas: 3)\n 20397: a0 = 0x40\n 20400: a1 = 0x20\n 20403: ra = 238, jump @0\n      : @341 [@dyn 119] (gas: 79)\n 20409: a1 = u64 [sp + 0x48]\n 20412: a1 = reverse a1\n 20414: a2 = u64 [sp + 0x50]\n 20417: a2 = reverse a2\n 20419: a3 = reverse s1\n 20421: a4 = u64 [sp + 0x60]\n 20424: a4 = reverse a4\n 20426: u8 [a0 + 0x18] = a4\n 20429: a5 = a4 >> 0x38\n 20432: u8 [a0 + 0x1f] = a5\n 20435: a5 = a4 >> 0x30\n 20438: u8 [a0 + 0x1e] = a5\n 20441: a5 = a4 >> 0x28\n 20444: u8 [a0 + 0x1d] = a5\n 20447: a5 = a4 >> 0x20\n 20450: u8 [a0 + 0x1c] = a5\n 20453: a5 = a4 >> 0x18\n 20456: u8 [a0 + 0x1b] = a5\n 20459: a5 = a4 >> 0x10\n 20462: u8 [a0 + 0x1a] = a5\n 20465: a4 = a4 >> 0x8\n 20468: u8 [a0 + 0x19] = a4\n 20471: u8 [a0 + 0x10] = a3\n 20474: a4 = a3 >> 0x38\n 20477: u8 [a0 + 0x17] = a4\n 20480: a4 = a3 >> 0x30\n 20483: u8 [a0 + 0x16] = a4\n 20486: a4 = a3 >> 0x28\n 20489: u8 [a0 + 0x15] = a4\n 20492: a4 = a3 >> 0x20\n 20495: u8 [a0 + 0x14] = a4\n 20498: a4 = a3 >> 0x18\n 20501: u8 [a0 + 0x13] = a4\n 20504: a4 = a3 >> 0x10\n 20507: u8 [a0 + 0x12] = a4\n 20510: a3 = a3 >> 0x8\n 20513: u8 [a0 + 0x11] = a3\n 20516: u8 [a0 + 0x8] = a2\n 20519: a3 = a2 >> 0x38\n 20522: u8 [a0 + 0xf] = a3\n 20525: a3 = a2 >> 0x30\n 20528: u8 [a0 + 0xe] = a3\n 20531: a3 = a2 >> 0x28\n 20534: u8 [a0 + 0xd] = a3\n 20537: a3 = a2 >> 0x20\n 20540: u8 [a0 + 0xc] = a3\n 20543: a3 = a2 >> 0x18\n 20546: u8 [a0 + 0xb] = a3\n 20549: a3 = a2 >> 0x10\n 20552: u8 [a0 + 0xa] = a3\n 20555: a2 = a2 >> 0x8\n 20558: u8 [a0 + 0x9] = a2\n 20561: u8 [a0] = a1\n 20563: a2 = a1 >> 0x38\n 20566: u8 [a0 + 0x7] = a2\n 20569: a2 = a1 >> 0x30\n 20572: u8 [a0 + 0x6] = a2\n 20575: a2 = a1 >> 0x28\n 20578: u8 [a0 + 0x5] = a2\n 20581: a2 = a1 >> 0x20\n 20584: u8 [a0 + 0x4] = a2\n 20587: a2 = a1 >> 0x18\n 20590: u8 [a0 + 0x3] = a2\n 20593: a2 = a1 >> 0x10\n 20596: u8 [a0 + 0x2] = a2\n 20599: a1 = a1 >> 0x8\n 20602: a5 = u64 [sp + 0x70]\n 20605: a2 = a5 >u 0\n 20607: a3 = u64 [sp + 0x68]\n 20610: a3 = a3 <u 0x20\n 20613: a3 = a3 ^ 0x1\n 20616: a3 = a2 if a5 != 0\n 20619: a2 = a5 >u 0\n 20621: a4 = a5 >u 0\n 20623: a4 = a2 if a5 == 0\n 20626: a2 = a5 | a5\n 20629: a4 = a3 if a2 == 0\n 20632: u8 [a0 + 0x1] = a1\n 20635: jump @343 if a4 != 0\n      : @342 (gas: 1)\n 20638: jump @402\n      : @343 (gas: 3)\n 20641: a1 = 0x20\n 20644: a0 = u64 [sp + 0x58]\n 20647: ra = 240, jump @0\n      : @344 [@dyn 120] (gas: 96)\n 20653: a1 = u8 [a0 + 0x9]\n 20656: a2 = u8 [a0 + 0x8]\n 20659: a3 = u8 [a0 + 0xa]\n 20662: a4 = u8 [a0 + 0xb]\n 20665: a1 = a1 << 0x8\n 20668: a1 = a1 | a2\n 20671: a3 = a3 << 0x10\n 20674: a4 = a4 << 0x18\n 20677: a3 = a3 | a4\n 20680: a1 = a1 | a3\n 20683: a2 = u8 [a0 + 0xd]\n 20686: a3 = u8 [a0 + 0xc]\n 20689: a4 = u8 [a0 + 0xe]\n 20692: a5 = u8 [a0 + 0xf]\n 20695: a2 = a2 << 0x8\n 20698: a2 = a2 | a3\n 20701: a4 = a4 << 0x10\n 20704: a5 = a5 << 0x18\n 20707: a4 = a4 | a5\n 20710: a2 = a2 | a4\n 20713: a2 = a2 << 0x20\n 20716: t0 = a2 | a1\n 20719: a2 = u8 [a0 + 0x19]\n 20722: a3 = u8 [a0 + 0x18]\n 20725: a4 = u8 [a0 + 0x1a]\n 20728: a5 = u8 [a0 + 0x1b]\n 20731: a2 = a2 << 0x8\n 20734: a2 = a2 | a3\n 20737: a4 = a4 << 0x10\n 20740: a5 = a5 << 0x18\n 20743: a4 = a4 | a5\n 20746: a2 = a2 | a4\n 20749: a3 = u8 [a0 + 0x1d]\n 20752: a4 = u8 [a0 + 0x1c]\n 20755: a5 = u8 [a0 + 0x1e]\n 20758: s1 = u8 [a0 + 0x1f]\n 20761: a3 = a3 << 0x8\n 20764: a3 = a3 | a4\n 20767: a5 = a5 << 0x10\n 20770: s1 = s1 << 0x18\n 20773: a5 = a5 | s1\n 20776: a3 = a3 | a5\n 20779: a3 = a3 << 0x20\n 20782: t1 = a3 | a2\n 20785: a3 = u8 [a0 + 0x11]\n 20788: a4 = u8 [a0 + 0x10]\n 20791: a5 = u8 [a0 + 0x12]\n 20794: s1 = u8 [a0 + 0x13]\n 20797: a3 = a3 << 0x8\n 20800: a3 = a3 | a4\n 20803: a5 = a5 << 0x10\n 20806: s1 = s1 << 0x18\n 20809: a5 = a5 | s1\n 20812: a3 = a3 | a5\n 20815: a4 = u8 [a0 + 0x1]\n 20818: a5 = u8 [a0]\n 20820: s1 = u8 [a0 + 0x2]\n 20823: a1 = u8 [a0 + 0x3]\n 20826: a4 = a4 << 0x8\n 20829: a4 = a4 | a5\n 20832: s1 = s1 << 0x10\n 20835: a1 = a1 << 0x18\n 20838: a1 = a1 | s1\n 20841: a4 = a4 | a1\n 20844: a1 = u8 [a0 + 0x15]\n 20847: a5 = u8 [a0 + 0x14]\n 20850: s1 = u8 [a0 + 0x16]\n 20853: a2 = u8 [a0 + 0x17]\n 20856: a1 = a1 << 0x8\n 20859: a1 = a1 | a5\n 20862: s1 = s1 << 0x10\n 20865: a2 = a2 << 0x18\n 20868: a2 = a2 | s1\n 20871: a1 = a1 | a2\n 20874: a2 = u8 [a0 + 0x5]\n 20877: a5 = u8 [a0 + 0x4]\n 20880: s1 = u8 [a0 + 0x6]\n 20883: a0 = u8 [a0 + 0x7]\n 20886: a2 = a2 << 0x8\n 20889: a2 = a2 | a5\n 20892: s1 = s1 << 0x10\n 20895: a0 = a0 << 0x18\n 20898: a0 = a0 | s1\n 20901: a0 = a0 | a2\n 20904: a2 = 0xa00000000000000\n 20914: a2 = t1 ^ a2\n 20917: a2 = t0 | a2\n 20920: a0 = a0 | a1\n 20923: a0 = a0 << 0x20\n 20926: a3 = a3 | a4\n 20929: a0 = a0 | a3\n 20932: a0 = a0 | a2\n 20935: u64 [sp + 0x70] = a0\n 20938: a0 = 0x40\n 20941: a1 = 0x20\n 20944: ra = 242, jump @0\n      : @345 [@dyn 121] (gas: 98)\n 20950: a1 = u8 [a0 + 0x19]\n 20953: a2 = u8 [a0 + 0x18]\n 20956: a3 = u8 [a0 + 0x1a]\n 20959: a4 = u8 [a0 + 0x1b]\n 20962: a1 = a1 << 0x8\n 20965: a1 = a1 | a2\n 20968: a3 = a3 << 0x10\n 20971: a4 = a4 << 0x18\n 20974: a3 = a3 | a4\n 20977: a1 = a1 | a3\n 20980: a2 = u8 [a0 + 0x1d]\n 20983: a3 = u8 [a0 + 0x1c]\n 20986: a4 = u8 [a0 + 0x1e]\n 20989: a5 = u8 [a0 + 0x1f]\n 20992: a2 = a2 << 0x8\n 20995: a2 = a2 | a3\n 20998: a4 = a4 << 0x10\n 21001: a5 = a5 << 0x18\n 21004: a4 = a4 | a5\n 21007: a2 = a2 | a4\n 21010: a2 = a2 << 0x20\n 21013: t0 = a2 | a1\n 21016: a2 = u8 [a0 + 0x11]\n 21019: a3 = u8 [a0 + 0x10]\n 21022: a4 = u8 [a0 + 0x12]\n 21025: a5 = u8 [a0 + 0x13]\n 21028: a2 = a2 << 0x8\n 21031: a2 = a2 | a3\n 21034: a4 = a4 << 0x10\n 21037: a5 = a5 << 0x18\n 21040: a4 = a4 | a5\n 21043: a2 = a2 | a4\n 21046: a3 = u8 [a0 + 0x15]\n 21049: a4 = u8 [a0 + 0x14]\n 21052: a5 = u8 [a0 + 0x16]\n 21055: s1 = u8 [a0 + 0x17]\n 21058: a3 = a3 << 0x8\n 21061: a3 = a3 | a4\n 21064: a5 = a5 << 0x10\n 21067: s1 = s1 << 0x18\n 21070: a5 = a5 | s1\n 21073: a3 = a3 | a5\n 21076: a3 = a3 << 0x20\n 21079: a2 = a2 | a3\n 21082: a3 = u8 [a0 + 0x9]\n 21085: a4 = u8 [a0 + 0x8]\n 21088: a5 = u8 [a0 + 0xa]\n 21091: s1 = u8 [a0 + 0xb]\n 21094: a3 = a3 << 0x8\n 21097: a3 = a3 | a4\n 21100: a5 = a5 << 0x10\n 21103: s1 = s1 << 0x18\n 21106: a5 = a5 | s1\n 21109: a3 = a3 | a5\n 21112: a4 = u8 [a0 + 0xd]\n 21115: a5 = u8 [a0 + 0xc]\n 21118: s1 = u8 [a0 + 0xe]\n 21121: a1 = u8 [a0 + 0xf]\n 21124: a4 = a4 << 0x8\n 21127: a4 = a4 | a5\n 21130: s1 = s1 << 0x10\n 21133: a1 = a1 << 0x18\n 21136: a1 = a1 | s1\n 21139: a1 = a1 | a4\n 21142: a1 = a1 << 0x20\n 21145: a3 = a3 | a1\n 21148: a1 = u8 [a0 + 0x1]\n 21151: a4 = u8 [a0]\n 21153: a5 = u8 [a0 + 0x2]\n 21156: s1 = u8 [a0 + 0x3]\n 21159: a1 = a1 << 0x8\n 21162: a1 = a1 | a4\n 21165: a5 = a5 << 0x10\n 21168: s1 = s1 << 0x18\n 21171: a5 = a5 | s1\n 21174: a1 = a1 | a5\n 21177: a4 = u8 [a0 + 0x5]\n 21180: a5 = u8 [a0 + 0x4]\n 21183: s1 = u8 [a0 + 0x6]\n 21186: a0 = u8 [a0 + 0x7]\n 21189: a4 = a4 << 0x8\n 21192: a4 = a4 | a5\n 21195: s1 = s1 << 0x10\n 21198: a0 = a0 << 0x18\n 21201: a0 = a0 | s1\n 21204: a0 = a0 | a4\n 21207: a0 = a0 << 0x20\n 21210: a0 = a0 | a1\n 21213: a1 = reverse a0\n 21215: a3 = reverse a3\n 21217: a2 = reverse a2\n 21219: a4 = reverse t0\n 21221: a0 = u64 [sp + 0x70]\n 21224: u64 [sp + 0x68] = a1\n 21227: u64 [sp + 0x60] = a3\n 21230: u64 [sp + 0x58] = a2\n 21233: u64 [sp + 0x50] = a4\n 21236: jump @389 if a0 != 0\n      : @346 (gas: 8)\n 21240: a0 = a4 | a3\n 21243: a1 = a1 | a2\n 21246: a0 = a0 | a1\n 21249: a0 = a0 >> 0x20\n 21252: a1 = a1 | a3\n 21255: a1 = a1 << 0x20\n 21258: a0 = a0 | a1\n 21261: jump @401 if a0 != 0\n      : @347 (gas: 4)\n 21265: i32 a0 = a4 + 0\n 21267: u64 [sp + 0x70] = a0\n 21270: a1 = 0x20\n 21273: ra = 244, jump @0\n      : @348 [@dyn 122] (gas: 48)\n 21279: u8 [a0 + 31] = 0\n 21282: u8 [a0 + 30] = 0\n 21285: u8 [a0 + 29] = 0\n 21288: u8 [a0 + 28] = 0\n 21291: u8 [a0 + 27] = 0\n 21294: u8 [a0 + 26] = 0\n 21297: u8 [a0 + 25] = 0\n 21300: u8 [a0 + 24] = 0\n 21303: u8 [a0 + 23] = 0\n 21306: u8 [a0 + 22] = 0\n 21309: u8 [a0 + 21] = 0\n 21312: u8 [a0 + 20] = 0\n 21315: u8 [a0 + 19] = 0\n 21318: u8 [a0 + 18] = 0\n 21321: u8 [a0 + 17] = 0\n 21324: u8 [a0 + 16] = 0\n 21327: u8 [a0 + 15] = 0\n 21330: u8 [a0 + 14] = 0\n 21333: u8 [a0 + 13] = 0\n 21336: u8 [a0 + 12] = 0\n 21339: u8 [a0 + 11] = 0\n 21342: u8 [a0 + 10] = 0\n 21345: u8 [a0 + 9] = 0\n 21348: u8 [a0 + 8] = 0\n 21351: u8 [a0 + 7] = 0\n 21354: u8 [a0 + 6] = 0\n 21357: u8 [a0 + 5] = 0\n 21360: u8 [a0 + 4] = 0\n 21363: u8 [a0 + 3] = 0x45\n 21367: u8 [a0 + 2] = 0xf2\n 21372: u8 [a0 + 1] = 0xa4\n 21377: u8 [a0 + 0] = 0x3f\n 21380: ecalli 6 // 'ref_time_left'\n 21382: a0 = u64 [sp + 0x78]\n 21385: s1 = sp + 0x7ff\n 21389: s1 = s1 + 0x11\n 21392: u64 [s1 + 0x378] = a0\n 21396: a0 = u64 [sp + 0x80]\n 21400: u64 [s1 + 0x370] = a0\n 21404: a0 = u64 [sp + 0x88]\n 21408: u32 [s1 + 0x380] = a0\n 21412: u64 [s1 + 936] = 0\n 21416: u64 [s1 + 928] = 0\n 21420: u64 [s1 + 920] = 0\n 21424: u64 [s1 + 912] = 0\n 21428: a1 = 0x4\n 21431: a0 = u64 [sp + 0x70]\n 21434: ra = 246, jump @0\n      : @349 [@dyn 123] (gas: 4)\n 21440: u64 [sp + 0x88] = a0\n 21444: a1 = 0x20\n 21447: a0 = u64 [sp + 0x70]\n 21450: ra = 248, jump @0\n      : @350 [@dyn 124] (gas: 35)\n 21456: u32 [s1 + 944] = 0x20\n 21461: u64 [s1 + 1000] = 0\n 21465: u64 [s1 + 992] = 0\n 21469: u64 [s1 + 984] = 0\n 21473: u64 [s1 + 976] = 0\n 21477: a1 = sp + 0x7ff\n 21481: a1 = a1 + 0x381\n 21485: a1 = a1 << 0x20\n 21488: a1 = a1 >> 0x20\n 21491: s1 = u64 [sp + 0x90]\n 21495: s1 = s1 | a1\n 21498: a1 = sp + 0x7ff\n 21502: a1 = a1 + 0x3a1\n 21506: a1 = a1 << 0x20\n 21509: a1 = a1 >> 0x20\n 21512: a2 = sp + 0x7ff\n 21516: a2 = a2 + 0x3e1\n 21520: a2 = a2 << 0x20\n 21523: a3 = a2 | a1\n 21526: a1 = u64 [sp + 0x88]\n 21530: a1 = a1 << 0x20\n 21533: a1 = a1 >> 0x20\n 21536: a4 = u64 [sp + 0x98]\n 21540: a4 = a4 | a1\n 21543: a0 = a0 << 0x20\n 21546: a0 = a0 >> 0x20\n 21549: a1 = sp + 0x7ff\n 21553: a1 = a1 + 0x3c1\n 21557: a1 = a1 << 0x20\n 21560: a5 = a1 | a0\n 21563: a1 = 0xffffffffffffffff\n 21566: a2 = 0xffffffffffffffff\n 21569: a0 = s1\n 21571: ecalli 0 // 'call'\n 21572: fallthrough\n      : @351 (gas: 1)\n 21573: jump @362 if a0 != 0\n      : @352 (gas: 2)\n 21577: ecalli 8 // 'return_data_size'\n 21579: fallthrough\n      : @353 (gas: 2)\n 21580: a1 = 0x20\n 21583: jump @355 if a0 >=u a1\n      : @354 (gas: 3)\n 21586: ecalli 8 // 'return_data_size'\n 21588: a1 = a0\n 21590: fallthrough\n      : @355 (gas: 27)\n 21591: a3 = u64 [sp + 0x68]\n 21594: a4 = u64 [sp + 0x50]\n 21597: a0 = a1 + 0x1f\n 21600: u64 [sp + 0x90] = a1\n 21604: a1 = a0 <u a1\n 21607: u64 [sp + 152] = 0\n 21611: a1 = a1 & 0x1\n 21614: a0 = a0 & 0xffffffffffffffe0\n 21617: a4 = a4 + a0\n 21620: u64 [sp + 0x88] = a4\n 21624: a0 = a4 <u a0\n 21627: s1 = u64 [sp + 0x58]\n 21630: s1 = s1 + a1\n 21633: s1 = s1 + a0\n 21636: a2 = s1 ^ a1\n 21639: a1 = s1 <u a1\n 21642: a1 = a0 if a2 == 0\n 21645: a0 = u64 [sp + 0x60]\n 21648: a1 = a1 + a0\n 21651: a0 = a1 <u a0\n 21654: a0 = a0 + a3\n 21657: u64 [sp + 0x80] = a1\n 21661: u64 [sp + 0x78] = a0\n 21664: a0 = a0 | a1\n 21667: a1 = s1 <u 0x1\n 21670: a1 = 0 if a0 != 0\n 21672: jump @357 if a1 != 0\n      : @356 (gas: 1)\n 21675: jump @427\n      : @357 (gas: 3)\n 21678: a0 = 0x40\n 21681: a1 = 0x20\n 21684: ra = 250, jump @0\n      : @358 [@dyn 125] (gas: 79)\n 21690: a1 = u64 [sp + 0x78]\n 21693: a1 = reverse a1\n 21695: a2 = u64 [sp + 0x80]\n 21699: a2 = reverse a2\n 21701: a3 = reverse s1\n 21703: a4 = u64 [sp + 0x88]\n 21707: a4 = reverse a4\n 21709: u8 [a0 + 0x18] = a4\n 21712: a5 = a4 >> 0x38\n 21715: u8 [a0 + 0x1f] = a5\n 21718: a5 = a4 >> 0x30\n 21721: u8 [a0 + 0x1e] = a5\n 21724: a5 = a4 >> 0x28\n 21727: u8 [a0 + 0x1d] = a5\n 21730: a5 = a4 >> 0x20\n 21733: u8 [a0 + 0x1c] = a5\n 21736: a5 = a4 >> 0x18\n 21739: u8 [a0 + 0x1b] = a5\n 21742: a5 = a4 >> 0x10\n 21745: u8 [a0 + 0x1a] = a5\n 21748: a4 = a4 >> 0x8\n 21751: u8 [a0 + 0x19] = a4\n 21754: u8 [a0 + 0x10] = a3\n 21757: a4 = a3 >> 0x38\n 21760: u8 [a0 + 0x17] = a4\n 21763: a4 = a3 >> 0x30\n 21766: u8 [a0 + 0x16] = a4\n 21769: a4 = a3 >> 0x28\n 21772: u8 [a0 + 0x15] = a4\n 21775: a4 = a3 >> 0x20\n 21778: u8 [a0 + 0x14] = a4\n 21781: a4 = a3 >> 0x18\n 21784: u8 [a0 + 0x13] = a4\n 21787: a4 = a3 >> 0x10\n 21790: u8 [a0 + 0x12] = a4\n 21793: a3 = a3 >> 0x8\n 21796: u8 [a0 + 0x11] = a3\n 21799: u8 [a0 + 0x8] = a2\n 21802: a3 = a2 >> 0x38\n 21805: u8 [a0 + 0xf] = a3\n 21808: a3 = a2 >> 0x30\n 21811: u8 [a0 + 0xe] = a3\n 21814: a3 = a2 >> 0x28\n 21817: u8 [a0 + 0xd] = a3\n 21820: a3 = a2 >> 0x20\n 21823: u8 [a0 + 0xc] = a3\n 21826: a3 = a2 >> 0x18\n 21829: u8 [a0 + 0xb] = a3\n 21832: a3 = a2 >> 0x10\n 21835: u8 [a0 + 0xa] = a3\n 21838: a2 = a2 >> 0x8\n 21841: u8 [a0 + 0x9] = a2\n 21844: u8 [a0] = a1\n 21846: a2 = a1 >> 0x38\n 21849: u8 [a0 + 0x7] = a2\n 21852: a2 = a1 >> 0x30\n 21855: u8 [a0 + 0x6] = a2\n 21858: a2 = a1 >> 0x28\n 21861: u8 [a0 + 0x5] = a2\n 21864: a2 = a1 >> 0x20\n 21867: u8 [a0 + 0x4] = a2\n 21870: a2 = a1 >> 0x18\n 21873: u8 [a0 + 0x3] = a2\n 21876: a2 = a1 >> 0x10\n 21879: u8 [a0 + 0x2] = a2\n 21882: a1 = a1 >> 0x8\n 21885: a5 = u64 [sp + 0x98]\n 21889: a2 = a5 >u 0\n 21891: a3 = u64 [sp + 0x90]\n 21895: a3 = a3 <u 0x20\n 21898: a3 = a3 ^ 0x1\n 21901: a3 = a2 if a5 != 0\n 21904: a2 = a5 >u 0\n 21906: a4 = a5 >u 0\n 21908: a4 = a2 if a5 == 0\n 21911: a2 = a5 | a5\n 21914: a4 = a3 if a2 == 0\n 21917: u8 [a0 + 0x1] = a1\n 21920: jump @402 if a4 == 0\n      : @359 (gas: 3)\n 21924: a1 = 0x20\n 21927: a0 = u64 [sp + 0x70]\n 21930: ra = 252, jump @0\n      : @360 [@dyn 126] (gas: 93)\n 21936: a1 = u8 [a0 + 0x9]\n 21939: a2 = u8 [a0 + 0x8]\n 21942: a3 = u8 [a0 + 0xa]\n 21945: a4 = u8 [a0 + 0xb]\n 21948: a1 = a1 << 0x8\n 21951: a1 = a1 | a2\n 21954: a3 = a3 << 0x10\n 21957: a4 = a4 << 0x18\n 21960: a3 = a3 | a4\n 21963: a1 = a1 | a3\n 21966: a2 = u8 [a0 + 0xd]\n 21969: a3 = u8 [a0 + 0xc]\n 21972: a4 = u8 [a0 + 0xe]\n 21975: a5 = u8 [a0 + 0xf]\n 21978: a2 = a2 << 0x8\n 21981: a2 = a2 | a3\n 21984: a4 = a4 << 0x10\n 21987: a5 = a5 << 0x18\n 21990: a4 = a4 | a5\n 21993: a2 = a2 | a4\n 21996: a2 = a2 << 0x20\n 21999: t0 = a2 | a1\n 22002: a2 = u8 [a0 + 0x19]\n 22005: a3 = u8 [a0 + 0x18]\n 22008: a4 = u8 [a0 + 0x1a]\n 22011: a5 = u8 [a0 + 0x1b]\n 22014: a2 = a2 << 0x8\n 22017: a2 = a2 | a3\n 22020: a4 = a4 << 0x10\n 22023: a5 = a5 << 0x18\n 22026: a4 = a4 | a5\n 22029: a2 = a2 | a4\n 22032: a3 = u8 [a0 + 0x1d]\n 22035: a4 = u8 [a0 + 0x1c]\n 22038: a5 = u8 [a0 + 0x1e]\n 22041: s1 = u8 [a0 + 0x1f]\n 22044: a3 = a3 << 0x8\n 22047: a3 = a3 | a4\n 22050: a5 = a5 << 0x10\n 22053: s1 = s1 << 0x18\n 22056: a5 = a5 | s1\n 22059: a3 = a3 | a5\n 22062: a3 = a3 << 0x20\n 22065: t1 = a3 | a2\n 22068: a3 = u8 [a0 + 0x11]\n 22071: a4 = u8 [a0 + 0x10]\n 22074: a5 = u8 [a0 + 0x12]\n 22077: s1 = u8 [a0 + 0x13]\n 22080: a3 = a3 << 0x8\n 22083: a3 = a3 | a4\n 22086: a5 = a5 << 0x10\n 22089: s1 = s1 << 0x18\n 22092: a5 = a5 | s1\n 22095: a3 = a3 | a5\n 22098: a4 = u8 [a0 + 0x1]\n 22101: a5 = u8 [a0]\n 22103: s1 = u8 [a0 + 0x2]\n 22106: a1 = u8 [a0 + 0x3]\n 22109: a4 = a4 << 0x8\n 22112: a4 = a4 | a5\n 22115: s1 = s1 << 0x10\n 22118: a1 = a1 << 0x18\n 22121: a1 = a1 | s1\n 22124: a4 = a4 | a1\n 22127: a1 = u8 [a0 + 0x15]\n 22130: a5 = u8 [a0 + 0x14]\n 22133: s1 = u8 [a0 + 0x16]\n 22136: a2 = u8 [a0 + 0x17]\n 22139: a1 = a1 << 0x8\n 22142: a1 = a1 | a5\n 22145: s1 = s1 << 0x10\n 22148: a2 = a2 << 0x18\n 22151: a2 = a2 | s1\n 22154: a1 = a1 | a2\n 22157: a2 = u8 [a0 + 0x5]\n 22160: a5 = u8 [a0 + 0x4]\n 22163: s1 = u8 [a0 + 0x6]\n 22166: a0 = u8 [a0 + 0x7]\n 22169: a2 = a2 << 0x8\n 22172: a2 = a2 | a5\n 22175: s1 = s1 << 0x10\n 22178: a0 = a0 << 0x18\n 22181: a0 = a0 | s1\n 22184: a0 = a0 | a2\n 22187: a2 = 0x100000000000000\n 22197: a2 = t1 ^ a2\n 22200: a2 = t0 | a2\n 22203: a0 = a0 | a1\n 22206: a0 = a0 << 0x20\n 22209: a3 = a3 | a4\n 22212: a0 = a0 | a3\n 22215: a0 = a0 | a2\n 22218: jump @395 if a0 != 0\n      : @361 (gas: 8)\n 22222: sp = s0 + 0xfffffffffffff800\n 22226: sp = sp + 0xfffffffffffffbe0\n 22230: sp = sp + 0x428\n 22234: ra = u64 [sp + 0x7f0]\n 22238: s0 = u64 [sp + 0x7e8]\n 22242: s1 = u64 [sp + 0x7e0]\n 22246: sp = sp + 0x7f8\n 22250: ret\n      : @362 (gas: 1)\n 22252: ra = 254, jump @55\n      : @363 [@dyn 127] (gas: 1)\n 22258: jump @401 if a0 != 0\n      : @364 (gas: 5)\n 22262: s1 = a4\n 22264: i32 a0 = a4 + 0\n 22266: a1 = 0x20\n 22269: u64 [sp + 0x98] = a0\n 22273: ra = 256, jump @0\n      : @365 [@dyn 128] (gas: 50)\n 22279: u8 [a0 + 31] = 0\n 22282: u8 [a0 + 30] = 0\n 22285: u8 [a0 + 29] = 0\n 22288: u8 [a0 + 28] = 0\n 22291: u8 [a0 + 27] = 0\n 22294: u8 [a0 + 26] = 0\n 22297: u8 [a0 + 25] = 0\n 22300: u8 [a0 + 24] = 0\n 22303: u8 [a0 + 23] = 0\n 22306: u8 [a0 + 22] = 0\n 22309: u8 [a0 + 21] = 0\n 22312: u8 [a0 + 20] = 0\n 22315: u8 [a0 + 19] = 0\n 22318: u8 [a0 + 18] = 0\n 22321: u8 [a0 + 17] = 0\n 22324: u8 [a0 + 16] = 0\n 22327: u8 [a0 + 15] = 0\n 22330: u8 [a0 + 14] = 0\n 22333: u8 [a0 + 13] = 0\n 22336: u8 [a0 + 12] = 0\n 22339: u8 [a0 + 11] = 0\n 22342: u8 [a0 + 10] = 0\n 22345: u8 [a0 + 9] = 0\n 22348: u8 [a0 + 8] = 0\n 22351: u8 [a0 + 7] = 0\n 22354: u8 [a0 + 6] = 0\n 22357: u8 [a0 + 5] = 0\n 22360: u8 [a0 + 4] = 0\n 22363: u8 [a0 + 3] = 0xa0\n 22368: u8 [a0 + 2] = 0x79\n 22372: u8 [a0 + 1] = 0xc3\n 22377: u8 [a0 + 0] = 0x8\n 22380: a0 = s1 + 0x4\n 22383: a1 = a0 <u s1\n 22386: s1 = u64 [sp + 0x40]\n 22389: a2 = s1 + a1\n 22392: a3 = a2 <u s1\n 22395: a3 = a1 if a1 == 0\n 22398: a1 = u64 [sp + 0x48]\n 22401: a3 = a3 + a1\n 22404: a1 = a3 <u a1\n 22407: a4 = u64 [sp + 0x50]\n 22410: a4 = a4 + a1\n 22413: u64 [sp + 0x568] = a2\n 22417: u64 [sp + 0x560] = a0\n 22421: u64 [sp + 0x570] = a3\n 22425: a0 = sp + 0x580\n 22429: a1 = sp + 0x560\n 22433: u64 [sp + 0x578] = a4\n 22437: ra = 258, jump @70\n      : @366 [@dyn 129] (gas: 14)\n 22443: a0 = u64 [sp + 0x588]\n 22447: t2 = u64 [sp + 0x598]\n 22451: t0 = u64 [sp + 0x580]\n 22455: a3 = u64 [sp + 0x590]\n 22459: a4 = a0 ^ s1\n 22462: a5 = a0 <u s1\n 22465: t1 = u64 [sp + 0x38]\n 22468: a2 = t0 <u t1\n 22471: a5 = a2 if a4 == 0\n 22474: a1 = u64 [sp + 0x48]\n 22477: a4 = a3 - a1\n 22480: a3 = a3 <u a1\n 22483: a1 = u64 [sp + 0x50]\n 22486: jump @393\n      : @367 (gas: 3)\n 22489: a0 = 0x40\n 22492: a1 = 0x20\n 22495: ra = 260, jump @0\n      : @368 [@dyn 130] (gas: 103)\n 22501: a1 = u8 [a0 + 0x11]\n 22504: a2 = u8 [a0 + 0x10]\n 22507: a3 = u8 [a0 + 0x12]\n 22510: a4 = u8 [a0 + 0x13]\n 22513: a1 = a1 << 0x8\n 22516: a1 = a1 | a2\n 22519: a3 = a3 << 0x10\n 22522: a4 = a4 << 0x18\n 22525: a3 = a3 | a4\n 22528: a1 = a1 | a3\n 22531: a2 = u8 [a0 + 0x15]\n 22534: a3 = u8 [a0 + 0x14]\n 22537: a4 = u8 [a0 + 0x16]\n 22540: a5 = u8 [a0 + 0x17]\n 22543: a2 = a2 << 0x8\n 22546: a2 = a2 | a3\n 22549: a4 = a4 << 0x10\n 22552: a5 = a5 << 0x18\n 22555: a4 = a4 | a5\n 22558: a2 = a2 | a4\n 22561: a2 = a2 << 0x20\n 22564: t0 = a2 | a1\n 22567: a2 = u8 [a0 + 0x1]\n 22570: a3 = u8 [a0]\n 22572: a4 = u8 [a0 + 0x2]\n 22575: a5 = u8 [a0 + 0x3]\n 22578: a2 = a2 << 0x8\n 22581: a2 = a2 | a3\n 22584: a4 = a4 << 0x10\n 22587: a5 = a5 << 0x18\n 22590: a4 = a4 | a5\n 22593: a2 = a2 | a4\n 22596: a3 = u8 [a0 + 0x5]\n 22599: a4 = u8 [a0 + 0x4]\n 22602: a5 = u8 [a0 + 0x6]\n 22605: s1 = u8 [a0 + 0x7]\n 22608: a3 = a3 << 0x8\n 22611: a3 = a3 | a4\n 22614: a5 = a5 << 0x10\n 22617: s1 = s1 << 0x18\n 22620: a5 = a5 | s1\n 22623: a3 = a3 | a5\n 22626: a3 = a3 << 0x20\n 22629: a2 = a2 | a3\n 22632: a3 = u8 [a0 + 0x19]\n 22635: a4 = u8 [a0 + 0x18]\n 22638: a5 = u8 [a0 + 0x1a]\n 22641: s1 = u8 [a0 + 0x1b]\n 22644: a3 = a3 << 0x8\n 22647: a3 = a3 | a4\n 22650: a5 = a5 << 0x10\n 22653: s1 = s1 << 0x18\n 22656: a5 = a5 | s1\n 22659: a3 = a3 | a5\n 22662: a4 = u8 [a0 + 0x1d]\n 22665: a5 = u8 [a0 + 0x1c]\n 22668: s1 = u8 [a0 + 0x1e]\n 22671: a1 = u8 [a0 + 0x1f]\n 22674: a4 = a4 << 0x8\n 22677: a4 = a4 | a5\n 22680: s1 = s1 << 0x10\n 22683: a1 = a1 << 0x18\n 22686: a1 = a1 | s1\n 22689: a1 = a1 | a4\n 22692: a1 = a1 << 0x20\n 22695: a3 = a3 | a1\n 22698: a1 = u8 [a0 + 0x9]\n 22701: a4 = u8 [a0 + 0x8]\n 22704: a5 = u8 [a0 + 0xa]\n 22707: s1 = u8 [a0 + 0xb]\n 22710: a1 = a1 << 0x8\n 22713: a1 = a1 | a4\n 22716: a5 = a5 << 0x10\n 22719: s1 = s1 << 0x18\n 22722: a5 = a5 | s1\n 22725: a1 = a1 | a5\n 22728: a4 = u8 [a0 + 0xd]\n 22731: a5 = u8 [a0 + 0xc]\n 22734: s1 = u8 [a0 + 0xe]\n 22737: a0 = u8 [a0 + 0xf]\n 22740: a4 = a4 << 0x8\n 22743: a4 = a4 | a5\n 22746: s1 = s1 << 0x10\n 22749: a0 = a0 << 0x18\n 22752: a0 = a0 | s1\n 22755: a0 = a0 | a4\n 22758: a0 = a0 << 0x20\n 22761: a0 = a0 | a1\n 22764: s1 = reverse a0\n 22766: a1 = reverse a3\n 22768: a2 = reverse a2\n 22770: a0 = reverse t0\n 22772: u64 [sp + 0x98] = a0\n 22776: u64 [sp + 0x90] = a2\n 22780: a0 = a0 | a2\n 22783: a2 = a1\n 22785: a1 = a1 | s1\n 22788: a1 = a1 | a0\n 22791: a1 = a1 >> 0x20\n 22794: a0 = a0 | s1\n 22797: a0 = a0 << 0x20\n 22800: a0 = a0 | a1\n 22803: jump @401 if a0 != 0\n      : @369 (gas: 5)\n 22807: u64 [sp + 0x88] = a2\n 22811: i32 a0 = a2 + 0\n 22813: a1 = 0x20\n 22816: u64 [sp + 0x80] = a0\n 22820: ra = 262, jump @0\n      : @370 [@dyn 131] (gas: 50)\n 22826: u8 [a0 + 31] = 0\n 22829: u8 [a0 + 30] = 0\n 22832: u8 [a0 + 29] = 0\n 22835: u8 [a0 + 28] = 0\n 22838: u8 [a0 + 27] = 0\n 22841: u8 [a0 + 26] = 0\n 22844: u8 [a0 + 25] = 0\n 22847: u8 [a0 + 24] = 0\n 22850: u8 [a0 + 23] = 0\n 22853: u8 [a0 + 22] = 0\n 22856: u8 [a0 + 21] = 0\n 22859: u8 [a0 + 20] = 0\n 22862: u8 [a0 + 19] = 0\n 22865: u8 [a0 + 18] = 0\n 22868: u8 [a0 + 17] = 0\n 22871: u8 [a0 + 16] = 0\n 22874: u8 [a0 + 15] = 0\n 22877: u8 [a0 + 14] = 0\n 22880: u8 [a0 + 13] = 0\n 22883: u8 [a0 + 12] = 0\n 22886: u8 [a0 + 11] = 0\n 22889: u8 [a0 + 10] = 0\n 22892: u8 [a0 + 9] = 0\n 22895: u8 [a0 + 8] = 0\n 22898: u8 [a0 + 7] = 0\n 22901: u8 [a0 + 6] = 0\n 22904: u8 [a0 + 5] = 0\n 22907: u8 [a0 + 4] = 0\n 22910: u8 [a0 + 3] = 0xa0\n 22915: u8 [a0 + 2] = 0x79\n 22919: u8 [a0 + 1] = 0xc3\n 22924: u8 [a0 + 0] = 0x8\n 22927: a1 = u64 [sp + 0x88]\n 22931: a0 = a1 + 0x4\n 22934: a1 = a0 <u a1\n 22937: a3 = u64 [sp + 0x98]\n 22941: a2 = a3 + a1\n 22944: a3 = a2 <u a3\n 22947: a3 = a1 if a1 == 0\n 22950: a3 = a3 + s1\n 22953: a1 = a3 <u s1\n 22956: a4 = u64 [sp + 0x90]\n 22960: a4 = a4 + a1\n 22963: u64 [sp + 0x528] = a2\n 22967: u64 [sp + 0x520] = a0\n 22971: u64 [sp + 0x530] = a3\n 22975: a0 = sp + 0x540\n 22979: a1 = sp + 0x520\n 22983: u64 [sp + 0x538] = a4\n 22987: ra = 264, jump @78\n      : @371 [@dyn 132] (gas: 5)\n 22993: a0 = u64 [sp + 0x548]\n 22997: t0 = u64 [sp + 0x558]\n 23001: t1 = u64 [sp + 0x540]\n 23005: a3 = u64 [sp + 0x550]\n 23009: jump @400\n      : @372 (gas: 8)\n 23012: a0 = a4 | a3\n 23015: a1 = a1 | a2\n 23018: a0 = a0 | a1\n 23021: a0 = a0 >> 0x20\n 23024: a1 = a1 | a3\n 23027: a1 = a1 << 0x20\n 23030: a0 = a0 | a1\n 23033: jump @401 if a0 != 0\n      : @373 (gas: 5)\n 23037: s1 = a4\n 23039: i32 a0 = a4 + 0\n 23041: a1 = 0x20\n 23044: u64 [sp + 0x98] = a0\n 23048: ra = 266, jump @0\n      : @374 [@dyn 133] (gas: 50)\n 23054: u8 [a0 + 31] = 0\n 23057: u8 [a0 + 30] = 0\n 23060: u8 [a0 + 29] = 0\n 23063: u8 [a0 + 28] = 0\n 23066: u8 [a0 + 27] = 0\n 23069: u8 [a0 + 26] = 0\n 23072: u8 [a0 + 25] = 0\n 23075: u8 [a0 + 24] = 0\n 23078: u8 [a0 + 23] = 0\n 23081: u8 [a0 + 22] = 0\n 23084: u8 [a0 + 21] = 0\n 23087: u8 [a0 + 20] = 0\n 23090: u8 [a0 + 19] = 0\n 23093: u8 [a0 + 18] = 0\n 23096: u8 [a0 + 17] = 0\n 23099: u8 [a0 + 16] = 0\n 23102: u8 [a0 + 15] = 0\n 23105: u8 [a0 + 14] = 0\n 23108: u8 [a0 + 13] = 0\n 23111: u8 [a0 + 12] = 0\n 23114: u8 [a0 + 11] = 0\n 23117: u8 [a0 + 10] = 0\n 23120: u8 [a0 + 9] = 0\n 23123: u8 [a0 + 8] = 0\n 23126: u8 [a0 + 7] = 0\n 23129: u8 [a0 + 6] = 0\n 23132: u8 [a0 + 5] = 0\n 23135: u8 [a0 + 4] = 0\n 23138: u8 [a0 + 3] = 0xa0\n 23143: u8 [a0 + 2] = 0x79\n 23147: u8 [a0 + 1] = 0xc3\n 23152: u8 [a0 + 0] = 0x8\n 23155: a0 = s1 + 0x4\n 23158: a1 = a0 <u s1\n 23161: s1 = u64 [sp + 0x38]\n 23164: a2 = s1 + a1\n 23167: a3 = a2 <u s1\n 23170: a3 = a1 if a1 == 0\n 23173: a1 = u64 [sp + 0x40]\n 23176: a3 = a3 + a1\n 23179: a1 = a3 <u a1\n 23182: a4 = u64 [sp + 0x48]\n 23185: a4 = a4 + a1\n 23188: u64 [sp + 0x4e8] = a2\n 23192: u64 [sp + 0x4e0] = a0\n 23196: u64 [sp + 0x4f0] = a3\n 23200: a0 = sp + 0x500\n 23204: a1 = sp + 0x4e0\n 23208: u64 [sp + 0x4f8] = a4\n 23212: ra = 268, jump @86\n      : @375 [@dyn 134] (gas: 5)\n 23218: a0 = u64 [sp + 0x508]\n 23222: t2 = u64 [sp + 0x518]\n 23226: t0 = u64 [sp + 0x500]\n 23230: a3 = u64 [sp + 0x510]\n 23234: jump @384\n      : @376 (gas: 1)\n 23237: jump @401 if a0 != 0\n      : @377 (gas: 5)\n 23241: s1 = a4\n 23243: i32 a0 = a4 + 0\n 23245: a1 = 0x20\n 23248: u64 [sp + 0x98] = a0\n 23252: ra = 270, jump @0\n      : @378 [@dyn 135] (gas: 50)\n 23258: u8 [a0 + 31] = 0\n 23261: u8 [a0 + 30] = 0\n 23264: u8 [a0 + 29] = 0\n 23267: u8 [a0 + 28] = 0\n 23270: u8 [a0 + 27] = 0\n 23273: u8 [a0 + 26] = 0\n 23276: u8 [a0 + 25] = 0\n 23279: u8 [a0 + 24] = 0\n 23282: u8 [a0 + 23] = 0\n 23285: u8 [a0 + 22] = 0\n 23288: u8 [a0 + 21] = 0\n 23291: u8 [a0 + 20] = 0\n 23294: u8 [a0 + 19] = 0\n 23297: u8 [a0 + 18] = 0\n 23300: u8 [a0 + 17] = 0\n 23303: u8 [a0 + 16] = 0\n 23306: u8 [a0 + 15] = 0\n 23309: u8 [a0 + 14] = 0\n 23312: u8 [a0 + 13] = 0\n 23315: u8 [a0 + 12] = 0\n 23318: u8 [a0 + 11] = 0\n 23321: u8 [a0 + 10] = 0\n 23324: u8 [a0 + 9] = 0\n 23327: u8 [a0 + 8] = 0\n 23330: u8 [a0 + 7] = 0\n 23333: u8 [a0 + 6] = 0\n 23336: u8 [a0 + 5] = 0\n 23339: u8 [a0 + 4] = 0\n 23342: u8 [a0 + 3] = 0xa0\n 23347: u8 [a0 + 2] = 0x79\n 23351: u8 [a0 + 1] = 0xc3\n 23356: u8 [a0 + 0] = 0x8\n 23359: a0 = s1 + 0x4\n 23362: a1 = a0 <u s1\n 23365: s1 = u64 [sp + 0x38]\n 23368: a2 = s1 + a1\n 23371: a3 = a2 <u s1\n 23374: a3 = a1 if a1 == 0\n 23377: a1 = u64 [sp + 0x40]\n 23380: a3 = a3 + a1\n 23383: a1 = a3 <u a1\n 23386: a4 = u64 [sp + 0x48]\n 23389: a4 = a4 + a1\n 23392: u64 [sp + 0x4a8] = a2\n 23396: u64 [sp + 0x4a0] = a0\n 23400: u64 [sp + 0x4b0] = a3\n 23404: a0 = sp + 0x4c0\n 23408: a1 = sp + 0x4a0\n 23412: u64 [sp + 0x4b8] = a4\n 23416: ra = 272, jump @96\n      : @379 [@dyn 136] (gas: 5)\n 23422: a0 = u64 [sp + 0x4c8]\n 23426: t2 = u64 [sp + 0x4d8]\n 23430: t0 = u64 [sp + 0x4c0]\n 23434: a3 = u64 [sp + 0x4d0]\n 23438: jump @384\n      : @380 (gas: 8)\n 23441: a0 = a4 | a3\n 23444: a1 = a1 | a2\n 23447: a0 = a0 | a1\n 23450: a0 = a0 >> 0x20\n 23453: a1 = a1 | a3\n 23456: a1 = a1 << 0x20\n 23459: a0 = a0 | a1\n 23462: jump @401 if a0 != 0\n      : @381 (gas: 5)\n 23466: s1 = a4\n 23468: i32 a0 = a4 + 0\n 23470: a1 = 0x20\n 23473: u64 [sp + 0x98] = a0\n 23477: ra = 274, jump @0\n      : @382 [@dyn 137] (gas: 50)\n 23483: u8 [a0 + 31] = 0\n 23486: u8 [a0 + 30] = 0\n 23489: u8 [a0 + 29] = 0\n 23492: u8 [a0 + 28] = 0\n 23495: u8 [a0 + 27] = 0\n 23498: u8 [a0 + 26] = 0\n 23501: u8 [a0 + 25] = 0\n 23504: u8 [a0 + 24] = 0\n 23507: u8 [a0 + 23] = 0\n 23510: u8 [a0 + 22] = 0\n 23513: u8 [a0 + 21] = 0\n 23516: u8 [a0 + 20] = 0\n 23519: u8 [a0 + 19] = 0\n 23522: u8 [a0 + 18] = 0\n 23525: u8 [a0 + 17] = 0\n 23528: u8 [a0 + 16] = 0\n 23531: u8 [a0 + 15] = 0\n 23534: u8 [a0 + 14] = 0\n 23537: u8 [a0 + 13] = 0\n 23540: u8 [a0 + 12] = 0\n 23543: u8 [a0 + 11] = 0\n 23546: u8 [a0 + 10] = 0\n 23549: u8 [a0 + 9] = 0\n 23552: u8 [a0 + 8] = 0\n 23555: u8 [a0 + 7] = 0\n 23558: u8 [a0 + 6] = 0\n 23561: u8 [a0 + 5] = 0\n 23564: u8 [a0 + 4] = 0\n 23567: u8 [a0 + 3] = 0xa0\n 23572: u8 [a0 + 2] = 0x79\n 23576: u8 [a0 + 1] = 0xc3\n 23581: u8 [a0 + 0] = 0x8\n 23584: a0 = s1 + 0x4\n 23587: a1 = a0 <u s1\n 23590: s1 = u64 [sp + 0x38]\n 23593: a2 = s1 + a1\n 23596: a3 = a2 <u s1\n 23599: a3 = a1 if a1 == 0\n 23602: a1 = u64 [sp + 0x40]\n 23605: a3 = a3 + a1\n 23608: a1 = a3 <u a1\n 23611: a4 = u64 [sp + 0x48]\n 23614: a4 = a4 + a1\n 23617: u64 [sp + 0x468] = a2\n 23621: u64 [sp + 0x460] = a0\n 23625: u64 [sp + 0x470] = a3\n 23629: a0 = sp + 0x480\n 23633: a1 = sp + 0x460\n 23637: u64 [sp + 0x478] = a4\n 23641: ra = 276, jump @104\n      : @383 [@dyn 138] (gas: 5)\n 23647: a0 = u64 [sp + 0x488]\n 23651: t2 = u64 [sp + 0x498]\n 23655: t0 = u64 [sp + 0x480]\n 23659: a3 = u64 [sp + 0x490]\n 23663: fallthrough\n      : @384 (gas: 10)\n 23664: a4 = a0 ^ s1\n 23667: a5 = a0 <u s1\n 23670: t1 = u64 [sp + 0x30]\n 23673: a2 = t0 <u t1\n 23676: a5 = a2 if a4 == 0\n 23679: a1 = u64 [sp + 0x40]\n 23682: a4 = a3 - a1\n 23685: a3 = a3 <u a1\n 23688: a1 = u64 [sp + 0x48]\n 23691: jump @393\n      : @385 (gas: 1)\n 23694: jump @401 if a0 != 0\n      : @386 (gas: 5)\n 23698: s1 = a2\n 23700: i32 a0 = a2 + 0\n 23702: a1 = 0x20\n 23705: u64 [sp + 0x98] = a0\n 23709: ra = 278, jump @0\n      : @387 [@dyn 139] (gas: 50)\n 23715: u8 [a0 + 31] = 0\n 23718: u8 [a0 + 30] = 0\n 23721: u8 [a0 + 29] = 0\n 23724: u8 [a0 + 28] = 0\n 23727: u8 [a0 + 27] = 0\n 23730: u8 [a0 + 26] = 0\n 23733: u8 [a0 + 25] = 0\n 23736: u8 [a0 + 24] = 0\n 23739: u8 [a0 + 23] = 0\n 23742: u8 [a0 + 22] = 0\n 23745: u8 [a0 + 21] = 0\n 23748: u8 [a0 + 20] = 0\n 23751: u8 [a0 + 19] = 0\n 23754: u8 [a0 + 18] = 0\n 23757: u8 [a0 + 17] = 0\n 23760: u8 [a0 + 16] = 0\n 23763: u8 [a0 + 15] = 0\n 23766: u8 [a0 + 14] = 0\n 23769: u8 [a0 + 13] = 0\n 23772: u8 [a0 + 12] = 0\n 23775: u8 [a0 + 11] = 0\n 23778: u8 [a0 + 10] = 0\n 23781: u8 [a0 + 9] = 0\n 23784: u8 [a0 + 8] = 0\n 23787: u8 [a0 + 7] = 0\n 23790: u8 [a0 + 6] = 0\n 23793: u8 [a0 + 5] = 0\n 23796: u8 [a0 + 4] = 0\n 23799: u8 [a0 + 3] = 0xa0\n 23804: u8 [a0 + 2] = 0x79\n 23808: u8 [a0 + 1] = 0xc3\n 23813: u8 [a0 + 0] = 0x8\n 23816: a0 = s1 + 0x4\n 23819: a1 = a0 <u s1\n 23822: s1 = u64 [sp + 0x40]\n 23825: a2 = s1 + a1\n 23828: a3 = a2 <u s1\n 23831: a3 = a1 if a1 == 0\n 23834: a1 = u64 [sp + 0x48]\n 23837: a3 = a3 + a1\n 23840: a1 = a3 <u a1\n 23843: a4 = u64 [sp + 0x30]\n 23846: a4 = a4 + a1\n 23849: u64 [sp + 0x428] = a2\n 23853: u64 [sp + 0x420] = a0\n 23857: u64 [sp + 0x430] = a3\n 23861: a0 = sp + 0x440\n 23865: a1 = sp + 0x420\n 23869: u64 [sp + 0x438] = a4\n 23873: ra = 280, jump @114\n      : @388 [@dyn 140] (gas: 14)\n 23879: a0 = u64 [sp + 0x448]\n 23883: t2 = u64 [sp + 0x458]\n 23887: t0 = u64 [sp + 0x440]\n 23891: a3 = u64 [sp + 0x450]\n 23895: a4 = a0 ^ s1\n 23898: a5 = a0 <u s1\n 23901: t1 = u64 [sp + 0x38]\n 23904: a2 = t0 <u t1\n 23907: a5 = a2 if a4 == 0\n 23910: a1 = u64 [sp + 0x48]\n 23913: a4 = a3 - a1\n 23916: a3 = a3 <u a1\n 23919: a1 = u64 [sp + 0x30]\n 23922: jump @393\n      : @389 (gas: 8)\n 23925: a0 = a4 | a3\n 23928: a1 = a1 | a2\n 23931: a0 = a0 | a1\n 23934: a0 = a0 >> 0x20\n 23937: a1 = a1 | a3\n 23940: a1 = a1 << 0x20\n 23943: a0 = a0 | a1\n 23946: jump @401 if a0 != 0\n      : @390 (gas: 5)\n 23950: s1 = a4\n 23952: i32 a0 = a4 + 0\n 23954: a1 = 0x20\n 23957: u64 [sp + 0x98] = a0\n 23961: ra = 282, jump @0\n      : @391 [@dyn 141] (gas: 50)\n 23967: u8 [a0 + 31] = 0\n 23970: u8 [a0 + 30] = 0\n 23973: u8 [a0 + 29] = 0\n 23976: u8 [a0 + 28] = 0\n 23979: u8 [a0 + 27] = 0\n 23982: u8 [a0 + 26] = 0\n 23985: u8 [a0 + 25] = 0\n 23988: u8 [a0 + 24] = 0\n 23991: u8 [a0 + 23] = 0\n 23994: u8 [a0 + 22] = 0\n 23997: u8 [a0 + 21] = 0\n 24000: u8 [a0 + 20] = 0\n 24003: u8 [a0 + 19] = 0\n 24006: u8 [a0 + 18] = 0\n 24009: u8 [a0 + 17] = 0\n 24012: u8 [a0 + 16] = 0\n 24015: u8 [a0 + 15] = 0\n 24018: u8 [a0 + 14] = 0\n 24021: u8 [a0 + 13] = 0\n 24024: u8 [a0 + 12] = 0\n 24027: u8 [a0 + 11] = 0\n 24030: u8 [a0 + 10] = 0\n 24033: u8 [a0 + 9] = 0\n 24036: u8 [a0 + 8] = 0\n 24039: u8 [a0 + 7] = 0\n 24042: u8 [a0 + 6] = 0\n 24045: u8 [a0 + 5] = 0\n 24048: u8 [a0 + 4] = 0\n 24051: u8 [a0 + 3] = 0xa0\n 24056: u8 [a0 + 2] = 0x79\n 24060: u8 [a0 + 1] = 0xc3\n 24065: u8 [a0 + 0] = 0x8\n 24068: a0 = s1 + 0x4\n 24071: a1 = a0 <u s1\n 24074: s1 = u64 [sp + 0x58]\n 24077: a2 = s1 + a1\n 24080: a3 = a2 <u s1\n 24083: a3 = a1 if a1 == 0\n 24086: a1 = u64 [sp + 0x60]\n 24089: a3 = a3 + a1\n 24092: a1 = a3 <u a1\n 24095: a4 = u64 [sp + 0x68]\n 24098: a4 = a4 + a1\n 24101: u64 [sp + 0x3e8] = a2\n 24105: u64 [sp + 0x3e0] = a0\n 24109: u64 [sp + 0x3f0] = a3\n 24113: a0 = sp + 0x400\n 24117: a1 = sp + 0x3e0\n 24121: u64 [sp + 0x3f8] = a4\n 24125: ra = 284, jump @122\n      : @392 [@dyn 142] (gas: 14)\n 24131: a0 = u64 [sp + 0x408]\n 24135: t2 = u64 [sp + 0x418]\n 24139: t0 = u64 [sp + 0x400]\n 24143: a3 = u64 [sp + 0x410]\n 24147: a4 = a0 ^ s1\n 24150: a5 = a0 <u s1\n 24153: t1 = u64 [sp + 0x50]\n 24156: a2 = t0 <u t1\n 24159: a5 = a2 if a4 == 0\n 24162: a1 = u64 [sp + 0x60]\n 24165: a4 = a3 - a1\n 24168: a3 = a3 <u a1\n 24171: a1 = u64 [sp + 0x68]\n 24174: fallthrough\n      : @393 (gas: 16)\n 24175: a1 = t2 - a1\n 24178: a1 = a1 - a3\n 24181: a3 = a4 <u a5\n 24184: a1 = a1 - a3\n 24187: a4 = a4 - a5\n 24190: a0 = a0 - s1\n 24193: a3 = a0 - a2\n 24196: a0 = t0 - t1\n 24199: a1 = a1 | a3\n 24202: a2 = a0 | a4\n 24205: a2 = a2 | a1\n 24208: a1 = a1 | a4\n 24211: a2 = a2 >> 0x20\n 24214: a1 = a1 << 0x20\n 24217: a1 = a1 | a2\n 24220: jump @401 if a1 != 0\n      : @394 (gas: 5)\n 24224: i32 s1 = a0 + 0\n 24226: a0 = u64 [sp + 0x98]\n 24230: a1 = s1\n 24232: ra = 0x142\n 24236: jump @0\n      : @395 (gas: 3)\n 24239: a0 = 0x40\n 24242: a1 = 0x20\n 24245: ra = 286, jump @0\n      : @396 [@dyn 143] (gas: 103)\n 24251: a1 = u8 [a0 + 0x11]\n 24254: a2 = u8 [a0 + 0x10]\n 24257: a3 = u8 [a0 + 0x12]\n 24260: a4 = u8 [a0 + 0x13]\n 24263: a1 = a1 << 0x8\n 24266: a1 = a1 | a2\n 24269: a3 = a3 << 0x10\n 24272: a4 = a4 << 0x18\n 24275: a3 = a3 | a4\n 24278: a1 = a1 | a3\n 24281: a2 = u8 [a0 + 0x15]\n 24284: a3 = u8 [a0 + 0x14]\n 24287: a4 = u8 [a0 + 0x16]\n 24290: a5 = u8 [a0 + 0x17]\n 24293: a2 = a2 << 0x8\n 24296: a2 = a2 | a3\n 24299: a4 = a4 << 0x10\n 24302: a5 = a5 << 0x18\n 24305: a4 = a4 | a5\n 24308: a2 = a2 | a4\n 24311: a2 = a2 << 0x20\n 24314: t0 = a2 | a1\n 24317: a2 = u8 [a0 + 0x1]\n 24320: a3 = u8 [a0]\n 24322: a4 = u8 [a0 + 0x2]\n 24325: a5 = u8 [a0 + 0x3]\n 24328: a2 = a2 << 0x8\n 24331: a2 = a2 | a3\n 24334: a4 = a4 << 0x10\n 24337: a5 = a5 << 0x18\n 24340: a4 = a4 | a5\n 24343: a2 = a2 | a4\n 24346: a3 = u8 [a0 + 0x5]\n 24349: a4 = u8 [a0 + 0x4]\n 24352: a5 = u8 [a0 + 0x6]\n 24355: s1 = u8 [a0 + 0x7]\n 24358: a3 = a3 << 0x8\n 24361: a3 = a3 | a4\n 24364: a5 = a5 << 0x10\n 24367: s1 = s1 << 0x18\n 24370: a5 = a5 | s1\n 24373: a3 = a3 | a5\n 24376: a3 = a3 << 0x20\n 24379: a2 = a2 | a3\n 24382: a3 = u8 [a0 + 0x19]\n 24385: a4 = u8 [a0 + 0x18]\n 24388: a5 = u8 [a0 + 0x1a]\n 24391: s1 = u8 [a0 + 0x1b]\n 24394: a3 = a3 << 0x8\n 24397: a3 = a3 | a4\n 24400: a5 = a5 << 0x10\n 24403: s1 = s1 << 0x18\n 24406: a5 = a5 | s1\n 24409: a3 = a3 | a5\n 24412: a4 = u8 [a0 + 0x1d]\n 24415: a5 = u8 [a0 + 0x1c]\n 24418: s1 = u8 [a0 + 0x1e]\n 24421: a1 = u8 [a0 + 0x1f]\n 24424: a4 = a4 << 0x8\n 24427: a4 = a4 | a5\n 24430: s1 = s1 << 0x10\n 24433: a1 = a1 << 0x18\n 24436: a1 = a1 | s1\n 24439: a1 = a1 | a4\n 24442: a1 = a1 << 0x20\n 24445: a3 = a3 | a1\n 24448: a1 = u8 [a0 + 0x9]\n 24451: a4 = u8 [a0 + 0x8]\n 24454: a5 = u8 [a0 + 0xa]\n 24457: s1 = u8 [a0 + 0xb]\n 24460: a1 = a1 << 0x8\n 24463: a1 = a1 | a4\n 24466: a5 = a5 << 0x10\n 24469: s1 = s1 << 0x18\n 24472: a5 = a5 | s1\n 24475: a1 = a1 | a5\n 24478: a4 = u8 [a0 + 0xd]\n 24481: a5 = u8 [a0 + 0xc]\n 24484: s1 = u8 [a0 + 0xe]\n 24487: a0 = u8 [a0 + 0xf]\n 24490: a4 = a4 << 0x8\n 24493: a4 = a4 | a5\n 24496: s1 = s1 << 0x10\n 24499: a0 = a0 << 0x18\n 24502: a0 = a0 | s1\n 24505: a0 = a0 | a4\n 24508: a0 = a0 << 0x20\n 24511: a0 = a0 | a1\n 24514: s1 = reverse a0\n 24516: a1 = reverse a3\n 24518: a2 = reverse a2\n 24520: a0 = reverse t0\n 24522: u64 [sp + 0x98] = a0\n 24526: u64 [sp + 0x90] = a2\n 24530: a0 = a0 | a2\n 24533: a2 = a1\n 24535: a1 = a1 | s1\n 24538: a1 = a1 | a0\n 24541: a1 = a1 >> 0x20\n 24544: a0 = a0 | s1\n 24547: a0 = a0 << 0x20\n 24550: a0 = a0 | a1\n 24553: jump @401 if a0 != 0\n      : @397 (gas: 5)\n 24557: u64 [sp + 0x88] = a2\n 24561: i32 a0 = a2 + 0\n 24563: a1 = 0x20\n 24566: u64 [sp + 0x80] = a0\n 24570: ra = 288, jump @0\n      : @398 [@dyn 144] (gas: 50)\n 24576: u8 [a0 + 31] = 0\n 24579: u8 [a0 + 30] = 0\n 24582: u8 [a0 + 29] = 0\n 24585: u8 [a0 + 28] = 0\n 24588: u8 [a0 + 27] = 0\n 24591: u8 [a0 + 26] = 0\n 24594: u8 [a0 + 25] = 0\n 24597: u8 [a0 + 24] = 0\n 24600: u8 [a0 + 23] = 0\n 24603: u8 [a0 + 22] = 0\n 24606: u8 [a0 + 21] = 0\n 24609: u8 [a0 + 20] = 0\n 24612: u8 [a0 + 19] = 0\n 24615: u8 [a0 + 18] = 0\n 24618: u8 [a0 + 17] = 0\n 24621: u8 [a0 + 16] = 0\n 24624: u8 [a0 + 15] = 0\n 24627: u8 [a0 + 14] = 0\n 24630: u8 [a0 + 13] = 0\n 24633: u8 [a0 + 12] = 0\n 24636: u8 [a0 + 11] = 0\n 24639: u8 [a0 + 10] = 0\n 24642: u8 [a0 + 9] = 0\n 24645: u8 [a0 + 8] = 0\n 24648: u8 [a0 + 7] = 0\n 24651: u8 [a0 + 6] = 0\n 24654: u8 [a0 + 5] = 0\n 24657: u8 [a0 + 4] = 0\n 24660: u8 [a0 + 3] = 0xa0\n 24665: u8 [a0 + 2] = 0x79\n 24669: u8 [a0 + 1] = 0xc3\n 24674: u8 [a0 + 0] = 0x8\n 24677: a1 = u64 [sp + 0x88]\n 24681: a0 = a1 + 0x4\n 24684: a1 = a0 <u a1\n 24687: a3 = u64 [sp + 0x98]\n 24691: a2 = a3 + a1\n 24694: a3 = a2 <u a3\n 24697: a3 = a1 if a1 == 0\n 24700: a3 = a3 + s1\n 24703: a1 = a3 <u s1\n 24706: a4 = u64 [sp + 0x90]\n 24710: a4 = a4 + a1\n 24713: u64 [sp + 0x3a8] = a2\n 24717: u64 [sp + 0x3a0] = a0\n 24721: u64 [sp + 0x3b0] = a3\n 24725: a0 = sp + 0x3c0\n 24729: a1 = sp + 0x3a0\n 24733: u64 [sp + 0x3b8] = a4\n 24737: ra = 290, jump @114\n      : @399 [@dyn 145] (gas: 5)\n 24743: a0 = u64 [sp + 0x3c8]\n 24747: t0 = u64 [sp + 0x3d8]\n 24751: t1 = u64 [sp + 0x3c0]\n 24755: a3 = u64 [sp + 0x3d0]\n 24759: fallthrough\n      : @400 (gas: 26)\n 24760: a1 = u64 [sp + 0x98]\n 24764: a4 = a0 ^ a1\n 24767: a5 = a0 <u a1\n 24770: t2 = a1\n 24772: a2 = u64 [sp + 0x88]\n 24776: a1 = t1 <u a2\n 24779: a5 = a1 if a4 == 0\n 24782: a4 = a3 - s1\n 24785: a3 = a3 <u s1\n 24788: s1 = u64 [sp + 0x90]\n 24792: s1 = t0 - s1\n 24795: s1 = s1 - a3\n 24798: a3 = a4 <u a5\n 24801: s1 = s1 - a3\n 24804: a4 = a4 - a5\n 24807: a0 = a0 - t2\n 24810: a1 = a0 - a1\n 24813: a0 = t1 - a2\n 24816: a1 = a1 | s1\n 24819: a2 = a0 | a4\n 24822: a2 = a2 | a1\n 24825: a1 = a1 | a4\n 24828: a2 = a2 >> 0x20\n 24831: a1 = a1 << 0x20\n 24834: a1 = a1 | a2\n 24837: jump @431 if a1 == 0\n      : @401 (gas: 1)\n 24841: trap\n      : @402 (gas: 4)\n 24842: a0 = 0\n 24844: a1 = 0\n 24846: ra = 0x124\n 24850: jump @0\n      : @403 (gas: 2)\n 24853: a1 = 0\n 24855: ra = 292, jump @0\n      : @404 [@dyn 146] (gas: 5)\n 24861: i32 a1 = a0 + 0\n 24863: a0 = 0x1\n 24866: a2 = 0\n 24868: ecalli 9 // 'seal_return'\n 24870: fallthrough\n      : @405 (gas: 8)\n 24871: u64 [sp + 208] = 0\n 24875: u64 [sp + 200] = 0\n 24879: u64 [sp + 192] = 0\n 24883: a0 = 0x4e487b7100000000\n 24893: a1 = sp + 0xc0\n 24897: u64 [sp + 0xd8] = a0\n 24901: a0 = 0\n 24903: ra = 294, jump @8\n      : @406 [@dyn 147] (gas: 8)\n 24909: u64 [sp + 184] = 0\n 24913: u64 [sp + 176] = 0\n 24917: u64 [sp + 160] = 0x41\n 24922: a0 = 0x4\n 24925: a1 = sp + 0xa0\n 24929: u64 [sp + 168] = 0\n 24933: ra = 0x13e\n 24937: jump @8\n      : @407 (gas: 8)\n 24940: u64 [sp + 272] = 0\n 24944: u64 [sp + 264] = 0\n 24948: u64 [sp + 256] = 0\n 24952: a0 = 0x4e487b7100000000\n 24962: a1 = sp + 0x100\n 24966: u64 [sp + 0x118] = a0\n 24970: a0 = 0\n 24972: ra = 296, jump @8\n      : @408 [@dyn 148] (gas: 8)\n 24978: u64 [sp + 248] = 0\n 24982: u64 [sp + 240] = 0\n 24986: u64 [sp + 224] = 0x41\n 24991: a0 = 0x4\n 24994: a1 = sp + 0xe0\n 24998: u64 [sp + 232] = 0\n 25002: ra = 0x13e\n 25006: jump @8\n      : @409 (gas: 8)\n 25009: u64 [sp + 336] = 0\n 25013: u64 [sp + 328] = 0\n 25017: u64 [sp + 320] = 0\n 25021: a0 = 0x4e487b7100000000\n 25031: a1 = sp + 0x140\n 25035: u64 [sp + 0x158] = a0\n 25039: a0 = 0\n 25041: ra = 298, jump @8\n      : @410 [@dyn 149] (gas: 8)\n 25047: u64 [sp + 312] = 0\n 25051: u64 [sp + 304] = 0\n 25055: u64 [sp + 288] = 0x41\n 25060: a0 = 0x4\n 25063: a1 = sp + 0x120\n 25067: u64 [sp + 296] = 0\n 25071: ra = 0x13e\n 25075: jump @8\n      : @411 (gas: 8)\n 25078: u64 [sp + 400] = 0\n 25082: u64 [sp + 392] = 0\n 25086: u64 [sp + 384] = 0\n 25090: a0 = 0x4e487b7100000000\n 25100: a1 = sp + 0x180\n 25104: u64 [sp + 0x198] = a0\n 25108: a0 = 0\n 25110: ra = 300, jump @8\n      : @412 [@dyn 150] (gas: 8)\n 25116: u64 [sp + 376] = 0\n 25120: u64 [sp + 368] = 0\n 25124: u64 [sp + 352] = 0x41\n 25129: a0 = 0x4\n 25132: a1 = sp + 0x160\n 25136: u64 [sp + 360] = 0\n 25140: ra = 0x13e\n 25144: jump @8\n      : @413 (gas: 8)\n 25147: u64 [sp + 464] = 0\n 25151: u64 [sp + 456] = 0\n 25155: u64 [sp + 448] = 0\n 25159: a0 = 0x4e487b7100000000\n 25169: a1 = sp + 0x1c0\n 25173: u64 [sp + 0x1d8] = a0\n 25177: a0 = 0\n 25179: ra = 302, jump @8\n      : @414 [@dyn 151] (gas: 8)\n 25185: u64 [sp + 440] = 0\n 25189: u64 [sp + 432] = 0\n 25193: u64 [sp + 416] = 0x41\n 25198: a0 = 0x4\n 25201: a1 = sp + 0x1a0\n 25205: u64 [sp + 424] = 0\n 25209: ra = 0x13e\n 25213: jump @8\n      : @415 (gas: 8)\n 25216: u64 [sp + 528] = 0\n 25220: u64 [sp + 520] = 0\n 25224: u64 [sp + 512] = 0\n 25228: a0 = 0x4e487b7100000000\n 25238: a1 = sp + 0x200\n 25242: u64 [sp + 0x218] = a0\n 25246: a0 = 0\n 25248: ra = 304, jump @8\n      : @416 [@dyn 152] (gas: 8)\n 25254: u64 [sp + 504] = 0\n 25258: u64 [sp + 496] = 0\n 25262: u64 [sp + 480] = 0x41\n 25267: a0 = 0x4\n 25270: a1 = sp + 0x1e0\n 25274: u64 [sp + 488] = 0\n 25278: ra = 0x13e\n 25282: jump @8\n      : @417 (gas: 8)\n 25285: u64 [sp + 592] = 0\n 25289: u64 [sp + 584] = 0\n 25293: u64 [sp + 576] = 0\n 25297: a0 = 0x4e487b7100000000\n 25307: a1 = sp + 0x240\n 25311: u64 [sp + 0x258] = a0\n 25315: a0 = 0\n 25317: ra = 306, jump @8\n      : @418 [@dyn 153] (gas: 8)\n 25323: u64 [sp + 568] = 0\n 25327: u64 [sp + 560] = 0\n 25331: u64 [sp + 544] = 0x41\n 25336: a0 = 0x4\n 25339: a1 = sp + 0x220\n 25343: u64 [sp + 552] = 0\n 25347: ra = 0x13e\n 25351: jump @8\n      : @419 (gas: 8)\n 25354: u64 [sp + 656] = 0\n 25358: u64 [sp + 648] = 0\n 25362: u64 [sp + 640] = 0\n 25366: a0 = 0x4e487b7100000000\n 25376: a1 = sp + 0x280\n 25380: u64 [sp + 0x298] = a0\n 25384: a0 = 0\n 25386: ra = 308, jump @8\n      : @420 [@dyn 154] (gas: 8)\n 25392: u64 [sp + 632] = 0\n 25396: u64 [sp + 624] = 0\n 25400: u64 [sp + 608] = 0x41\n 25405: a0 = 0x4\n 25408: a1 = sp + 0x260\n 25412: u64 [sp + 616] = 0\n 25416: ra = 0x13e\n 25420: jump @8\n      : @421 (gas: 8)\n 25423: u64 [sp + 720] = 0\n 25427: u64 [sp + 712] = 0\n 25431: u64 [sp + 704] = 0\n 25435: a0 = 0x4e487b7100000000\n 25445: a1 = sp + 0x2c0\n 25449: u64 [sp + 0x2d8] = a0\n 25453: a0 = 0\n 25455: ra = 310, jump @8\n      : @422 [@dyn 155] (gas: 8)\n 25461: u64 [sp + 696] = 0\n 25465: u64 [sp + 688] = 0\n 25469: u64 [sp + 672] = 0x41\n 25474: a0 = 0x4\n 25477: a1 = sp + 0x2a0\n 25481: u64 [sp + 680] = 0\n 25485: ra = 0x13e\n 25489: jump @8\n      : @423 (gas: 8)\n 25492: u64 [sp + 784] = 0\n 25496: u64 [sp + 776] = 0\n 25500: u64 [sp + 768] = 0\n 25504: a0 = 0x4e487b7100000000\n 25514: a1 = sp + 0x300\n 25518: u64 [sp + 0x318] = a0\n 25522: a0 = 0\n 25524: ra = 312, jump @8\n      : @424 [@dyn 156] (gas: 8)\n 25530: u64 [sp + 760] = 0\n 25534: u64 [sp + 752] = 0\n 25538: u64 [sp + 736] = 0x41\n 25543: a0 = 0x4\n 25546: a1 = sp + 0x2e0\n 25550: u64 [sp + 744] = 0\n 25554: ra = 0x13e\n 25558: jump @8\n      : @425 (gas: 8)\n 25561: u64 [sp + 848] = 0\n 25565: u64 [sp + 840] = 0\n 25569: u64 [sp + 832] = 0\n 25573: a0 = 0x4e487b7100000000\n 25583: a1 = sp + 0x340\n 25587: u64 [sp + 0x358] = a0\n 25591: a0 = 0\n 25593: ra = 314, jump @8\n      : @426 [@dyn 157] (gas: 8)\n 25599: u64 [sp + 824] = 0\n 25603: u64 [sp + 816] = 0\n 25607: u64 [sp + 800] = 0x41\n 25612: a0 = 0x4\n 25615: a1 = sp + 0x320\n 25619: u64 [sp + 808] = 0\n 25623: ra = 0x13e\n 25627: jump @8\n      : @427 (gas: 8)\n 25630: u64 [sp + 912] = 0\n 25634: u64 [sp + 904] = 0\n 25638: u64 [sp + 896] = 0\n 25642: a0 = 0x4e487b7100000000\n 25652: a1 = sp + 0x380\n 25656: u64 [sp + 0x398] = a0\n 25660: a0 = 0\n 25662: ra = 316, jump @8\n      : @428 [@dyn 158] (gas: 7)\n 25668: u64 [sp + 888] = 0\n 25672: u64 [sp + 880] = 0\n 25676: u64 [sp + 864] = 0x41\n 25681: a0 = 0x4\n 25684: a1 = sp + 0x360\n 25688: u64 [sp + 872] = 0\n 25692: ra = 318, jump @8\n      : @429 [@dyn 159] (gas: 3)\n 25698: a1 = 0x24\n 25701: a0 = 0\n 25703: ra = 320, jump @0\n      : @430 [@dyn 160] (gas: 5)\n 25709: i32 a1 = a0 + 0\n 25711: a0 = 0x1\n 25714: a2 = 0x24\n 25717: ecalli 9 // 'seal_return'\n 25719: fallthrough\n      : @431 (gas: 4)\n 25720: i32 s1 = a0 + 0\n 25722: a0 = u64 [sp + 0x80]\n 25726: a1 = s1\n 25728: ra = 322, jump @0\n      : @432 [@dyn 161] (gas: 7)\n 25734: i32 a1 = a0 + 0\n 25736: a0 = 0x1\n 25739: a2 = s1\n 25741: ecalli 9 // 'seal_return'\n 25743: a0 = 0\n 25745: ra = 0x144\n 25749: jump @10\n      : @433 [export #0: 'call'] (gas: 2)\n 25752: a0 = 0\n 25754: ra = 324, jump @10\n      : @434 [@dyn 162] [export #1: 'deploy'] (gas: 2)\n 25760: a0 = 0x1\n 25763: ra = 326, jump @10\n      : @435 [@dyn 163] (gas: 24)\n 25769: sp = sp + 0xffffffffffffffb0\n 25772: u64 [sp + 0x48] = ra\n 25775: u64 [sp + 0x40] = s0\n 25778: s0 = sp + 0x50\n 25781: sp = sp & 0xfffffffffffffff0\n 25784: t0 = u64 [a0]\n 25786: t1 = u64 [a0 + 0x8]\n 25789: a4 = u64 [a0 + 0x10]\n 25792: a0 = u64 [a0 + 0x18]\n 25795: a5 = u64 [a1]\n 25797: a2 = u64 [a1 + 0x8]\n 25800: a3 = u64 [a1 + 0x10]\n 25803: a1 = u64 [a1 + 0x18]\n 25806: u64 [sp + 0x18] = a1\n 25809: u64 [sp + 0x10] = a3\n 25812: u64 [sp + 0x8] = a2\n 25815: u64 [sp] = a5\n 25817: u64 [sp + 0x38] = a0\n 25820: u64 [sp + 0x30] = a4\n 25823: u64 [sp + 0x28] = t1\n 25826: a0 = sp + 0x20\n 25829: a1 = sp\n 25831: u64 [sp + 0x20] = t0\n 25834: ra = 328, jump @36\n      : @436 [@dyn 164] (gas: 5)\n 25840: sp = s0 + 0xffffffffffffffb0\n 25843: ra = u64 [sp + 0x48]\n 25846: s0 = u64 [sp + 0x40]\n 25849: sp = sp + 0x50\n 25852: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"testDelegateCall()": "e1e36341"
						}
					},
					"irOptimized": "/// @use-src 2:\"homework3/TestContract.sol\"\nobject \"TestContract_218\" {\n    code {\n        {\n            /// @src 2:162:1494  \"contract TestContract {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"TestContract_218_deployed\"), datasize(\"TestContract_218_deployed\"))\n            return(_1, datasize(\"TestContract_218_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 2:\"homework3/TestContract.sol\"\n    object \"TestContract_218_deployed\" {\n        code {\n            {\n                /// @src 2:162:1494  \"contract TestContract {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0xe1e36341 {\n                        external_fun_testDelegateCall()\n                    }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_testDelegateCall()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                fun_testDelegateCall()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_contract_LogicContract_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(224, value) }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_uint256_fromMemory(offset, end) -> value\n            {\n                value := mload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_uint256_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_0_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_041d593c32cd2b320443f5c7cb9e7caeaa29bbb97122725dda379857592393e1(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Logic initial value should be 0\")\n            }\n            function abi_encode_stringliteral_041d(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 31)\n                store_literal_in_memory_041d593c32cd2b320443f5c7cb9e7caeaa29bbb97122725dda379857592393e1(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_041d(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_041d(tail)\n            }\n            function require_helper_stringliteral_041d(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_041d(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_contract_ProxyContract_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function store_literal_in_memory_4378bb9f509aff341a45554817962c3f5dcceb001980b64bd51ecf04151bde17(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Proxy initial value should be 0\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 31)\n                store_literal_in_memory_4378bb9f509aff341a45554817962c3f5dcceb001980b64bd51ecf04151bde17(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function store_literal_in_memory_66f6b1959f9e092725d3d23b94beb208f3b8323292ee94320335641f8b76bfa8(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Logic value should be 1 after in\")\n                mstore(add(memPtr, 32), \"crement\")\n            }\n            function abi_encode_stringliteral_66f6(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 39)\n                store_literal_in_memory_66f6b1959f9e092725d3d23b94beb208f3b8323292ee94320335641f8b76bfa8(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_tuple_stringliteral_66f6(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_66f6(tail)\n            }\n            function require_helper_stringliteral_66f6(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_66f6(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_055cfcc9119bb1dfcbe4509666be02b021b3b51e35015d529512ee3c9178e3b3(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Proxy value should remain 0\")\n            }\n            function abi_encode_stringliteral_055cfcc9119bb1dfcbe4509666be02b021b3b51e35015d529512ee3c9178e3b3(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 27)\n                store_literal_in_memory_055cfcc9119bb1dfcbe4509666be02b021b3b51e35015d529512ee3c9178e3b3(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_055c(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_055cfcc9119bb1dfcbe4509666be02b021b3b51e35015d529512ee3c9178e3b3(tail)\n            }\n            function require_helper_stringliteral_055c(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_055c(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_bool_fromMemory(offset, end) -> value\n            {\n                value := mload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_bool_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function store_literal_in_memory_573a90a4223c58900d2824c5aaafb398c8d51c1092807a1787be88809f78d61f(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Proxy value should be 1 after in\")\n                mstore(add(memPtr, 32), \"crement\")\n            }\n            function abi_encode_stringliteral_573a90a4223c58900d2824c5aaafb398c8d51c1092807a1787be88809f78d61f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 39)\n                store_literal_in_memory_573a90a4223c58900d2824c5aaafb398c8d51c1092807a1787be88809f78d61f(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_573a(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_573a90a4223c58900d2824c5aaafb398c8d51c1092807a1787be88809f78d61f(tail)\n            }\n            function require_helper_stringliteral_573a(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_573a(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_c9683238c2f2f3dafceea3df8726bf1b722e4f80fe6b783795bb5ee13d12b857(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Logic value should remain 1\")\n            }\n            function abi_encode_stringliteral_c968(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 27)\n                store_literal_in_memory_c9683238c2f2f3dafceea3df8726bf1b722e4f80fe6b783795bb5ee13d12b857(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_c968(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_c968(tail)\n            }\n            function require_helper_stringliteral_c968(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_c968(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n            }\n            function abi_encode_rational_by_to_uint256(value, pos)\n            {\n                mstore(pos, convert_rational_by_to_uint256(value))\n            }\n            function abi_encode_rational_by(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_rational_by_to_uint256(value0, add(headStart, 0))\n            }\n            function store_literal_in_memory_946f47b70254a877db49f29a4a9bf89da1e0d5e34bd2cff2b6ed4f601aeebd37(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Proxy value should be 10\")\n            }\n            function abi_encode_stringliteral_946f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 24)\n                store_literal_in_memory_946f47b70254a877db49f29a4a9bf89da1e0d5e34bd2cff2b6ed4f601aeebd37(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_946f(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_946f(tail)\n            }\n            function require_helper_stringliteral_946f(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_946f(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 217 @src 2:224:1491  \"function testDelegateCall() public {...\"\n            function fun_testDelegateCall()\n            {\n                /// @src 2:326:345  \"new LogicContract()\"\n                let _1 := allocate_unbounded()\n                let _2 := add(_1, datasize(\"LogicContract_22\"))\n                if or(gt(_2, 0xffffffffffffffff), lt(_2, _1)) { panic_error_0x41() }\n                datacopy(_1, dataoffset(\"LogicContract_22\"), datasize(\"LogicContract_22\"))\n                _2 := abi_encode_tuple(_2)\n                let expr_114_address := create(0, _1, sub(_2, _1))\n                if iszero(expr_114_address) { revert_forward() }\n                /// @src 2:304:345  \"LogicContract logic = new LogicContract()\"\n                let var_logic_address := expr_114_address\n                /// @src 2:475:480  \"logic\"\n                let _3_address := var_logic_address\n                let expr_124_address := _3_address\n                /// @src 2:467:481  \"address(logic)\"\n                let expr := convert_contract_LogicContract_to_address(expr_124_address)\n                /// @src 2:449:482  \"new ProxyContract(address(logic))\"\n                let _3 := allocate_unbounded()\n                let _4 := add(_3, datasize(\"ProxyContract_101\"))\n                if or(gt(_4, 0xffffffffffffffff), lt(_4, _3)) { panic_error_0x41() }\n                datacopy(_3, dataoffset(\"ProxyContract_101\"), datasize(\"ProxyContract_101\"))\n                _4 := abi_encode_tuple_address(_4, expr)\n                let expr_126_address := create(0, _3, sub(_4, _3))\n                if iszero(expr_126_address) { revert_forward() }\n                /// @src 2:427:482  \"ProxyContract proxy = new ProxyContract(address(logic))\"\n                let var_proxy_address := expr_126_address\n                /// @src 2:545:550  \"logic\"\n                let _6_address := var_logic_address\n                let expr_129_address := _6_address\n                /// @src 2:545:556  \"logic.value\"\n                let expr_130_address := convert_contract_LogicContract_to_address(expr_129_address)\n                let expr_130_functionSelector := 0x3fa4f245\n                /// @src 2:545:558  \"logic.value()\"\n                let _5 := allocate_unbounded()\n                mstore(_5, shift_left(expr_130_functionSelector))\n                let _6 := abi_encode_tuple(add(_5, 4))\n                let _7 := staticcall(gas(), expr_130_address, _5, sub(_6, _5), _5, 32)\n                if iszero(_7) { revert_forward() }\n                let expr_1\n                if _7\n                {\n                    let _8 := 32\n                    if gt(_8, returndatasize()) { _8 := returndatasize() }\n                    finalize_allocation(_5, _8)\n                    expr_1 := abi_decode_uint256_fromMemory(_5, add(_5, _8))\n                }\n                /// @src 2:562:563  \"0\"\n                let expr_2 := 0x00\n                /// @src 2:545:563  \"logic.value() == 0\"\n                let expr_3 := eq(cleanup_uint256(expr_1), convert_rational_0_by_1_to_uint256(expr_2))\n                /// @src 2:537:599  \"require(logic.value() == 0, \\\"Logic initial value should be 0\\\")\"\n                require_helper_stringliteral_041d(expr_3)\n                /// @src 2:618:623  \"proxy\"\n                let _11_address := var_proxy_address\n                let expr_138_address := _11_address\n                /// @src 2:618:629  \"proxy.value\"\n                let expr_139_address := convert_contract_ProxyContract_to_address(expr_138_address)\n                let expr_139_functionSelector := 0x3fa4f245\n                /// @src 2:618:631  \"proxy.value()\"\n                let _9 := allocate_unbounded()\n                mstore(_9, shift_left(expr_139_functionSelector))\n                let _10 := abi_encode_tuple(add(_9, 4))\n                let _11 := staticcall(gas(), expr_139_address, _9, sub(_10, _9), _9, 32)\n                if iszero(_11) { revert_forward() }\n                let expr_4\n                if _11\n                {\n                    let _12 := 32\n                    if gt(_12, returndatasize()) { _12 := returndatasize() }\n                    finalize_allocation(_9, _12)\n                    expr_4 := abi_decode_uint256_fromMemory(_9, add(_9, _12))\n                }\n                /// @src 2:635:636  \"0\"\n                let expr_5 := 0x00\n                /// @src 2:618:636  \"proxy.value() == 0\"\n                let expr_6 := eq(cleanup_uint256(expr_4), convert_rational_0_by_1_to_uint256(expr_5))\n                /// @src 2:610:672  \"require(proxy.value() == 0, \\\"Proxy initial value should be 0\\\")\"\n                require_helper_stringliteral(expr_6)\n                /// @src 2:745:750  \"logic\"\n                let _16_address := var_logic_address\n                let expr_146_address := _16_address\n                /// @src 2:745:760  \"logic.increment\"\n                let expr_148_address := convert_contract_LogicContract_to_address(expr_146_address)\n                let expr_148_functionSelector := 0xd09de08a\n                /// @src 2:745:762  \"logic.increment()\"\n                if iszero(extcodesize(expr_148_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _13 := allocate_unbounded()\n                mstore(_13, shift_left(expr_148_functionSelector))\n                let _14 := abi_encode_tuple(add(_13, 4))\n                let _15 := call(gas(), expr_148_address, 0, _13, sub(_14, _13), _13, 0)\n                if iszero(_15) { revert_forward() }\n                if _15\n                {\n                    let _16 := 0\n                    if gt(_16, returndatasize()) { _16 := returndatasize() }\n                    finalize_allocation(_13, _16)\n                    abi_decode_fromMemory(_13, add(_13, _16))\n                }\n                /// @src 2:781:786  \"logic\"\n                let _21_address := var_logic_address\n                let expr_152_address := _21_address\n                /// @src 2:781:792  \"logic.value\"\n                let expr_153_address := convert_contract_LogicContract_to_address(expr_152_address)\n                let expr_153_functionSelector := 0x3fa4f245\n                /// @src 2:781:794  \"logic.value()\"\n                let _17 := allocate_unbounded()\n                mstore(_17, shift_left(expr_153_functionSelector))\n                let _18 := abi_encode_tuple(add(_17, 4))\n                let _19 := staticcall(gas(), expr_153_address, _17, sub(_18, _17), _17, 32)\n                if iszero(_19) { revert_forward() }\n                let expr_7\n                if _19\n                {\n                    let _20 := 32\n                    if gt(_20, returndatasize()) { _20 := returndatasize() }\n                    finalize_allocation(_17, _20)\n                    expr_7 := abi_decode_uint256_fromMemory(_17, add(_17, _20))\n                }\n                /// @src 2:798:799  \"1\"\n                let expr_8 := 0x01\n                /// @src 2:781:799  \"logic.value() == 1\"\n                let expr_9 := eq(cleanup_uint256(expr_7), convert_t_rational_by_to_t_uint256(expr_8))\n                /// @src 2:773:843  \"require(logic.value() == 1, \\\"Logic value should be 1 after increment\\\")\"\n                require_helper_stringliteral_66f6(expr_9)\n                /// @src 2:862:867  \"proxy\"\n                let _26_address := var_proxy_address\n                let expr_161_address := _26_address\n                /// @src 2:862:873  \"proxy.value\"\n                let expr_162_address := convert_contract_ProxyContract_to_address(expr_161_address)\n                let expr_162_functionSelector := 0x3fa4f245\n                /// @src 2:862:875  \"proxy.value()\"\n                let _21 := allocate_unbounded()\n                mstore(_21, shift_left(expr_162_functionSelector))\n                let _22 := abi_encode_tuple(add(_21, 4))\n                let _23 := staticcall(gas(), expr_162_address, _21, sub(_22, _21), _21, 32)\n                if iszero(_23) { revert_forward() }\n                let expr_10\n                if _23\n                {\n                    let _24 := 32\n                    if gt(_24, returndatasize()) { _24 := returndatasize() }\n                    finalize_allocation(_21, _24)\n                    expr_10 := abi_decode_uint256_fromMemory(_21, add(_21, _24))\n                }\n                /// @src 2:879:880  \"0\"\n                let expr_11 := 0x00\n                /// @src 2:862:880  \"proxy.value() == 0\"\n                let expr_12 := eq(cleanup_uint256(expr_10), convert_rational_0_by_1_to_uint256(expr_11))\n                /// @src 2:854:912  \"require(proxy.value() == 0, \\\"Proxy value should remain 0\\\")\"\n                require_helper_stringliteral_055c(expr_12)\n                /// @src 2:976:981  \"proxy\"\n                let _31_address := var_proxy_address\n                let expr_address := _31_address\n                /// @src 2:976:991  \"proxy.increment\"\n                let expr_171_address := convert_contract_ProxyContract_to_address(expr_address)\n                let expr_functionSelector := 0xd09de08a\n                /// @src 2:976:993  \"proxy.increment()\"\n                let _25 := allocate_unbounded()\n                mstore(_25, shift_left(expr_functionSelector))\n                let _26 := abi_encode_tuple(add(_25, 4))\n                let _27 := call(gas(), expr_171_address, 0, _25, sub(_26, _25), _25, 32)\n                if iszero(_27) { revert_forward() }\n                let expr_13\n                if _27\n                {\n                    let _28 := 32\n                    if gt(_28, returndatasize()) { _28 := returndatasize() }\n                    finalize_allocation(_25, _28)\n                    expr_13 := abi_decode_bool_fromMemory(_25, add(_25, _28))\n                }\n                /// @src 2:1012:1017  \"proxy\"\n                let _36_address := var_proxy_address\n                let expr_175_address := _36_address\n                /// @src 2:1012:1023  \"proxy.value\"\n                let expr_176_address := convert_contract_ProxyContract_to_address(expr_175_address)\n                let expr_176_functionSelector := 0x3fa4f245\n                /// @src 2:1012:1025  \"proxy.value()\"\n                let _29 := allocate_unbounded()\n                mstore(_29, shift_left(expr_176_functionSelector))\n                let _30 := abi_encode_tuple(add(_29, 4))\n                let _31 := staticcall(gas(), expr_176_address, _29, sub(_30, _29), _29, 32)\n                if iszero(_31) { revert_forward() }\n                let expr_14\n                if _31\n                {\n                    let _32 := 32\n                    if gt(_32, returndatasize()) { _32 := returndatasize() }\n                    finalize_allocation(_29, _32)\n                    expr_14 := abi_decode_uint256_fromMemory(_29, add(_29, _32))\n                }\n                /// @src 2:1029:1030  \"1\"\n                let expr_15 := 0x01\n                /// @src 2:1012:1030  \"proxy.value() == 1\"\n                let expr_16 := eq(cleanup_uint256(expr_14), convert_t_rational_by_to_t_uint256(expr_15))\n                /// @src 2:1004:1074  \"require(proxy.value() == 1, \\\"Proxy value should be 1 after increment\\\")\"\n                require_helper_stringliteral_573a(expr_16)\n                /// @src 2:1093:1098  \"logic\"\n                let _41_address := var_logic_address\n                let expr_184_address := _41_address\n                /// @src 2:1093:1104  \"logic.value\"\n                let expr_185_address := convert_contract_LogicContract_to_address(expr_184_address)\n                let expr_185_functionSelector := 0x3fa4f245\n                /// @src 2:1093:1106  \"logic.value()\"\n                let _33 := allocate_unbounded()\n                mstore(_33, shift_left(expr_185_functionSelector))\n                let _34 := abi_encode_tuple(add(_33, 4))\n                let _35 := staticcall(gas(), expr_185_address, _33, sub(_34, _33), _33, 32)\n                if iszero(_35) { revert_forward() }\n                let expr_17\n                if _35\n                {\n                    let _36 := 32\n                    if gt(_36, returndatasize()) { _36 := returndatasize() }\n                    finalize_allocation(_33, _36)\n                    expr_17 := abi_decode_uint256_fromMemory(_33, add(_33, _36))\n                }\n                /// @src 2:1110:1111  \"1\"\n                let expr_18 := 0x01\n                /// @src 2:1093:1111  \"logic.value() == 1\"\n                let expr_19 := eq(cleanup_uint256(expr_17), convert_t_rational_by_to_t_uint256(expr_18))\n                /// @src 2:1085:1143  \"require(logic.value() == 1, \\\"Logic value should remain 1\\\")\"\n                require_helper_stringliteral_c968(expr_19)\n                /// @src 2:1200:1205  \"proxy\"\n                let _address := var_proxy_address\n                let expr_192_address := _address\n                /// @src 2:1200:1214  \"proxy.setValue\"\n                let expr_194_address := convert_contract_ProxyContract_to_address(expr_192_address)\n                let expr_194_functionSelector := 0x55241077\n                /// @src 2:1215:1217  \"10\"\n                let expr_20 := 0x0a\n                /// @src 2:1200:1218  \"proxy.setValue(10)\"\n                let _37 := allocate_unbounded()\n                mstore(_37, shift_left(expr_194_functionSelector))\n                let _38 := abi_encode_rational_by(add(_37, 4), expr_20)\n                let _39 := call(gas(), expr_194_address, 0, _37, sub(_38, _37), _37, 32)\n                if iszero(_39) { revert_forward() }\n                let expr_21\n                if _39\n                {\n                    let _40 := 32\n                    if gt(_40, returndatasize()) { _40 := returndatasize() }\n                    finalize_allocation(_37, _40)\n                    expr_21 := abi_decode_bool_fromMemory(_37, add(_37, _40))\n                }\n                /// @src 2:1237:1242  \"proxy\"\n                let _51_address := var_proxy_address\n                let expr_199_address := _51_address\n                /// @src 2:1237:1248  \"proxy.value\"\n                let expr_200_address := convert_contract_ProxyContract_to_address(expr_199_address)\n                let expr_200_functionSelector := 0x3fa4f245\n                /// @src 2:1237:1250  \"proxy.value()\"\n                let _41 := allocate_unbounded()\n                mstore(_41, shift_left(expr_200_functionSelector))\n                let _42 := abi_encode_tuple(add(_41, 4))\n                let _43 := staticcall(gas(), expr_200_address, _41, sub(_42, _41), _41, 32)\n                if iszero(_43) { revert_forward() }\n                let expr_22\n                if _43\n                {\n                    let _44 := 32\n                    if gt(_44, returndatasize()) { _44 := returndatasize() }\n                    finalize_allocation(_41, _44)\n                    expr_22 := abi_decode_uint256_fromMemory(_41, add(_41, _44))\n                }\n                /// @src 2:1254:1256  \"10\"\n                let expr_23 := 0x0a\n                /// @src 2:1237:1256  \"proxy.value() == 10\"\n                let expr_24 := eq(cleanup_uint256(expr_22), convert_rational_by_to_uint256(expr_23))\n                /// @src 2:1229:1285  \"require(proxy.value() == 10, \\\"Proxy value should be 10\\\")\"\n                require_helper_stringliteral_946f(expr_24)\n                /// @src 2:1304:1309  \"logic\"\n                let _56_address := var_logic_address\n                let expr_208_address := _56_address\n                /// @src 2:1304:1315  \"logic.value\"\n                let expr_209_address := convert_contract_LogicContract_to_address(expr_208_address)\n                let expr_209_functionSelector := 0x3fa4f245\n                /// @src 2:1304:1317  \"logic.value()\"\n                let _45 := allocate_unbounded()\n                mstore(_45, shift_left(expr_209_functionSelector))\n                let _46 := abi_encode_tuple(add(_45, 4))\n                let _47 := staticcall(gas(), expr_209_address, _45, sub(_46, _45), _45, 32)\n                if iszero(_47) { revert_forward() }\n                let expr_25\n                if _47\n                {\n                    let _48 := 32\n                    if gt(_48, returndatasize()) { _48 := returndatasize() }\n                    finalize_allocation(_45, _48)\n                    expr_25 := abi_decode_uint256_fromMemory(_45, add(_45, _48))\n                }\n                /// @src 2:1321:1322  \"1\"\n                let expr_26 := 0x01\n                /// @src 2:1304:1322  \"logic.value() == 1\"\n                let expr_27 := eq(cleanup_uint256(expr_25), convert_t_rational_by_to_t_uint256(expr_26))\n                /// @src 2:1296:1354  \"require(logic.value() == 1, \\\"Logic value should remain 1\\\")\"\n                require_helper_stringliteral_c968(expr_27)\n            }\n        }\n        /// @use-src 0:\"homework3/LogicContract.sol\"\n        object \"LogicContract_22\" {\n            code {\n                {\n                    /// @src 0:60:271  \"contract LogicContract {...\"\n                    mstore(64, memoryguard(0x80))\n                    if callvalue()\n                    {\n                        revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    }\n                    let _1 := allocate_unbounded()\n                    codecopy(_1, dataoffset(\"LogicContract_22_deployed\"), datasize(\"LogicContract_22_deployed\"))\n                    return(_1, datasize(\"LogicContract_22_deployed\"))\n                }\n                function allocate_unbounded() -> memPtr\n                { memPtr := mload(64) }\n                function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                { revert(0, 0) }\n            }\n            /// @use-src 0:\"homework3/LogicContract.sol\"\n            object \"LogicContract_22_deployed\" {\n                code {\n                    {\n                        /// @src 0:60:271  \"contract LogicContract {...\"\n                        mstore(64, memoryguard(0x80))\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let selector := shift_right_unsigned(calldataload(0))\n                            switch selector\n                            case 0x3fa4f245 { external_fun_value() }\n                            case 0x55241077 { external_fun_setValue() }\n                            case 0xd09de08a { external_fun_increment() }\n                            default { }\n                        }\n                        revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n                    }\n                    function shift_right_unsigned(value) -> newValue\n                    { newValue := shr(224, value) }\n                    function allocate_unbounded() -> memPtr\n                    { memPtr := mload(64) }\n                    function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    { revert(0, 0) }\n                    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                    { revert(0, 0) }\n                    function abi_decode(headStart, dataEnd)\n                    {\n                        if slt(sub(dataEnd, headStart), 0)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                    }\n                    function shift_right_unsigned_dynamic(bits, value) -> newValue\n                    { newValue := shr(bits, value) }\n                    function cleanup_from_storage_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n                    }\n                    /// @ast-id 3 @src 0:92:109  \"uint public value\"\n                    function getter_fun_value() -> ret\n                    {\n                        let slot := 0\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_uint256(slot, offset)\n                    }\n                    /// @src 0:60:271  \"contract LogicContract {...\"\n                    function cleanup_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function abi_encode_uint256_to_uint256(value, pos)\n                    {\n                        mstore(pos, cleanup_uint256(value))\n                    }\n                    function abi_encode_uint256(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                    }\n                    function external_fun_value()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_value()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function validator_revert_uint256(value)\n                    {\n                        if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_uint256(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_uint256(value)\n                    }\n                    function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                    }\n                    function abi_encode_tuple(headStart) -> tail\n                    { tail := add(headStart, 0) }\n                    function external_fun_setValue()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_setValue(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_increment()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        fun_increment()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n                    { revert(0, 0) }\n                    function shift_left(value) -> newValue\n                    { newValue := shl(0, value) }\n                    function update_byte_slice_shift(value, toInsert) -> result\n                    {\n                        let mask := not(0)\n                        toInsert := shift_left(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function identity(value) -> ret\n                    { ret := value }\n                    function convert_uint256_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_uint256(value)))\n                    }\n                    function prepare_store_uint256(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_uint256_to_uint256(slot, value)\n                    {\n                        let convertedValue := convert_uint256_to_uint256(value)\n                        sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n                    }\n                    /// @ast-id 21 @src 0:191:268  \"function setValue(uint _newValue) public {...\"\n                    function fun_setValue(var_newValue)\n                    {\n                        /// @src 0:251:260  \"_newValue\"\n                        let _1 := var_newValue\n                        let expr := _1\n                        /// @src 0:243:260  \"value = _newValue\"\n                        update_storage_value_offset_uint256_to_uint256(0x00, expr)\n                    }\n                    /// @src 0:60:271  \"contract LogicContract {...\"\n                    function cleanup_rational_by(value) -> cleaned\n                    { cleaned := value }\n                    function convert_rational_by_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n                    }\n                    function shift_right_0_unsigned(value) -> newValue\n                    { newValue := shr(0, value) }\n                    function extract_from_storage_value_offset_uint256(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_uint256(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_uint256(sload(slot))\n                    }\n                    function panic_error_0x11()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(0, 0x24)\n                    }\n                    function checked_add_uint256(x, y) -> sum\n                    {\n                        x := cleanup_uint256(x)\n                        y := cleanup_uint256(y)\n                        sum := add(x, y)\n                        if gt(x, sum) { panic_error_0x11() }\n                    }\n                    /// @ast-id 11 @src 0:122:179  \"function increment() public {...\"\n                    function fun_increment()\n                    {\n                        /// @src 0:170:171  \"1\"\n                        let expr := 0x01\n                        /// @src 0:161:171  \"value += 1\"\n                        let _1 := convert_rational_by_to_uint256(expr)\n                        let _2 := read_from_storage_split_offset_uint256(0x00)\n                        let expr_1 := checked_add_uint256(_2, _1)\n                        update_storage_value_offset_uint256_to_uint256(0x00, expr_1)\n                    }\n                }\n                data \".metadata\" hex\"a26469706673582212202928bc57a1c61708c273186f514044a4d8d91ef32cc80fdb401b0993a76bd83164736f6c634300081c0033\"\n            }\n        }\n        /// @use-src 1:\"homework3/ProxyContract.sol\"\n        object \"ProxyContract_101\" {\n            code {\n                {\n                    /// @src 1:60:1346  \"contract ProxyContract {...\"\n                    mstore(64, memoryguard(0x80))\n                    if callvalue()\n                    {\n                        revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    }\n                    let _1 := copy_arguments_for_constructor_object_ProxyContract()\n                    constructor_ProxyContract(_1)\n                    let _2 := allocate_unbounded()\n                    codecopy(_2, dataoffset(\"ProxyContract_101_deployed\"), datasize(\"ProxyContract_101_deployed\"))\n                    return(_2, datasize(\"ProxyContract_101_deployed\"))\n                }\n                function allocate_unbounded() -> memPtr\n                { memPtr := mload(64) }\n                function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                { revert(0, 0) }\n                function round_up_to_mul_of(value) -> result\n                {\n                    result := and(add(value, 31), not(31))\n                }\n                function panic_error_0x41()\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                function finalize_allocation(memPtr, size)\n                {\n                    let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                    mstore(64, newFreePtr)\n                }\n                function allocate_memory(size) -> memPtr\n                {\n                    memPtr := allocate_unbounded()\n                    finalize_allocation(memPtr, size)\n                }\n                function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                { revert(0, 0) }\n                function cleanup_uint160(value) -> cleaned\n                {\n                    cleaned := and(value, sub(shl(160, 1), 1))\n                }\n                function cleanup_address(value) -> cleaned\n                {\n                    cleaned := cleanup_uint160(value)\n                }\n                function validator_revert_address(value)\n                {\n                    if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n                }\n                function abi_decode_address_fromMemory(offset, end) -> value\n                {\n                    value := mload(offset)\n                    validator_revert_address(value)\n                }\n                function abi_decode_tuple_address_fromMemory(headStart, dataEnd) -> value0\n                {\n                    if slt(sub(dataEnd, headStart), 32)\n                    {\n                        revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                    }\n                    let offset := 0\n                    value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n                }\n                function copy_arguments_for_constructor_object_ProxyContract() -> ret_param\n                {\n                    let programSize := datasize(\"ProxyContract_101\")\n                    let argSize := sub(codesize(), programSize)\n                    let memoryDataOffset := allocate_memory(argSize)\n                    codecopy(memoryDataOffset, programSize, argSize)\n                    ret_param := abi_decode_tuple_address_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n                }\n                function shift_left(value) -> newValue\n                { newValue := shl(0, value) }\n                function update_byte_slice_shift(value, toInsert) -> result\n                {\n                    let mask := sub(shl(160, 1), 1)\n                    toInsert := shift_left(toInsert)\n                    value := and(value, not(mask))\n                    result := or(value, and(toInsert, mask))\n                }\n                function identity(value) -> ret\n                { ret := value }\n                function convert_uint160_to_uint160(value) -> converted\n                {\n                    converted := cleanup_uint160(identity(cleanup_uint160(value)))\n                }\n                function convert_uint160_to_address(value) -> converted\n                {\n                    converted := convert_uint160_to_uint160(value)\n                }\n                function convert_address_to_address(value) -> converted\n                {\n                    converted := convert_uint160_to_address(value)\n                }\n                function prepare_store_address(value) -> ret\n                { ret := value }\n                function update_storage_value_offset_address_to_address(slot, value)\n                {\n                    let convertedValue := convert_address_to_address(value)\n                    sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n                }\n                /// @ast-id 38 @src 1:155:240  \"constructor(address _logicContract) {...\"\n                function constructor_ProxyContract(var_logicContract)\n                {\n                    /// @src 1:218:232  \"_logicContract\"\n                    let _1 := var_logicContract\n                    let expr := _1\n                    /// @src 1:202:232  \"logicContract = _logicContract\"\n                    update_storage_value_offset_address_to_address(0x01, expr)\n                }\n            }\n            /// @use-src 1:\"homework3/ProxyContract.sol\"\n            object \"ProxyContract_101_deployed\" {\n                code {\n                    {\n                        /// @src 1:60:1346  \"contract ProxyContract {...\"\n                        mstore(64, 128)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let selector := shift_right_unsigned(calldataload(0))\n                            switch selector\n                            case 0x3fa4f245 { external_fun_value() }\n                            case 0x55241077 { external_fun_setValue() }\n                            case 0x5aa4470f {\n                                external_fun_setLogicContract()\n                            }\n                            case 0xcc0e97c9 { external_fun_logicContract() }\n                            case 0xd09de08a { external_fun_increment() }\n                            default { }\n                        }\n                        if iszero(calldatasize()) { stop() }\n                        fun()\n                        stop()\n                    }\n                    function shift_right_unsigned(value) -> newValue\n                    { newValue := shr(224, value) }\n                    function allocate_unbounded() -> memPtr\n                    { memPtr := mload(64) }\n                    function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    { revert(0, 0) }\n                    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                    { revert(0, 0) }\n                    function abi_decode(headStart, dataEnd)\n                    {\n                        if slt(sub(dataEnd, headStart), 0)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                    }\n                    function shift_right_unsigned_dynamic(bits, value) -> newValue\n                    { newValue := shr(bits, value) }\n                    function cleanup_from_storage_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n                    }\n                    /// @ast-id 26 @src 1:90:107  \"uint public value\"\n                    function getter_fun_value() -> ret\n                    {\n                        let slot := 0\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_uint256(slot, offset)\n                    }\n                    /// @src 1:60:1346  \"contract ProxyContract {...\"\n                    function cleanup_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function abi_encode_uint256_to_uint256(value, pos)\n                    {\n                        mstore(pos, cleanup_uint256(value))\n                    }\n                    function abi_encode_uint256(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                    }\n                    function external_fun_value()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_value()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function validator_revert_uint256(value)\n                    {\n                        if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_uint256(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_uint256(value)\n                    }\n                    function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                    }\n                    function cleanup_bool(value) -> cleaned\n                    {\n                        cleaned := iszero(iszero(value))\n                    }\n                    function abi_encode_bool_to_bool(value, pos)\n                    {\n                        mstore(pos, cleanup_bool(value))\n                    }\n                    function abi_encode_bool(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_bool_to_bool(value0, add(headStart, 0))\n                    }\n                    function external_fun_setValue()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        let ret := fun_setValue(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_bool(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_uint160(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function cleanup_address(value) -> cleaned\n                    {\n                        cleaned := cleanup_uint160(value)\n                    }\n                    function validator_revert_address(value)\n                    {\n                        if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_address(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_address(value)\n                    }\n                    function abi_decode_tuple_address(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                    }\n                    function abi_encode_tuple(headStart) -> tail\n                    { tail := add(headStart, 0) }\n                    function external_fun_setLogicContract()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_address(4, calldatasize())\n                        fun_setLogicContract(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_from_storage_address(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_address(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n                    }\n                    /// @ast-id 28 @src 1:114:142  \"address public logicContract\"\n                    function getter_fun_logicContract() -> ret\n                    {\n                        let slot := 1\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_address(slot, offset)\n                    }\n                    /// @src 1:60:1346  \"contract ProxyContract {...\"\n                    function abi_encode_address(value, pos)\n                    {\n                        mstore(pos, cleanup_address(value))\n                    }\n                    function abi_encode_tuple_address(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_address(value0, add(headStart, 0))\n                    }\n                    function external_fun_logicContract()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_logicContract()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple_address(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_increment()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := fun_increment()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_bool(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function zero_value_for_split_bool() -> ret\n                    { ret := 0 }\n                    function shift_right_0_unsigned(value) -> newValue\n                    { newValue := shr(0, value) }\n                    function extract_from_storage_value_offset_address(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_address(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_address(sload(slot))\n                    }\n                    function round_up_to_mul_of(value) -> result\n                    {\n                        result := and(add(value, 31), not(31))\n                    }\n                    function panic_error_0x41()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(0, 0x24)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                        mstore(64, newFreePtr)\n                    }\n                    function allocate_memory(size) -> memPtr\n                    {\n                        memPtr := allocate_unbounded()\n                        finalize_allocation(memPtr, size)\n                    }\n                    function array_allocation_size_bytes(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                        size := round_up_to_mul_of(length)\n                        size := add(size, 0x20)\n                    }\n                    function allocate_memory_array_bytes(length) -> memPtr\n                    {\n                        let allocSize := array_allocation_size_bytes(length)\n                        memPtr := allocate_memory(allocSize)\n                        mstore(memPtr, length)\n                    }\n                    function zero_value_for_split_bytes() -> ret\n                    { ret := 96 }\n                    function extract_returndata() -> data\n                    {\n                        switch returndatasize()\n                        case 0 {\n                            data := zero_value_for_split_bytes()\n                        }\n                        default {\n                            data := allocate_memory_array_bytes(returndatasize())\n                            returndatacopy(add(data, 0x20), 0, returndatasize())\n                        }\n                    }\n                    /// @ast-id 91 @src 1:619:845  \"function setValue(uint _newValue) public returns (bool) {...\"\n                    function fun_setValue(var_newValue) -> var\n                    {\n                        /// @src 1:669:673  \"bool\"\n                        let zero_t_bool := zero_value_for_split_bool()\n                        var := zero_t_bool\n                        /// @src 1:705:718  \"logicContract\"\n                        let _1 := read_from_storage_split_offset_address(0x01)\n                        let expr := _1\n                        /// @src 1:705:731  \"logicContract.delegatecall\"\n                        let expr_80_address := expr\n                        /// @src 1:791:800  \"_newValue\"\n                        let _2 := var_newValue\n                        let expr_1 := _2\n                        /// @src 1:746:801  \"abi.encodeWithSignature(\\\"setValue(uint256)\\\", _newValue)\"\n                        let expr_85_mpos := allocate_unbounded()\n                        let _3 := add(expr_85_mpos, 0x20)\n                        mstore(_3, shl(224, 0x55241077))\n                        _3 := add(_3, 4)\n                        let _4 := abi_encode_uint256(_3, expr_1)\n                        mstore(expr_85_mpos, sub(_4, add(expr_85_mpos, 0x20)))\n                        finalize_allocation(expr_85_mpos, sub(_4, expr_85_mpos))\n                        /// @src 1:705:812  \"logicContract.delegatecall(...\"\n                        let _5 := add(expr_85_mpos, 0x20)\n                        let _6 := mload(expr_85_mpos)\n                        let expr_component := delegatecall(gas(), expr_80_address, _5, _6, 0, 0)\n                        pop(extract_returndata())\n                        /// @src 1:686:812  \"(bool success, ) = logicContract.delegatecall(...\"\n                        let var_success := expr_component\n                        /// @src 1:830:837  \"success\"\n                        let _7 := var_success\n                        let expr_2 := _7\n                        /// @src 1:823:837  \"return success\"\n                        var := expr_2\n                        leave\n                    }\n                    /// @src 1:60:1346  \"contract ProxyContract {...\"\n                    function shift_left(value) -> newValue\n                    { newValue := shl(0, value) }\n                    function update_byte_slice_shift(value, toInsert) -> result\n                    {\n                        let mask := sub(shl(160, 1), 1)\n                        toInsert := shift_left(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function identity(value) -> ret\n                    { ret := value }\n                    function convert_uint160_to_uint160(value) -> converted\n                    {\n                        converted := cleanup_uint160(identity(cleanup_uint160(value)))\n                    }\n                    function convert_uint160_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_uint160(value)\n                    }\n                    function convert_address_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function prepare_store_address(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_address_to_address(slot, value)\n                    {\n                        let convertedValue := convert_address_to_address(value)\n                        sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_address(convertedValue)))\n                    }\n                    /// @ast-id 52 @src 1:293:399  \"function setLogicContract(address _logicContract) public {...\"\n                    function fun_setLogicContract(var_logicContract)\n                    {\n                        /// @src 1:377:391  \"_logicContract\"\n                        let _1 := var_logicContract\n                        let expr := _1\n                        /// @src 1:361:391  \"logicContract = _logicContract\"\n                        update_storage_value_offset_address_to_address(0x01, expr)\n                    }\n                    /// @ast-id 70 @src 1:411:607  \"function increment() public returns (bool) {...\"\n                    function fun_increment() -> var_\n                    {\n                        /// @src 1:448:452  \"bool\"\n                        let zero_bool := zero_value_for_split_bool()\n                        var_ := zero_bool\n                        /// @src 1:484:497  \"logicContract\"\n                        let _1 := read_from_storage_split_offset_address(0x01)\n                        let expr := _1\n                        /// @src 1:484:510  \"logicContract.delegatecall\"\n                        let expr_address := expr\n                        /// @src 1:525:563  \"abi.encodeWithSignature(\\\"increment()\\\")\"\n                        let expr_mpos := allocate_unbounded()\n                        let _2 := add(expr_mpos, 0x20)\n                        mstore(_2, shl(225, 0x684ef045))\n                        _2 := add(_2, 4)\n                        let _3 := abi_encode_tuple(_2)\n                        mstore(expr_mpos, sub(_3, add(expr_mpos, 0x20)))\n                        finalize_allocation(expr_mpos, sub(_3, expr_mpos))\n                        /// @src 1:484:574  \"logicContract.delegatecall(...\"\n                        let _4 := add(expr_mpos, 0x20)\n                        let _5 := mload(expr_mpos)\n                        let expr_component := delegatecall(gas(), expr_address, _4, _5, 0, 0)\n                        pop(extract_returndata())\n                        /// @src 1:465:574  \"(bool success, ) = logicContract.delegatecall(...\"\n                        let var_success := expr_component\n                        /// @src 1:592:599  \"success\"\n                        let _6 := var_success\n                        let expr_1 := _6\n                        /// @src 1:585:599  \"return success\"\n                        var_ := expr_1\n                        leave\n                    }\n                    /// @ast-id 100 @src 1:859:1343  \"fallback() external payable {...\"\n                    function fun()\n                    {\n                        /// @src 1:914:927  \"logicContract\"\n                        let _1 := read_from_storage_split_offset_address(0x01)\n                        let expr := _1\n                        /// @src 1:898:927  \"address _impl = logicContract\"\n                        let var_impl := expr\n                        /// @src 1:938:1336  \"assembly {...\"\n                        let usr$ptr := mload(0x40)\n                        calldatacopy(usr$ptr, 0, calldatasize())\n                        let usr$result := delegatecall(gas(), var_impl, usr$ptr, calldatasize(), 0, 0)\n                        let usr$size := returndatasize()\n                        returndatacopy(usr$ptr, 0, usr$size)\n                        switch usr$result\n                        case 0 { revert(usr$ptr, usr$size) }\n                        default { return(usr$ptr, usr$size) }\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220488e1e08630c0384f450e9b44387fe6f234b5e543633c3640c757395257fbd6064736f6c634300081c0033\"\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220d91a58f4d7d4e9f3c7e01284b7cdf491625cd783ae634440bc97cf429980b18164736f6c634300081c0033\"\n    }\n}\n",
					"hash": "e7bb4863786e5beca5c62fc8ecf2ddde85eaf6a20a25a135c453a91d083319c4",
					"factoryDependencies": {
						"a1091a9d0b3721a79ccfdba43a6d0e496ce447d68077c70816a572605004225a": "homework3/LogicContract.sol:LogicContract",
						"c2525d46db4f6c5030ac0b685430c1e2fcd7b0bea95850a5f2b6b1b74d00fb42": "homework3/ProxyContract.sol:ProxyContract"
					}
				}
			}
		},
		"sources": {
			"homework3/LogicContract.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "homework3/LogicContract.sol",
					"exportedSymbols": {
						"LogicContract": [
							22
						]
					},
					"id": 23,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "LogicContract",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 22,
							"linearizedBaseContracts": [
								22
							],
							"name": "LogicContract",
							"nameLocation": "69:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "3fa4f245",
									"id": 3,
									"mutability": "mutable",
									"name": "value",
									"nameLocation": "104:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 22,
									"src": "92:17:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "92:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 10,
										"nodeType": "Block",
										"src": "150:29:0",
										"statements": [
											{
												"expression": {
													"id": 8,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 6,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "161:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 7,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "170:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "161:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 9,
												"nodeType": "ExpressionStatement",
												"src": "161:10:0"
											}
										]
									},
									"functionSelector": "d09de08a",
									"id": 11,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "131:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "140:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "150:0:0"
									},
									"scope": 22,
									"src": "122:57:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 20,
										"nodeType": "Block",
										"src": "232:36:0",
										"statements": [
											{
												"expression": {
													"id": 18,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 16,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "243:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 17,
														"name": "_newValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "251:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "243:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 19,
												"nodeType": "ExpressionStatement",
												"src": "243:17:0"
											}
										]
									},
									"functionSelector": "55241077",
									"id": 21,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setValue",
									"nameLocation": "200:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "_newValue",
												"nameLocation": "214:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "209:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "209:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "208:16:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "232:0:0"
									},
									"scope": 22,
									"src": "191:77:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 23,
							"src": "60:211:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:238:0"
				}
			},
			"homework3/ProxyContract.sol": {
				"id": 1,
				"ast": {
					"absolutePath": "homework3/ProxyContract.sol",
					"exportedSymbols": {
						"ProxyContract": [
							101
						]
					},
					"id": 102,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 24,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ProxyContract",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 101,
							"linearizedBaseContracts": [
								101
							],
							"name": "ProxyContract",
							"nameLocation": "69:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "3fa4f245",
									"id": 26,
									"mutability": "mutable",
									"name": "value",
									"nameLocation": "102:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 101,
									"src": "90:17:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 25,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "90:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "cc0e97c9",
									"id": 28,
									"mutability": "mutable",
									"name": "logicContract",
									"nameLocation": "129:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 101,
									"src": "114:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 27,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "114:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "191:49:1",
										"statements": [
											{
												"expression": {
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 33,
														"name": "logicContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 28,
														"src": "202:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 34,
														"name": "_logicContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 30,
														"src": "218:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "202:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 36,
												"nodeType": "ExpressionStatement",
												"src": "202:30:1"
											}
										]
									},
									"id": 38,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "_logicContract",
												"nameLocation": "175:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "167:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 29,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "167:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "166:24:1"
									},
									"returnParameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "191:0:1"
									},
									"scope": 101,
									"src": "155:85:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 41,
										"nodeType": "Block",
										"src": "279:2:1",
										"statements": []
									},
									"id": 42,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "259:2:1"
									},
									"returnParameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "279:0:1"
									},
									"scope": 101,
									"src": "252:29:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 51,
										"nodeType": "Block",
										"src": "350:49:1",
										"statements": [
											{
												"expression": {
													"id": 49,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 47,
														"name": "logicContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 28,
														"src": "361:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 48,
														"name": "_logicContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 44,
														"src": "377:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "361:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 50,
												"nodeType": "ExpressionStatement",
												"src": "361:30:1"
											}
										]
									},
									"functionSelector": "5aa4470f",
									"id": 52,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setLogicContract",
									"nameLocation": "302:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "_logicContract",
												"nameLocation": "327:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "319:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "319:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "318:24:1"
									},
									"returnParameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "350:0:1"
									},
									"scope": 101,
									"src": "293:106:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 69,
										"nodeType": "Block",
										"src": "454:153:1",
										"statements": [
											{
												"assignments": [
													58,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 58,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "471:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 69,
														"src": "466:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 57,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "466:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 66,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "696e6372656d656e742829",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "549:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_d09de08ab1a974aadf0a76e6f99a2ec20e431f22bbc101a6c3f718e53646ed8d",
																		"typeString": "literal_string \"increment()\""
																	},
																	"value": "increment()"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_d09de08ab1a974aadf0a76e6f99a2ec20e431f22bbc101a6c3f718e53646ed8d",
																		"typeString": "literal_string \"increment()\""
																	}
																],
																"expression": {
																	"id": 61,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "525:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "529:19:1",
																"memberName": "encodeWithSignature",
																"nodeType": "MemberAccess",
																"src": "525:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (string memory) pure returns (bytes memory)"
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "525:38:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 59,
															"name": "logicContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 28,
															"src": "484:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 60,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "498:12:1",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "484:26:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "484:90:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "465:109:1"
											},
											{
												"expression": {
													"id": 67,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 58,
													"src": "592:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 56,
												"id": 68,
												"nodeType": "Return",
												"src": "585:14:1"
											}
										]
									},
									"functionSelector": "d09de08a",
									"id": 70,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "420:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "429:2:1"
									},
									"returnParameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "448:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 54,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "448:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "447:6:1"
									},
									"scope": 101,
									"src": "411:196:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "675:170:1",
										"statements": [
											{
												"assignments": [
													78,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 78,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "692:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 90,
														"src": "687:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 77,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "687:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 87,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "73657456616c75652875696e7432353629",
																	"id": 83,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "770:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_5524107728b6898cfcb4f9c8c4692293f130d6580f855e9f0718b1fa98cbecbd",
																		"typeString": "literal_string \"setValue(uint256)\""
																	},
																	"value": "setValue(uint256)"
																},
																{
																	"id": 84,
																	"name": "_newValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 72,
																	"src": "791:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_5524107728b6898cfcb4f9c8c4692293f130d6580f855e9f0718b1fa98cbecbd",
																		"typeString": "literal_string \"setValue(uint256)\""
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 81,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "746:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 82,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "750:19:1",
																"memberName": "encodeWithSignature",
																"nodeType": "MemberAccess",
																"src": "746:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (string memory) pure returns (bytes memory)"
																}
															},
															"id": 85,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "746:55:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 79,
															"name": "logicContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 28,
															"src": "705:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 80,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "719:12:1",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "705:26:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 86,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "705:107:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "686:126:1"
											},
											{
												"expression": {
													"id": 88,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 78,
													"src": "830:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 76,
												"id": 89,
												"nodeType": "Return",
												"src": "823:14:1"
											}
										]
									},
									"functionSelector": "55241077",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setValue",
									"nameLocation": "628:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "_newValue",
												"nameLocation": "642:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "637:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 71,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "637:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "636:16:1"
									},
									"returnParameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "669:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 74,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "669:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "668:6:1"
									},
									"scope": 101,
									"src": "619:226:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 99,
										"nodeType": "Block",
										"src": "887:456:1",
										"statements": [
											{
												"assignments": [
													95
												],
												"declarations": [
													{
														"constant": false,
														"id": 95,
														"mutability": "mutable",
														"name": "_impl",
														"nameLocation": "906:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 99,
														"src": "898:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 94,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "898:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 97,
												"initialValue": {
													"id": 96,
													"name": "logicContract",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 28,
													"src": "914:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "898:29:1"
											},
											{
												"AST": {
													"nativeSrc": "947:389:1",
													"nodeType": "YulBlock",
													"src": "947:389:1",
													"statements": [
														{
															"nativeSrc": "962:22:1",
															"nodeType": "YulVariableDeclaration",
															"src": "962:22:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "979:4:1",
																		"nodeType": "YulLiteral",
																		"src": "979:4:1",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "973:5:1",
																	"nodeType": "YulIdentifier",
																	"src": "973:5:1"
																},
																"nativeSrc": "973:11:1",
																"nodeType": "YulFunctionCall",
																"src": "973:11:1"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "966:3:1",
																	"nodeType": "YulTypedName",
																	"src": "966:3:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "1011:3:1",
																		"nodeType": "YulIdentifier",
																		"src": "1011:3:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1016:1:1",
																		"nodeType": "YulLiteral",
																		"src": "1016:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "calldatasize",
																			"nativeSrc": "1019:12:1",
																			"nodeType": "YulIdentifier",
																			"src": "1019:12:1"
																		},
																		"nativeSrc": "1019:14:1",
																		"nodeType": "YulFunctionCall",
																		"src": "1019:14:1"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nativeSrc": "998:12:1",
																	"nodeType": "YulIdentifier",
																	"src": "998:12:1"
																},
																"nativeSrc": "998:36:1",
																"nodeType": "YulFunctionCall",
																"src": "998:36:1"
															},
															"nativeSrc": "998:36:1",
															"nodeType": "YulExpressionStatement",
															"src": "998:36:1"
														},
														{
															"nativeSrc": "1048:67:1",
															"nodeType": "YulVariableDeclaration",
															"src": "1048:67:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "1075:3:1",
																			"nodeType": "YulIdentifier",
																			"src": "1075:3:1"
																		},
																		"nativeSrc": "1075:5:1",
																		"nodeType": "YulFunctionCall",
																		"src": "1075:5:1"
																	},
																	{
																		"name": "_impl",
																		"nativeSrc": "1082:5:1",
																		"nodeType": "YulIdentifier",
																		"src": "1082:5:1"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "1089:3:1",
																		"nodeType": "YulIdentifier",
																		"src": "1089:3:1"
																	},
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "calldatasize",
																			"nativeSrc": "1094:12:1",
																			"nodeType": "YulIdentifier",
																			"src": "1094:12:1"
																		},
																		"nativeSrc": "1094:14:1",
																		"nodeType": "YulFunctionCall",
																		"src": "1094:14:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1110:1:1",
																		"nodeType": "YulLiteral",
																		"src": "1110:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1113:1:1",
																		"nodeType": "YulLiteral",
																		"src": "1113:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "delegatecall",
																	"nativeSrc": "1062:12:1",
																	"nodeType": "YulIdentifier",
																	"src": "1062:12:1"
																},
																"nativeSrc": "1062:53:1",
																"nodeType": "YulFunctionCall",
																"src": "1062:53:1"
															},
															"variables": [
																{
																	"name": "result",
																	"nativeSrc": "1052:6:1",
																	"nodeType": "YulTypedName",
																	"src": "1052:6:1",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1129:28:1",
															"nodeType": "YulVariableDeclaration",
															"src": "1129:28:1",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "1141:14:1",
																	"nodeType": "YulIdentifier",
																	"src": "1141:14:1"
																},
																"nativeSrc": "1141:16:1",
																"nodeType": "YulFunctionCall",
																"src": "1141:16:1"
															},
															"variables": [
																{
																	"name": "size",
																	"nativeSrc": "1133:4:1",
																	"nodeType": "YulTypedName",
																	"src": "1133:4:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "1186:3:1",
																		"nodeType": "YulIdentifier",
																		"src": "1186:3:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1191:1:1",
																		"nodeType": "YulLiteral",
																		"src": "1191:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "size",
																		"nativeSrc": "1194:4:1",
																		"nodeType": "YulIdentifier",
																		"src": "1194:4:1"
																	}
																],
																"functionName": {
																	"name": "returndatacopy",
																	"nativeSrc": "1171:14:1",
																	"nodeType": "YulIdentifier",
																	"src": "1171:14:1"
																},
																"nativeSrc": "1171:28:1",
																"nodeType": "YulFunctionCall",
																"src": "1171:28:1"
															},
															"nativeSrc": "1171:28:1",
															"nodeType": "YulExpressionStatement",
															"src": "1171:28:1"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "1261:21:1",
																		"nodeType": "YulBlock",
																		"src": "1261:21:1",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "1270:3:1",
																							"nodeType": "YulIdentifier",
																							"src": "1270:3:1"
																						},
																						{
																							"name": "size",
																							"nativeSrc": "1275:4:1",
																							"nodeType": "YulIdentifier",
																							"src": "1275:4:1"
																						}
																					],
																					"functionName": {
																						"name": "revert",
																						"nativeSrc": "1263:6:1",
																						"nodeType": "YulIdentifier",
																						"src": "1263:6:1"
																					},
																					"nativeSrc": "1263:17:1",
																					"nodeType": "YulFunctionCall",
																					"src": "1263:17:1"
																				},
																				"nativeSrc": "1263:17:1",
																				"nodeType": "YulExpressionStatement",
																				"src": "1263:17:1"
																			}
																		]
																	},
																	"nativeSrc": "1254:28:1",
																	"nodeType": "YulCase",
																	"src": "1254:28:1",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1259:1:1",
																		"nodeType": "YulLiteral",
																		"src": "1259:1:1",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "1304:21:1",
																		"nodeType": "YulBlock",
																		"src": "1304:21:1",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "1313:3:1",
																							"nodeType": "YulIdentifier",
																							"src": "1313:3:1"
																						},
																						{
																							"name": "size",
																							"nativeSrc": "1318:4:1",
																							"nodeType": "YulIdentifier",
																							"src": "1318:4:1"
																						}
																					],
																					"functionName": {
																						"name": "return",
																						"nativeSrc": "1306:6:1",
																						"nodeType": "YulIdentifier",
																						"src": "1306:6:1"
																					},
																					"nativeSrc": "1306:17:1",
																					"nodeType": "YulFunctionCall",
																					"src": "1306:17:1"
																				},
																				"nativeSrc": "1306:17:1",
																				"nodeType": "YulExpressionStatement",
																				"src": "1306:17:1"
																			}
																		]
																	},
																	"nativeSrc": "1296:29:1",
																	"nodeType": "YulCase",
																	"src": "1296:29:1",
																	"value": "default"
																}
															],
															"expression": {
																"name": "result",
																"nativeSrc": "1234:6:1",
																"nodeType": "YulIdentifier",
																"src": "1234:6:1"
															},
															"nativeSrc": "1227:98:1",
															"nodeType": "YulSwitch",
															"src": "1227:98:1"
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 95,
														"isOffset": false,
														"isSlot": false,
														"src": "1082:5:1",
														"valueSize": 1
													}
												],
												"id": 98,
												"nodeType": "InlineAssembly",
												"src": "938:398:1"
											}
										]
									},
									"id": 100,
									"implemented": true,
									"kind": "fallback",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "867:2:1"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "887:0:1"
									},
									"scope": 101,
									"src": "859:484:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 102,
							"src": "60:1286:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:1313:1"
				}
			},
			"homework3/TestContract.sol": {
				"id": 2,
				"ast": {
					"absolutePath": "homework3/TestContract.sol",
					"exportedSymbols": {
						"LogicContract": [
							22
						],
						"ProxyContract": [
							101
						],
						"TestContract": [
							218
						]
					},
					"id": 219,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 103,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"absolutePath": "homework3/LogicContract.sol",
							"file": "./LogicContract.sol",
							"id": 104,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 219,
							"sourceUnit": 23,
							"src": "60:29:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "homework3/ProxyContract.sol",
							"file": "./ProxyContract.sol",
							"id": 105,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 219,
							"sourceUnit": 102,
							"src": "91:29:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TestContract",
							"contractDependencies": [
								22,
								101
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 218,
							"linearizedBaseContracts": [
								218
							],
							"name": "TestContract",
							"nameLocation": "171:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 216,
										"nodeType": "Block",
										"src": "259:1232:2",
										"statements": [
											{
												"assignments": [
													110
												],
												"declarations": [
													{
														"constant": false,
														"id": 110,
														"mutability": "mutable",
														"name": "logic",
														"nameLocation": "318:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 216,
														"src": "304:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_LogicContract_$22",
															"typeString": "contract LogicContract"
														},
														"typeName": {
															"id": 109,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 108,
																"name": "LogicContract",
																"nameLocations": [
																	"304:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 22,
																"src": "304:13:2"
															},
															"referencedDeclaration": 22,
															"src": "304:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_LogicContract_$22",
																"typeString": "contract LogicContract"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 115,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 113,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "326:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_LogicContract_$22_$",
															"typeString": "function () returns (contract LogicContract)"
														},
														"typeName": {
															"id": 112,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 111,
																"name": "LogicContract",
																"nameLocations": [
																	"330:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 22,
																"src": "330:13:2"
															},
															"referencedDeclaration": 22,
															"src": "330:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_LogicContract_$22",
																"typeString": "contract LogicContract"
															}
														}
													},
													"id": 114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "326:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_LogicContract_$22",
														"typeString": "contract LogicContract"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "304:41:2"
											},
											{
												"assignments": [
													118
												],
												"declarations": [
													{
														"constant": false,
														"id": 118,
														"mutability": "mutable",
														"name": "proxy",
														"nameLocation": "441:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 216,
														"src": "427:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ProxyContract_$101",
															"typeString": "contract ProxyContract"
														},
														"typeName": {
															"id": 117,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 116,
																"name": "ProxyContract",
																"nameLocations": [
																	"427:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 101,
																"src": "427:13:2"
															},
															"referencedDeclaration": 101,
															"src": "427:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ProxyContract_$101",
																"typeString": "contract ProxyContract"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 127,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 124,
																	"name": "logic",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 110,
																	"src": "475:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_LogicContract_$22",
																		"typeString": "contract LogicContract"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_LogicContract_$22",
																		"typeString": "contract LogicContract"
																	}
																],
																"id": 123,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "467:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 122,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "467:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 125,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "467:14:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "449:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_ProxyContract_$101_$",
															"typeString": "function (address) returns (contract ProxyContract)"
														},
														"typeName": {
															"id": 120,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 119,
																"name": "ProxyContract",
																"nameLocations": [
																	"453:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 101,
																"src": "453:13:2"
															},
															"referencedDeclaration": 101,
															"src": "453:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ProxyContract_$101",
																"typeString": "contract ProxyContract"
															}
														}
													},
													"id": 126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "449:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ProxyContract_$101",
														"typeString": "contract ProxyContract"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "427:55:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 133,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 129,
																		"name": "logic",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 110,
																		"src": "545:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_LogicContract_$22",
																			"typeString": "contract LogicContract"
																		}
																	},
																	"id": 130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "551:5:2",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3,
																	"src": "545:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																		"typeString": "function () view external returns (uint256)"
																	}
																},
																"id": 131,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "545:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "562:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "545:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c6f67696320696e697469616c2076616c75652073686f756c642062652030",
															"id": 134,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "565:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_041d593c32cd2b320443f5c7cb9e7caeaa29bbb97122725dda379857592393e1",
																"typeString": "literal_string \"Logic initial value should be 0\""
															},
															"value": "Logic initial value should be 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_041d593c32cd2b320443f5c7cb9e7caeaa29bbb97122725dda379857592393e1",
																"typeString": "literal_string \"Logic initial value should be 0\""
															}
														],
														"id": 128,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "537:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "537:62:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "537:62:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 142,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 138,
																		"name": "proxy",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 118,
																		"src": "618:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ProxyContract_$101",
																			"typeString": "contract ProxyContract"
																		}
																	},
																	"id": 139,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "624:5:2",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 26,
																	"src": "618:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																		"typeString": "function () view external returns (uint256)"
																	}
																},
																"id": 140,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "618:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 141,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "635:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "618:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50726f787920696e697469616c2076616c75652073686f756c642062652030",
															"id": 143,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "638:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4378bb9f509aff341a45554817962c3f5dcceb001980b64bd51ecf04151bde17",
																"typeString": "literal_string \"Proxy initial value should be 0\""
															},
															"value": "Proxy initial value should be 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4378bb9f509aff341a45554817962c3f5dcceb001980b64bd51ecf04151bde17",
																"typeString": "literal_string \"Proxy initial value should be 0\""
															}
														],
														"id": 137,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "610:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "610:62:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 145,
												"nodeType": "ExpressionStatement",
												"src": "610:62:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 146,
															"name": "logic",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 110,
															"src": "745:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_LogicContract_$22",
																"typeString": "contract LogicContract"
															}
														},
														"id": 148,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "751:9:2",
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 11,
														"src": "745:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
															"typeString": "function () external"
														}
													},
													"id": 149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "745:17:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 150,
												"nodeType": "ExpressionStatement",
												"src": "745:17:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 156,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 152,
																		"name": "logic",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 110,
																		"src": "781:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_LogicContract_$22",
																			"typeString": "contract LogicContract"
																		}
																	},
																	"id": 153,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "787:5:2",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3,
																	"src": "781:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																		"typeString": "function () view external returns (uint256)"
																	}
																},
																"id": 154,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "781:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "798:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "781:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c6f6769632076616c75652073686f756c64206265203120616674657220696e6372656d656e74",
															"id": 157,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "801:41:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_66f6b1959f9e092725d3d23b94beb208f3b8323292ee94320335641f8b76bfa8",
																"typeString": "literal_string \"Logic value should be 1 after increment\""
															},
															"value": "Logic value should be 1 after increment"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_66f6b1959f9e092725d3d23b94beb208f3b8323292ee94320335641f8b76bfa8",
																"typeString": "literal_string \"Logic value should be 1 after increment\""
															}
														],
														"id": 151,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "773:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "773:70:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 159,
												"nodeType": "ExpressionStatement",
												"src": "773:70:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 165,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 161,
																		"name": "proxy",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 118,
																		"src": "862:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ProxyContract_$101",
																			"typeString": "contract ProxyContract"
																		}
																	},
																	"id": 162,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "868:5:2",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 26,
																	"src": "862:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																		"typeString": "function () view external returns (uint256)"
																	}
																},
																"id": 163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "862:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 164,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "879:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "862:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50726f78792076616c75652073686f756c642072656d61696e2030",
															"id": 166,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "882:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_055cfcc9119bb1dfcbe4509666be02b021b3b51e35015d529512ee3c9178e3b3",
																"typeString": "literal_string \"Proxy value should remain 0\""
															},
															"value": "Proxy value should remain 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_055cfcc9119bb1dfcbe4509666be02b021b3b51e35015d529512ee3c9178e3b3",
																"typeString": "literal_string \"Proxy value should remain 0\""
															}
														],
														"id": 160,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "854:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "854:58:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 168,
												"nodeType": "ExpressionStatement",
												"src": "854:58:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 169,
															"name": "proxy",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 118,
															"src": "976:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ProxyContract_$101",
																"typeString": "contract ProxyContract"
															}
														},
														"id": 171,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "982:9:2",
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 70,
														"src": "976:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$__$returns$_t_bool_$",
															"typeString": "function () external returns (bool)"
														}
													},
													"id": 172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "976:17:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 173,
												"nodeType": "ExpressionStatement",
												"src": "976:17:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 175,
																		"name": "proxy",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 118,
																		"src": "1012:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ProxyContract_$101",
																			"typeString": "contract ProxyContract"
																		}
																	},
																	"id": 176,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1018:5:2",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 26,
																	"src": "1012:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																		"typeString": "function () view external returns (uint256)"
																	}
																},
																"id": 177,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1012:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 178,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1029:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1012:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50726f78792076616c75652073686f756c64206265203120616674657220696e6372656d656e74",
															"id": 180,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1032:41:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_573a90a4223c58900d2824c5aaafb398c8d51c1092807a1787be88809f78d61f",
																"typeString": "literal_string \"Proxy value should be 1 after increment\""
															},
															"value": "Proxy value should be 1 after increment"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_573a90a4223c58900d2824c5aaafb398c8d51c1092807a1787be88809f78d61f",
																"typeString": "literal_string \"Proxy value should be 1 after increment\""
															}
														],
														"id": 174,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1004:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1004:70:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "1004:70:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 188,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 184,
																		"name": "logic",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 110,
																		"src": "1093:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_LogicContract_$22",
																			"typeString": "contract LogicContract"
																		}
																	},
																	"id": 185,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1099:5:2",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3,
																	"src": "1093:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																		"typeString": "function () view external returns (uint256)"
																	}
																},
																"id": 186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1093:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 187,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1110:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1093:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c6f6769632076616c75652073686f756c642072656d61696e2031",
															"id": 189,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1113:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c9683238c2f2f3dafceea3df8726bf1b722e4f80fe6b783795bb5ee13d12b857",
																"typeString": "literal_string \"Logic value should remain 1\""
															},
															"value": "Logic value should remain 1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c9683238c2f2f3dafceea3df8726bf1b722e4f80fe6b783795bb5ee13d12b857",
																"typeString": "literal_string \"Logic value should remain 1\""
															}
														],
														"id": 183,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1085:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1085:58:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 191,
												"nodeType": "ExpressionStatement",
												"src": "1085:58:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "3130",
															"id": 195,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1215:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															},
															"value": "10"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															}
														],
														"expression": {
															"id": 192,
															"name": "proxy",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 118,
															"src": "1200:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ProxyContract_$101",
																"typeString": "contract ProxyContract"
															}
														},
														"id": 194,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1206:8:2",
														"memberName": "setValue",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 91,
														"src": "1200:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (uint256) external returns (bool)"
														}
													},
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1200:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 197,
												"nodeType": "ExpressionStatement",
												"src": "1200:18:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 199,
																		"name": "proxy",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 118,
																		"src": "1237:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ProxyContract_$101",
																			"typeString": "contract ProxyContract"
																		}
																	},
																	"id": 200,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1243:5:2",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 26,
																	"src": "1237:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																		"typeString": "function () view external returns (uint256)"
																	}
																},
																"id": 201,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1237:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3130",
																"id": 202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1254:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"src": "1237:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50726f78792076616c75652073686f756c64206265203130",
															"id": 204,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1258:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_946f47b70254a877db49f29a4a9bf89da1e0d5e34bd2cff2b6ed4f601aeebd37",
																"typeString": "literal_string \"Proxy value should be 10\""
															},
															"value": "Proxy value should be 10"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_946f47b70254a877db49f29a4a9bf89da1e0d5e34bd2cff2b6ed4f601aeebd37",
																"typeString": "literal_string \"Proxy value should be 10\""
															}
														],
														"id": 198,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1229:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1229:56:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 206,
												"nodeType": "ExpressionStatement",
												"src": "1229:56:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 212,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 208,
																		"name": "logic",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 110,
																		"src": "1304:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_LogicContract_$22",
																			"typeString": "contract LogicContract"
																		}
																	},
																	"id": 209,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1310:5:2",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3,
																	"src": "1304:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																		"typeString": "function () view external returns (uint256)"
																	}
																},
																"id": 210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1304:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 211,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1321:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1304:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c6f6769632076616c75652073686f756c642072656d61696e2031",
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1324:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c9683238c2f2f3dafceea3df8726bf1b722e4f80fe6b783795bb5ee13d12b857",
																"typeString": "literal_string \"Logic value should remain 1\""
															},
															"value": "Logic value should remain 1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c9683238c2f2f3dafceea3df8726bf1b722e4f80fe6b783795bb5ee13d12b857",
																"typeString": "literal_string \"Logic value should remain 1\""
															}
														],
														"id": 207,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1296:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1296:58:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 215,
												"nodeType": "ExpressionStatement",
												"src": "1296:58:2"
											}
										]
									},
									"functionSelector": "e1e36341",
									"id": 217,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "testDelegateCall",
									"nameLocation": "233:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "249:2:2"
									},
									"returnParameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "259:0:2"
									},
									"scope": 218,
									"src": "224:1267:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 219,
							"src": "162:1332:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:1461:2"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}